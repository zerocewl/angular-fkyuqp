import { formatNumber } from './../services/utilities';
import { getValueFromParamsOrFormatterOptions } from './formatterUtilities';
export var decimalFormatter = function (row, cell, value, columnDef, dataContext, grid) {
    var isNumber = (value === null || value === undefined || value === '') ? false : !isNaN(+value);
    var params = columnDef.params || {};
    var minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);
    var maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 2);
    var decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    var thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    var displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    // @deprecated: decimalPlaces, minDecimalPlaces, maxDecimalPlaces
    // add these extra checks to support previous way of passing the decimal count
    if ((params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces)) {
        console.warn('[Angular-Slickgrid] please consider using "minDecimal" (instead of "minDecimalPlaces" or "decimalPlaces").');
        minDecimal = (params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces);
    }
    if (params.maxDecimalPlaces !== null && params.maxDecimalPlaces) {
        console.warn('[Angular-Slickgrid] please consider using "maxDecimal" (instead of "maxDecimalPlaces").');
        maxDecimal = (params.maxDecimalPlaces !== null && params.maxDecimalPlaces);
    }
    if (isNumber) {
        return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbEZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9kZWNpbWFsRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1RSxNQUFNLENBQUMsSUFBTSxnQkFBZ0IsR0FBYyxVQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTO0lBQy9ILElBQU0sUUFBUSxHQUFHLENBQUMsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUyxJQUFJLEtBQUssS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xHLElBQU0sTUFBTSxHQUFHLFNBQVMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO0lBQ3RDLElBQUksVUFBVSxHQUFHLG9DQUFvQyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLElBQUksVUFBVSxHQUFHLG9DQUFvQyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3hGLElBQU0sZ0JBQWdCLEdBQUcsb0NBQW9DLENBQUMsa0JBQWtCLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztJQUN4RyxJQUFNLGlCQUFpQixHQUFHLG9DQUFvQyxDQUFDLG1CQUFtQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsRUFBRSxDQUFDLENBQUM7SUFDekcsSUFBTSxvQ0FBb0MsR0FBRyxvQ0FBb0MsQ0FBQyxzQ0FBc0MsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBRWxKLGlFQUFpRTtJQUNqRSw4RUFBOEU7SUFDOUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLEVBQUU7UUFDNUgsT0FBTyxDQUFDLElBQUksQ0FBQyw0R0FBNEcsQ0FBQyxDQUFDO1FBQzNILFVBQVUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7S0FDdkk7SUFDRCxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGdCQUFnQixFQUFFO1FBQy9ELE9BQU8sQ0FBQyxJQUFJLENBQUMseUZBQXlGLENBQUMsQ0FBQztRQUN4RyxVQUFVLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0tBQzVFO0lBRUQsSUFBSSxRQUFRLEVBQUU7UUFDWixPQUFPLFlBQVksQ0FBQyxLQUFLLEVBQUUsVUFBVSxFQUFFLFVBQVUsRUFBRSxvQ0FBb0MsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLENBQUM7S0FDdkk7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBmb3JtYXROdW1iZXIgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucyB9IGZyb20gJy4vZm9ybWF0dGVyVXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBkZWNpbWFsRm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSAocm93OiBudW1iZXIsIGNlbGw6IG51bWJlciwgdmFsdWU6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGRhdGFDb250ZXh0OiBhbnksIGdyaWQ6IGFueSkgPT4ge1xyXG4gIGNvbnN0IGlzTnVtYmVyID0gKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWQgfHwgdmFsdWUgPT09ICcnKSA/IGZhbHNlIDogIWlzTmFOKCt2YWx1ZSk7XHJcbiAgY29uc3QgcGFyYW1zID0gY29sdW1uRGVmLnBhcmFtcyB8fCB7fTtcclxuICBsZXQgbWluRGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnbWluRGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCwgMik7XHJcbiAgbGV0IG1heERlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ21heERlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQsIDIpO1xyXG4gIGNvbnN0IGRlY2ltYWxTZXBhcmF0b3IgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ2RlY2ltYWxTZXBhcmF0b3InLCBjb2x1bW5EZWYsIGdyaWQsICcuJyk7XHJcbiAgY29uc3QgdGhvdXNhbmRTZXBhcmF0b3IgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ3Rob3VzYW5kU2VwYXJhdG9yJywgY29sdW1uRGVmLCBncmlkLCAnJyk7XHJcbiAgY29uc3QgZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMnLCBjb2x1bW5EZWYsIGdyaWQsIGZhbHNlKTtcclxuXHJcbiAgLy8gQGRlcHJlY2F0ZWQ6IGRlY2ltYWxQbGFjZXMsIG1pbkRlY2ltYWxQbGFjZXMsIG1heERlY2ltYWxQbGFjZXNcclxuICAvLyBhZGQgdGhlc2UgZXh0cmEgY2hlY2tzIHRvIHN1cHBvcnQgcHJldmlvdXMgd2F5IG9mIHBhc3NpbmcgdGhlIGRlY2ltYWwgY291bnRcclxuICBpZiAoKHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzICE9PSBudWxsICYmIHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzKSB8fCAocGFyYW1zLmRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLmRlY2ltYWxQbGFjZXMpKSB7XHJcbiAgICBjb25zb2xlLndhcm4oJ1tBbmd1bGFyLVNsaWNrZ3JpZF0gcGxlYXNlIGNvbnNpZGVyIHVzaW5nIFwibWluRGVjaW1hbFwiIChpbnN0ZWFkIG9mIFwibWluRGVjaW1hbFBsYWNlc1wiIG9yIFwiZGVjaW1hbFBsYWNlc1wiKS4nKTtcclxuICAgIG1pbkRlY2ltYWwgPSAocGFyYW1zLm1pbkRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLm1pbkRlY2ltYWxQbGFjZXMpIHx8IChwYXJhbXMuZGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMuZGVjaW1hbFBsYWNlcyk7XHJcbiAgfVxyXG4gIGlmIChwYXJhbXMubWF4RGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMubWF4RGVjaW1hbFBsYWNlcykge1xyXG4gICAgY29uc29sZS53YXJuKCdbQW5ndWxhci1TbGlja2dyaWRdIHBsZWFzZSBjb25zaWRlciB1c2luZyBcIm1heERlY2ltYWxcIiAoaW5zdGVhZCBvZiBcIm1heERlY2ltYWxQbGFjZXNcIikuJyk7XHJcbiAgICBtYXhEZWNpbWFsID0gKHBhcmFtcy5tYXhEZWNpbWFsUGxhY2VzICE9PSBudWxsICYmIHBhcmFtcy5tYXhEZWNpbWFsUGxhY2VzKTtcclxuICB9XHJcblxyXG4gIGlmIChpc051bWJlcikge1xyXG4gICAgcmV0dXJuIGZvcm1hdE51bWJlcih2YWx1ZSwgbWluRGVjaW1hbCwgbWF4RGVjaW1hbCwgZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzLCAnJywgJycsIGRlY2ltYWxTZXBhcmF0b3IsIHRob3VzYW5kU2VwYXJhdG9yKTtcclxuICB9XHJcbiAgcmV0dXJuIHZhbHVlO1xyXG59O1xyXG5cclxuIl19