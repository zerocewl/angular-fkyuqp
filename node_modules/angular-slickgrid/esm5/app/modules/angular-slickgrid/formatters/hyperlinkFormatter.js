import * as DOMPurify_ from 'dompurify';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
/**
 * Takes an hyperlink cell value and transforms it into a real hyperlink, given that the value starts with 1 of these (http|ftp|https).
 * The structure will be "<a href="hyperlink">hyperlink</a>"
 *
 * You can optionally change the hyperlink text displayed by using the generic params "hyperlinkText" in the column definition
 * For example: { id: 'link', field: 'link', params: { hyperlinkText: 'Company Website' } } will display "<a href="link">Company Website</a>"
 *
 * You can also optionally provide the hyperlink URL by using the generic params "hyperlinkUrl" in the column definition
 * For example: { id: 'link', field: 'link', params: {  hyperlinkText: 'Company Website', hyperlinkUrl: 'http://www.somewhere.com' } } will display "<a href="http://www.somewhere.com">Company Website</a>"
 */
export var hyperlinkFormatter = function (row, cell, value, columnDef, dataContext) {
    var columnParams = columnDef && columnDef.params || {};
    var displayedText = columnParams.hyperlinkText ? columnParams.hyperlinkText : value;
    displayedText = DOMPurify.sanitize(displayedText || '');
    var outputLink = columnParams.hyperlinkUrl ? columnParams.hyperlinkUrl : value;
    outputLink = DOMPurify.sanitize(outputLink || '');
    var matchUrl = outputLink.match(/^(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?/i);
    if (matchUrl && Array.isArray(matchUrl) && matchUrl.length > 0) {
        var finalUrl = matchUrl[0];
        return "<a href=\"" + finalUrl + "\">" + displayedText + "</a>";
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaHlwZXJsaW5rRm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2h5cGVybGlua0Zvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEtBQUssVUFBVSxNQUFNLFdBQVcsQ0FBQztBQUN4QyxJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsQ0FBQyw4QkFBOEI7QUFLNUQ7Ozs7Ozs7OztHQVNHO0FBQ0gsTUFBTSxDQUFDLElBQU0sa0JBQWtCLEdBQWMsVUFBQyxHQUFXLEVBQUUsSUFBWSxFQUFFLEtBQVUsRUFBRSxTQUFpQixFQUFFLFdBQWdCO0lBQ3RILElBQU0sWUFBWSxHQUFHLFNBQVMsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUV6RCxJQUFJLGFBQWEsR0FBRyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDcEYsYUFBYSxHQUFHLFNBQVMsQ0FBQyxRQUFRLENBQUMsYUFBYSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBRXhELElBQUksVUFBVSxHQUFHLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLFlBQVksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztJQUMvRSxVQUFVLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQyxVQUFVLElBQUksRUFBRSxDQUFDLENBQUM7SUFFbEQsSUFBTSxRQUFRLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxtR0FBbUcsQ0FBQyxDQUFDO0lBRXZJLElBQUksUUFBUSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksUUFBUSxDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7UUFDOUQsSUFBTSxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzdCLE9BQU8sZUFBWSxRQUFRLFdBQUssYUFBYSxTQUFNLENBQUM7S0FDckQ7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIERPTVB1cmlmeV8gZnJvbSAnZG9tcHVyaWZ5JztcbmNvbnN0IERPTVB1cmlmeSA9IERPTVB1cmlmeV87IC8vIHBhdGNoIHRvIGZpeCByb2xsdXAgdG8gd29ya1xuXG5pbXBvcnQgeyBDb2x1bW4gfSBmcm9tICcuLy4uL21vZGVscy9jb2x1bW4uaW50ZXJmYWNlJztcbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2Zvcm1hdHRlci5pbnRlcmZhY2UnO1xuXG4vKipcbiAqIFRha2VzIGFuIGh5cGVybGluayBjZWxsIHZhbHVlIGFuZCB0cmFuc2Zvcm1zIGl0IGludG8gYSByZWFsIGh5cGVybGluaywgZ2l2ZW4gdGhhdCB0aGUgdmFsdWUgc3RhcnRzIHdpdGggMSBvZiB0aGVzZSAoaHR0cHxmdHB8aHR0cHMpLlxuICogVGhlIHN0cnVjdHVyZSB3aWxsIGJlIFwiPGEgaHJlZj1cImh5cGVybGlua1wiPmh5cGVybGluazwvYT5cIlxuICpcbiAqIFlvdSBjYW4gb3B0aW9uYWxseSBjaGFuZ2UgdGhlIGh5cGVybGluayB0ZXh0IGRpc3BsYXllZCBieSB1c2luZyB0aGUgZ2VuZXJpYyBwYXJhbXMgXCJoeXBlcmxpbmtUZXh0XCIgaW4gdGhlIGNvbHVtbiBkZWZpbml0aW9uXG4gKiBGb3IgZXhhbXBsZTogeyBpZDogJ2xpbmsnLCBmaWVsZDogJ2xpbmsnLCBwYXJhbXM6IHsgaHlwZXJsaW5rVGV4dDogJ0NvbXBhbnkgV2Vic2l0ZScgfSB9IHdpbGwgZGlzcGxheSBcIjxhIGhyZWY9XCJsaW5rXCI+Q29tcGFueSBXZWJzaXRlPC9hPlwiXG4gKlxuICogWW91IGNhbiBhbHNvIG9wdGlvbmFsbHkgcHJvdmlkZSB0aGUgaHlwZXJsaW5rIFVSTCBieSB1c2luZyB0aGUgZ2VuZXJpYyBwYXJhbXMgXCJoeXBlcmxpbmtVcmxcIiBpbiB0aGUgY29sdW1uIGRlZmluaXRpb25cbiAqIEZvciBleGFtcGxlOiB7IGlkOiAnbGluaycsIGZpZWxkOiAnbGluaycsIHBhcmFtczogeyAgaHlwZXJsaW5rVGV4dDogJ0NvbXBhbnkgV2Vic2l0ZScsIGh5cGVybGlua1VybDogJ2h0dHA6Ly93d3cuc29tZXdoZXJlLmNvbScgfSB9IHdpbGwgZGlzcGxheSBcIjxhIGhyZWY9XCJodHRwOi8vd3d3LnNvbWV3aGVyZS5jb21cIj5Db21wYW55IFdlYnNpdGU8L2E+XCJcbiAqL1xuZXhwb3J0IGNvbnN0IGh5cGVybGlua0Zvcm1hdHRlcjogRm9ybWF0dGVyID0gKHJvdzogbnVtYmVyLCBjZWxsOiBudW1iZXIsIHZhbHVlOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBkYXRhQ29udGV4dDogYW55KSA9PiB7XG4gIGNvbnN0IGNvbHVtblBhcmFtcyA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYucGFyYW1zIHx8IHt9O1xuXG4gIGxldCBkaXNwbGF5ZWRUZXh0ID0gY29sdW1uUGFyYW1zLmh5cGVybGlua1RleHQgPyBjb2x1bW5QYXJhbXMuaHlwZXJsaW5rVGV4dCA6IHZhbHVlO1xuICBkaXNwbGF5ZWRUZXh0ID0gRE9NUHVyaWZ5LnNhbml0aXplKGRpc3BsYXllZFRleHQgfHwgJycpO1xuXG4gIGxldCBvdXRwdXRMaW5rID0gY29sdW1uUGFyYW1zLmh5cGVybGlua1VybCA/IGNvbHVtblBhcmFtcy5oeXBlcmxpbmtVcmwgOiB2YWx1ZTtcbiAgb3V0cHV0TGluayA9IERPTVB1cmlmeS5zYW5pdGl6ZShvdXRwdXRMaW5rIHx8ICcnKTtcblxuICBjb25zdCBtYXRjaFVybCA9IG91dHB1dExpbmsubWF0Y2goL14oaHR0cHxmdHB8aHR0cHMpOlxcL1xcL1tcXHdcXC1fXSsoXFwuW1xcd1xcLV9dKykrKFtcXHdcXC1cXC4sQD9ePSUmYW1wOzpcXC9+XFwrI10qW1xcd1xcLVxcQD9ePSUmYW1wO1xcL35cXCsjXSk/L2kpO1xuXG4gIGlmIChtYXRjaFVybCAmJiBBcnJheS5pc0FycmF5KG1hdGNoVXJsKSAmJiBtYXRjaFVybC5sZW5ndGggPiAwKSB7XG4gICAgY29uc3QgZmluYWxVcmwgPSBtYXRjaFVybFswXTtcbiAgICByZXR1cm4gYDxhIGhyZWY9XCIke2ZpbmFsVXJsfVwiPiR7ZGlzcGxheWVkVGV4dH08L2E+YDtcbiAgfVxuXG4gIHJldHVybiB2YWx1ZTtcbn07XG4iXX0=