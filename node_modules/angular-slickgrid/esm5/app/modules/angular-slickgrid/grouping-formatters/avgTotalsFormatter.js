import { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities';
import { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';
export var avgTotalsFormatter = function (totals, columnDef, grid) {
    var field = columnDef.field || '';
    var val = totals.avg && totals.avg[field];
    var params = columnDef && columnDef.params;
    var prefix = params && params.groupFormatterPrefix || '';
    var suffix = params && params.groupFormatterSuffix || '';
    var minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    var maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    var decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    var thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    var displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val != null && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    var outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);
                    return prefix + "(" + outputVal + ")" + suffix;
                }
                return prefix + "(" + decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator) + ")" + suffix;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            var outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);
            return "" + prefix + outputVal + suffix;
        }
        return "" + prefix + decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator) + suffix;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZnVG90YWxzRm9ybWF0dGVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9ncm91cGluZy1mb3JtYXR0ZXJzL2F2Z1RvdGFsc0Zvcm1hdHRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsMEJBQTBCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUNyRixPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUV4RixNQUFNLENBQUMsSUFBTSxrQkFBa0IsR0FBeUIsVUFBQyxNQUFXLEVBQUUsU0FBaUIsRUFBRSxJQUFVO0lBQ2pHLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxJQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUN6RCxJQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUMzRCxJQUFNLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLElBQU0sVUFBVSxHQUFHLG9DQUFvQyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsSUFBTSxnQkFBZ0IsR0FBRyxvQ0FBb0MsQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hHLElBQU0saUJBQWlCLEdBQUcsb0NBQW9DLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RyxJQUFNLG9DQUFvQyxHQUFHLG9DQUFvQyxDQUFDLHNDQUFzQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEosSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDL0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO2dCQUN6QyxNQUFNLElBQUksR0FBRyxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0wsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUMxQyxJQUFNLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7b0JBQ2pGLE9BQVUsTUFBTSxTQUFJLFNBQVMsU0FBSSxNQUFRLENBQUM7aUJBQzNDO2dCQUNELE9BQVUsTUFBTSxTQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLFNBQUksTUFBUSxDQUFDO2FBQ3BIO1NBQ0Y7UUFFRCxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDMUMsSUFBTSxTQUFTLEdBQUcsMEJBQTBCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO1lBQ2pGLE9BQU8sS0FBRyxNQUFNLEdBQUcsU0FBUyxHQUFHLE1BQVEsQ0FBQztTQUN6QztRQUNELE9BQU8sS0FBRyxNQUFNLEdBQUcsZ0JBQWdCLENBQUMsR0FBRyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsR0FBRyxNQUFRLENBQUM7S0FDbEg7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgR3JvdXBUb3RhbHNGb3JtYXR0ZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IGRlY2ltYWxGb3JtYXR0ZWQsIHRob3VzYW5kU2VwYXJhdG9yRm9ybWF0dGVkIH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuaW1wb3J0IHsgZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zIH0gZnJvbSAnLi4vZm9ybWF0dGVycy9mb3JtYXR0ZXJVdGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF2Z1RvdGFsc0Zvcm1hdHRlcjogR3JvdXBUb3RhbHNGb3JtYXR0ZXIgPSAodG90YWxzOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBncmlkPzogYW55KSA9PiB7XHJcbiAgY29uc3QgZmllbGQgPSBjb2x1bW5EZWYuZmllbGQgfHwgJyc7XHJcbiAgbGV0IHZhbCA9IHRvdGFscy5hdmcgJiYgdG90YWxzLmF2Z1tmaWVsZF07XHJcbiAgY29uc3QgcGFyYW1zID0gY29sdW1uRGVmICYmIGNvbHVtbkRlZi5wYXJhbXM7XHJcbiAgbGV0IHByZWZpeCA9IHBhcmFtcyAmJiBwYXJhbXMuZ3JvdXBGb3JtYXR0ZXJQcmVmaXggfHwgJyc7XHJcbiAgY29uc3Qgc3VmZml4ID0gcGFyYW1zICYmIHBhcmFtcy5ncm91cEZvcm1hdHRlclN1ZmZpeCB8fCAnJztcclxuICBjb25zdCBtaW5EZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdtaW5EZWNpbWFsJywgY29sdW1uRGVmLCBncmlkKTtcclxuICBjb25zdCBtYXhEZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdtYXhEZWNpbWFsJywgY29sdW1uRGVmLCBncmlkKTtcclxuICBjb25zdCBkZWNpbWFsU2VwYXJhdG9yID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdkZWNpbWFsU2VwYXJhdG9yJywgY29sdW1uRGVmLCBncmlkLCAnLicpO1xyXG4gIGNvbnN0IHRob3VzYW5kU2VwYXJhdG9yID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCd0aG91c2FuZFNlcGFyYXRvcicsIGNvbHVtbkRlZiwgZ3JpZCwgJycpO1xyXG4gIGNvbnN0IGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzJywgY29sdW1uRGVmLCBncmlkLCBmYWxzZSk7XHJcblxyXG4gIGlmICh2YWwgIT0gbnVsbCAmJiAhaXNOYU4oK3ZhbCkpIHtcclxuICAgIGlmICh2YWwgPCAwKSB7XHJcbiAgICAgIHZhbCA9IE1hdGguYWJzKHZhbCk7XHJcbiAgICAgIGlmICghZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzKSB7XHJcbiAgICAgICAgcHJlZml4ICs9ICctJztcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoaXNOYU4obWluRGVjaW1hbCkgJiYgaXNOYU4obWF4RGVjaW1hbCkpIHtcclxuICAgICAgICAgIGNvbnN0IG91dHB1dFZhbCA9IHRob3VzYW5kU2VwYXJhdG9yRm9ybWF0dGVkKE1hdGgucm91bmQodmFsKSwgdGhvdXNhbmRTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0oJHtvdXRwdXRWYWx9KSR7c3VmZml4fWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBgJHtwcmVmaXh9KCR7ZGVjaW1hbEZvcm1hdHRlZCh2YWwsIG1pbkRlY2ltYWwsIG1heERlY2ltYWwsIGRlY2ltYWxTZXBhcmF0b3IsIHRob3VzYW5kU2VwYXJhdG9yKX0pJHtzdWZmaXh9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc05hTihtaW5EZWNpbWFsKSAmJiBpc05hTihtYXhEZWNpbWFsKSkge1xyXG4gICAgICBjb25zdCBvdXRwdXRWYWwgPSB0aG91c2FuZFNlcGFyYXRvckZvcm1hdHRlZChNYXRoLnJvdW5kKHZhbCksIHRob3VzYW5kU2VwYXJhdG9yKTtcclxuICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke291dHB1dFZhbH0ke3N1ZmZpeH1gO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGAke3ByZWZpeH0ke2RlY2ltYWxGb3JtYXR0ZWQodmFsLCBtaW5EZWNpbWFsLCBtYXhEZWNpbWFsLCBkZWNpbWFsU2VwYXJhdG9yLCB0aG91c2FuZFNlcGFyYXRvcil9JHtzdWZmaXh9YDtcclxuICB9XHJcbiAgcmV0dXJuICcnO1xyXG59O1xyXG4iXX0=