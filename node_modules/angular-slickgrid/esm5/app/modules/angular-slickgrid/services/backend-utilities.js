import { EMPTY, iif, isObservable } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { EmitterType } from '../models';
var main = {};
/** Execute the Backend Processes Callback, that could come from an Observable or a Promise callback */
main.executeBackendProcessesCallback = function exeBackendProcessesCallback(startTime, processResult, backendApi, totalItems) {
    var endTime = new Date();
    // define what our internal Post Process callback, only available for GraphQL Service for now
    // it will basically refresh the Dataset & Pagination removing the need for the user to always create his own PostProcess every time
    if (processResult && backendApi && backendApi.internalPostProcess) {
        backendApi.internalPostProcess(processResult);
    }
    // send the response process to the postProcess callback
    if (backendApi.postProcess) {
        if (processResult instanceof Object) {
            processResult.metrics = {
                startTime: startTime,
                endTime: endTime,
                executionTime: endTime.valueOf() - startTime.valueOf(),
                itemCount: totalItems,
                totalItemCount: totalItems
            };
            // @deprecated
            processResult.statistics = processResult.metrics;
        }
        backendApi.postProcess(processResult);
    }
};
/** On a backend service api error, we will run the "onError" if there is 1 provided or just throw back the error when nothing is provided */
main.onBackendError = function backendError(e, backendApi) {
    if (backendApi && backendApi.onError) {
        backendApi.onError(e);
    }
    else {
        throw e;
    }
};
/**
 * Execute the backend callback, which are mainly the "process" & "postProcess" methods.
 * Also note that "preProcess" was executed prior to this callback
 */
main.executeBackendCallback = function exeBackendCallback(backendServiceApi, query, args, startTime, totalItems, emitActionChangedCallback, httpCancelRequests$) {
    if (backendServiceApi) {
        // emit an onFilterChanged event when it's not called by a clear filter
        if (args && !args.clearFilterTriggered && !args.clearSortTriggered) {
            emitActionChangedCallback(EmitterType.remote);
        }
        // the processes can be Observables (like HttpClient) or Promises
        var process_1 = backendServiceApi.process(query);
        if (process_1 instanceof Promise && process_1.then) {
            process_1.then(function (processResult) { return main.executeBackendProcessesCallback(startTime, processResult, backendServiceApi, totalItems); })
                .catch(function (error) { return main.onBackendError(error, backendServiceApi); });
        }
        else if (isObservable(process_1)) {
            // this will abort any previous HTTP requests, that were previously hooked in the takeUntil, before sending a new request
            if (isObservable(httpCancelRequests$)) {
                httpCancelRequests$.next();
            }
            process_1
                // the following takeUntil, will potentially be used later to cancel any pending http request (takeUntil another rx, that would be httpCancelRequests$, completes)
                // but make sure the observable is actually defined with the iif condition check before piping it to the takeUntil
                .pipe(takeUntil(iif(function () { return isObservable(httpCancelRequests$); }, httpCancelRequests$, EMPTY)))
                .subscribe(function (processResult) { return main.executeBackendProcessesCallback(startTime, processResult, backendServiceApi, totalItems); }, function (error) { return main.onBackendError(error, backendServiceApi); });
        }
    }
};
/** Refresh the dataset through the Backend Service */
main.refreshBackendDataset = function refreshBackend(gridOptions) {
    var query = '';
    var backendApi = gridOptions && gridOptions.backendServiceApi;
    if (!backendApi || !backendApi.service || !backendApi.process) {
        throw new Error("BackendServiceApi requires at least a \"process\" function and a \"service\" defined");
    }
    if (backendApi.service) {
        query = backendApi.service.buildQuery();
    }
    if (query && query !== '') {
        // keep start time & end timestamps & return it after process execution
        var startTime = new Date();
        if (backendApi.preProcess) {
            backendApi.preProcess();
        }
        var totalItems = gridOptions && gridOptions.pagination && gridOptions.pagination.totalItems;
        main.executeBackendCallback(backendApi, query, null, startTime, totalItems);
    }
};
// export all methods & the main so that it works in all modules but also in Jest unit test
// export every method as independent constant so that it still works whenever this is used in other modules
export var executeBackendProcessesCallback = main.executeBackendProcessesCallback;
export var onBackendError = main.onBackendError;
export var executeBackendCallback = main.executeBackendCallback;
export var refreshBackendDataset = main.refreshBackendDataset;
export default main;
//# sourceMappingURL=data:application/json;base64,