var GridEventService = /** @class */ (function () {
    function GridEventService() {
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(GridEventService.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    /* OnCellChange Event */
    GridEventService.prototype.bindOnCellChange = function (grid, dataView) {
        // subscribe to this Slickgrid event of onCellChange
        this._eventHandler.subscribe(grid.onCellChange, function (e, args) {
            if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
                return;
            }
            var column = grid.getColumns()[args.cell];
            // if the column definition has a onCellChange property (a callback function), then run it
            if (typeof column.onCellChange === 'function') {
                // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange
                var returnedArgs = {
                    row: args.row,
                    cell: args.cell,
                    dataView: dataView,
                    grid: grid,
                    columnDef: column,
                    dataContext: grid.getDataItem(args.row)
                };
                // finally call up the Slick.column.onCellChanges.... function
                column.onCellChange(e, returnedArgs);
            }
        });
    };
    /* OnClick Event */
    GridEventService.prototype.bindOnClick = function (grid, dataView) {
        this._eventHandler.subscribe(grid.onClick, function (e, args) {
            if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
                return;
            }
            var column = grid && grid.getColumns && grid.getColumns()[args.cell];
            var gridOptions = grid && grid.getOptions && grid.getOptions() || {};
            // only when using autoCommitEdit, we will make the cell active (in focus) when clicked
            // setting the cell as active as a side effect and if autoCommitEdit is set to false then the Editors won't save correctly
            if (gridOptions.enableCellNavigation && (!gridOptions.editable || (gridOptions.editable && gridOptions.autoCommitEdit))) {
                grid.setActiveCell(args.row, args.cell);
            }
            // if the column definition has a onCellClick property (a callback function), then run it
            if (typeof column.onCellClick === 'function') {
                // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick
                var returnedArgs = {
                    row: args.row,
                    cell: args.cell,
                    dataView: dataView,
                    grid: grid,
                    columnDef: column,
                    dataContext: grid.getDataItem(args.row)
                };
                // finally call up the Slick.column.onCellClick.... function
                column.onCellClick(e, returnedArgs);
            }
        });
    };
    GridEventService.prototype.dispose = function () {
        this._eventHandler.unsubscribeAll();
    };
    return GridEventService;
}());
export { GridEventService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZEV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL3NlcnZpY2VzL2dyaWRFdmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBO0lBT0U7UUFDRSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksS0FBSyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2hELENBQUM7SUFORCxzQkFBSSwwQ0FBWTthQUFoQjtZQUNFLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQztRQUM1QixDQUFDOzs7T0FBQTtJQU1ELHdCQUF3QjtJQUN4QiwyQ0FBZ0IsR0FBaEIsVUFBaUIsSUFBUyxFQUFFLFFBQWE7UUFDdkMsb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxhQUFhLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxZQUFZLEVBQUUsVUFBQyxDQUE2QixFQUFFLElBQWM7WUFDNUYsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUM1RixPQUFPO2FBQ1I7WUFDRCxJQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXBELDBGQUEwRjtZQUMxRixJQUFJLE9BQU8sTUFBTSxDQUFDLFlBQVksS0FBSyxVQUFVLEVBQUU7Z0JBQzdDLHFHQUFxRztnQkFDckcsSUFBTSxZQUFZLEdBQWdCO29CQUNoQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLFFBQVEsVUFBQTtvQkFDUixJQUFJLE1BQUE7b0JBQ0osU0FBUyxFQUFFLE1BQU07b0JBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7aUJBQ3hDLENBQUM7Z0JBRUYsOERBQThEO2dCQUM5RCxNQUFNLENBQUMsWUFBWSxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUN0QztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELG1CQUFtQjtJQUNuQixzQ0FBVyxHQUFYLFVBQVksSUFBUyxFQUFFLFFBQWE7UUFDbEMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxVQUFDLENBQTZCLEVBQUUsSUFBYztZQUN2RixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQzVGLE9BQU87YUFDUjtZQUNELElBQU0sTUFBTSxHQUFXLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0UsSUFBTSxXQUFXLEdBQWUsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUVuRix1RkFBdUY7WUFDdkYsMEhBQTBIO1lBQzFILElBQUksV0FBVyxDQUFDLG9CQUFvQixJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRTtnQkFDdkgsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QztZQUVELHlGQUF5RjtZQUN6RixJQUFJLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUU7Z0JBQzVDLGdHQUFnRztnQkFDaEcsSUFBTSxZQUFZLEdBQWdCO29CQUNoQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLFFBQVEsVUFBQTtvQkFDUixJQUFJLE1BQUE7b0JBQ0osU0FBUyxFQUFFLE1BQU07b0JBQ2pCLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7aUJBQ3hDLENBQUM7Z0JBRUYsNERBQTREO2dCQUM1RCxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQzthQUNyQztRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQztJQUVELGtDQUFPLEdBQVA7UUFDRSxJQUFJLENBQUMsYUFBYSxDQUFDLGNBQWMsRUFBRSxDQUFDO0lBQ3RDLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUExRUQsSUEwRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDZWxsQXJncywgQ29sdW1uLCBHcmlkT3B0aW9uLCBPbkV2ZW50QXJncywgU2xpY2tFdmVudEhhbmRsZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XG5cbi8vIHVzaW5nIGV4dGVybmFsIG5vbi10eXBlZCBqcyBsaWJyYXJpZXNcbmRlY2xhcmUgdmFyIFNsaWNrOiBhbnk7XG5cbmV4cG9ydCBjbGFzcyBHcmlkRXZlbnRTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBfZXZlbnRIYW5kbGVyOiBTbGlja0V2ZW50SGFuZGxlcjtcblxuICBnZXQgZXZlbnRIYW5kbGVyKCk6IFNsaWNrRXZlbnRIYW5kbGVyIHtcbiAgICByZXR1cm4gdGhpcy5fZXZlbnRIYW5kbGVyO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5fZXZlbnRIYW5kbGVyID0gbmV3IFNsaWNrLkV2ZW50SGFuZGxlcigpO1xuICB9XG5cbiAgLyogT25DZWxsQ2hhbmdlIEV2ZW50ICovXG4gIGJpbmRPbkNlbGxDaGFuZ2UoZ3JpZDogYW55LCBkYXRhVmlldzogYW55KSB7XG4gICAgLy8gc3Vic2NyaWJlIHRvIHRoaXMgU2xpY2tncmlkIGV2ZW50IG9mIG9uQ2VsbENoYW5nZVxuICAgIHRoaXMuX2V2ZW50SGFuZGxlci5zdWJzY3JpYmUoZ3JpZC5vbkNlbGxDaGFuZ2UsIChlOiBLZXlib2FyZEV2ZW50IHwgTW91c2VFdmVudCwgYXJnczogQ2VsbEFyZ3MpID0+IHtcbiAgICAgIGlmICghZSB8fCAhYXJncyB8fCAhZ3JpZCB8fCBhcmdzLmNlbGwgPT09IHVuZGVmaW5lZCB8fCAhZ3JpZC5nZXRDb2x1bW5zIHx8ICFncmlkLmdldERhdGFJdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHVtbjogQ29sdW1uID0gZ3JpZC5nZXRDb2x1bW5zKClbYXJncy5jZWxsXTtcblxuICAgICAgLy8gaWYgdGhlIGNvbHVtbiBkZWZpbml0aW9uIGhhcyBhIG9uQ2VsbENoYW5nZSBwcm9wZXJ0eSAoYSBjYWxsYmFjayBmdW5jdGlvbiksIHRoZW4gcnVuIGl0XG4gICAgICBpZiAodHlwZW9mIGNvbHVtbi5vbkNlbGxDaGFuZ2UgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgLy8gYWRkIHRvIHRoZSBvdXRwdXQgZ3JpZE9wdGlvbnMgJiBkYXRhVmlldyBzaW5jZSB3ZSdsbCBuZWVkIHRoZW0gaW5zaWRlIHRoZSBBSkFYIGNvbHVtbi5vbkNlbGxDaGFuZ2VcbiAgICAgICAgY29uc3QgcmV0dXJuZWRBcmdzOiBPbkV2ZW50QXJncyA9IHtcbiAgICAgICAgICByb3c6IGFyZ3Mucm93LFxuICAgICAgICAgIGNlbGw6IGFyZ3MuY2VsbCxcbiAgICAgICAgICBkYXRhVmlldyxcbiAgICAgICAgICBncmlkLFxuICAgICAgICAgIGNvbHVtbkRlZjogY29sdW1uLFxuICAgICAgICAgIGRhdGFDb250ZXh0OiBncmlkLmdldERhdGFJdGVtKGFyZ3Mucm93KVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZpbmFsbHkgY2FsbCB1cCB0aGUgU2xpY2suY29sdW1uLm9uQ2VsbENoYW5nZXMuLi4uIGZ1bmN0aW9uXG4gICAgICAgIGNvbHVtbi5vbkNlbGxDaGFuZ2UoZSwgcmV0dXJuZWRBcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qIE9uQ2xpY2sgRXZlbnQgKi9cbiAgYmluZE9uQ2xpY2soZ3JpZDogYW55LCBkYXRhVmlldzogYW55KSB7XG4gICAgdGhpcy5fZXZlbnRIYW5kbGVyLnN1YnNjcmliZShncmlkLm9uQ2xpY2ssIChlOiBLZXlib2FyZEV2ZW50IHwgTW91c2VFdmVudCwgYXJnczogQ2VsbEFyZ3MpID0+IHtcbiAgICAgIGlmICghZSB8fCAhYXJncyB8fCAhZ3JpZCB8fCBhcmdzLmNlbGwgPT09IHVuZGVmaW5lZCB8fCAhZ3JpZC5nZXRDb2x1bW5zIHx8ICFncmlkLmdldERhdGFJdGVtKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGNvbnN0IGNvbHVtbjogQ29sdW1uID0gZ3JpZCAmJiBncmlkLmdldENvbHVtbnMgJiYgZ3JpZC5nZXRDb2x1bW5zKClbYXJncy5jZWxsXTtcbiAgICAgIGNvbnN0IGdyaWRPcHRpb25zOiBHcmlkT3B0aW9uID0gZ3JpZCAmJiBncmlkLmdldE9wdGlvbnMgJiYgZ3JpZC5nZXRPcHRpb25zKCkgfHwge307XG5cbiAgICAgIC8vIG9ubHkgd2hlbiB1c2luZyBhdXRvQ29tbWl0RWRpdCwgd2Ugd2lsbCBtYWtlIHRoZSBjZWxsIGFjdGl2ZSAoaW4gZm9jdXMpIHdoZW4gY2xpY2tlZFxuICAgICAgLy8gc2V0dGluZyB0aGUgY2VsbCBhcyBhY3RpdmUgYXMgYSBzaWRlIGVmZmVjdCBhbmQgaWYgYXV0b0NvbW1pdEVkaXQgaXMgc2V0IHRvIGZhbHNlIHRoZW4gdGhlIEVkaXRvcnMgd29uJ3Qgc2F2ZSBjb3JyZWN0bHlcbiAgICAgIGlmIChncmlkT3B0aW9ucy5lbmFibGVDZWxsTmF2aWdhdGlvbiAmJiAoIWdyaWRPcHRpb25zLmVkaXRhYmxlIHx8IChncmlkT3B0aW9ucy5lZGl0YWJsZSAmJiBncmlkT3B0aW9ucy5hdXRvQ29tbWl0RWRpdCkpKSB7XG4gICAgICAgIGdyaWQuc2V0QWN0aXZlQ2VsbChhcmdzLnJvdywgYXJncy5jZWxsKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgdGhlIGNvbHVtbiBkZWZpbml0aW9uIGhhcyBhIG9uQ2VsbENsaWNrIHByb3BlcnR5IChhIGNhbGxiYWNrIGZ1bmN0aW9uKSwgdGhlbiBydW4gaXRcbiAgICAgIGlmICh0eXBlb2YgY29sdW1uLm9uQ2VsbENsaWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGFkZCB0byB0aGUgb3V0cHV0IGdyaWRPcHRpb25zICYgZGF0YVZpZXcgc2luY2Ugd2UnbGwgbmVlZCB0aGVtIGluc2lkZSB0aGUgQUpBWCBjb2x1bW4ub25DbGlja1xuICAgICAgICBjb25zdCByZXR1cm5lZEFyZ3M6IE9uRXZlbnRBcmdzID0ge1xuICAgICAgICAgIHJvdzogYXJncy5yb3csXG4gICAgICAgICAgY2VsbDogYXJncy5jZWxsLFxuICAgICAgICAgIGRhdGFWaWV3LFxuICAgICAgICAgIGdyaWQsXG4gICAgICAgICAgY29sdW1uRGVmOiBjb2x1bW4sXG4gICAgICAgICAgZGF0YUNvbnRleHQ6IGdyaWQuZ2V0RGF0YUl0ZW0oYXJncy5yb3cpXG4gICAgICAgIH07XG5cbiAgICAgICAgLy8gZmluYWxseSBjYWxsIHVwIHRoZSBTbGljay5jb2x1bW4ub25DZWxsQ2xpY2suLi4uIGZ1bmN0aW9uXG4gICAgICAgIGNvbHVtbi5vbkNlbGxDbGljayhlLCByZXR1cm5lZEFyZ3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZGlzcG9zZSgpIHtcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIudW5zdWJzY3JpYmVBbGwoKTtcbiAgfVxufVxuIl19