import * as tslib_1 from "tslib";
import { CaseType } from '../models/index';
import { titleCase } from './utilities';
var OdataQueryBuilderService = /** @class */ (function () {
    function OdataQueryBuilderService() {
        this._odataOptions = {
            filterQueue: [],
            orderBy: ''
        };
        this._defaultSortBy = '';
        this._columnFilters = {};
    }
    /*
      * Build the OData query string from all the options provided
      * @return string OData query
      */
    OdataQueryBuilderService.prototype.buildQuery = function () {
        if (!this._odataOptions) {
            throw new Error('Odata Service requires certain options like "top" for it to work');
        }
        this._odataOptions.filterQueue = [];
        var queryTmpArray = [];
        // When enableCount is set, add it to the OData query
        if (this._odataOptions.enableCount === true) {
            var countQuery = (this._odataOptions.version >= 4) ? '$count=true' : '$inlinecount=allpages';
            queryTmpArray.push(countQuery);
        }
        if (this._odataOptions.top) {
            queryTmpArray.push("$top=" + this._odataOptions.top);
        }
        if (this._odataOptions.skip) {
            queryTmpArray.push("$skip=" + this._odataOptions.skip);
        }
        if (this._odataOptions.orderBy) {
            var argument = '';
            if (Array.isArray(this._odataOptions.orderBy)) {
                argument = this._odataOptions.orderBy.join(','); // csv, that will form a query, for example: $orderby=RoleName asc, Id desc
            }
            else {
                argument = this._odataOptions.orderBy;
            }
            queryTmpArray.push("$orderby=" + argument);
        }
        if (this._odataOptions.filterBy || this._odataOptions.filter) {
            var filterBy = this._odataOptions.filter || this._odataOptions.filterBy;
            if (filterBy) {
                this._filterCount = 1;
                this._odataOptions.filterQueue = [];
                var filterStr = filterBy;
                if (Array.isArray(filterBy)) {
                    this._filterCount = filterBy.length;
                    filterStr = filterBy.join(" " + (this._odataOptions.filterBySeparator || 'and') + " ");
                }
                if (typeof filterStr === 'string') {
                    if (!(filterStr[0] === '(' && filterStr.slice(-1) === ')')) {
                        this.addToFilterQueueWhenNotExists("(" + filterStr + ")");
                    }
                    else {
                        this.addToFilterQueueWhenNotExists(filterStr);
                    }
                }
            }
        }
        if (this._odataOptions.filterQueue.length > 0) {
            var query = this._odataOptions.filterQueue.join(" " + (this._odataOptions.filterBySeparator || 'and') + " ");
            this._odataOptions.filter = query; // overwrite with
            queryTmpArray.push("$filter=" + query);
        }
        // join all the odata functions by a '&'
        return queryTmpArray.join('&');
    };
    OdataQueryBuilderService.prototype.getFilterCount = function () {
        return this._filterCount;
    };
    Object.defineProperty(OdataQueryBuilderService.prototype, "columnFilters", {
        get: function () {
            return this._columnFilters;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(OdataQueryBuilderService.prototype, "options", {
        get: function () {
            return this._odataOptions;
        },
        set: function (options) {
            this._odataOptions = options;
        },
        enumerable: true,
        configurable: true
    });
    OdataQueryBuilderService.prototype.removeColumnFilter = function (fieldName) {
        if (this._columnFilters && this._columnFilters.hasOwnProperty(fieldName)) {
            delete this._columnFilters[fieldName];
        }
    };
    OdataQueryBuilderService.prototype.saveColumnFilter = function (fieldName, value, searchTerms) {
        this._columnFilters[fieldName] = {
            search: searchTerms,
            value: value
        };
    };
    /**
     * Change any OData options that will be used to build the query
     * @param object options
     */
    OdataQueryBuilderService.prototype.updateOptions = function (options) {
        var e_1, _a;
        try {
            for (var _b = tslib_1.__values(Object.keys(options)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var property = _c.value;
                if (options.hasOwnProperty(property)) {
                    this._odataOptions[property] = options[property]; // replace of the property
                }
                // we need to keep the defaultSortBy for references whenever the user removes his Sorting
                // then we would revert to the defaultSortBy and the only way is to keep a hard copy here
                if (property === 'orderBy' || property === 'sortBy') {
                    var sortBy = options[property];
                    // make sure first char of each orderBy field is capitalize
                    if (this._odataOptions.caseType === CaseType.pascalCase) {
                        if (Array.isArray(sortBy)) {
                            sortBy.forEach(function (field, index, inputArray) {
                                inputArray[index] = titleCase(field);
                            });
                        }
                        else {
                            sortBy = titleCase(options[property]);
                        }
                    }
                    this._odataOptions.orderBy = sortBy;
                    this._defaultSortBy = sortBy;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    //
    // private functions
    // -------------------
    OdataQueryBuilderService.prototype.addToFilterQueueWhenNotExists = function (filterStr) {
        if (this._odataOptions.filterQueue && this._odataOptions.filterQueue.indexOf(filterStr) === -1) {
            this._odataOptions.filterQueue.push(filterStr);
        }
    };
    return OdataQueryBuilderService;
}());
export { OdataQueryBuilderService };
//# sourceMappingURL=data:application/json;base64,