export function exportWithFormatterWhenDefined(row, col, dataContext, columnDef, grid, exportOptions) {
    var output = '';
    var isEvaluatingFormatter = false;
    // first check if there are any export options provided (as Grid Options)
    if (exportOptions && exportOptions.hasOwnProperty('exportWithFormatter')) {
        isEvaluatingFormatter = !!exportOptions.exportWithFormatter;
    }
    // second check if "exportWithFormatter" is provided in the column definition, if so it will have precendence over the Grid Options exportOptions
    if (columnDef && columnDef.hasOwnProperty('exportWithFormatter')) {
        isEvaluatingFormatter = !!columnDef.exportWithFormatter;
    }
    // did the user provide a Custom Formatter for the export
    var exportCustomFormatter = (columnDef.exportCustomFormatter !== undefined) ? columnDef.exportCustomFormatter : undefined;
    // does the field have the dot (.) notation and is a complex object? if so pull the first property name
    var fieldId = columnDef.field || columnDef.id || '';
    var fieldProperty = fieldId;
    if (typeof columnDef.field === 'string' && columnDef.field.indexOf('.') > 0) {
        var props = columnDef.field.split('.');
        fieldProperty = (props.length > 0) ? props[0] : columnDef.field;
    }
    if (dataContext && dataContext.hasOwnProperty(fieldProperty) && exportCustomFormatter !== undefined) {
        var formattedData = exportCustomFormatter(row, col, dataContext[fieldProperty], columnDef, dataContext, grid);
        output = formattedData;
        if (formattedData && typeof formattedData === 'object' && formattedData.hasOwnProperty('text')) {
            output = formattedData.text;
        }
        if (output === null || output === undefined) {
            output = '';
        }
    }
    else if (isEvaluatingFormatter && dataContext.hasOwnProperty(fieldProperty) && columnDef.formatter) {
        var formattedData = columnDef.formatter(row, col, dataContext[fieldProperty], columnDef, dataContext, grid);
        output = formattedData;
        if (formattedData && typeof formattedData === 'object' && formattedData.hasOwnProperty('text')) {
            output = formattedData.text;
        }
        if (output === null || output === undefined) {
            output = '';
        }
    }
    else {
        output = (!dataContext.hasOwnProperty(fieldProperty)) ? '' : dataContext[fieldProperty];
        if (output === null || output === undefined) {
            output = '';
        }
    }
    return output;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwb3J0LXV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc2VydmljZXMvZXhwb3J0LXV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFFQSxNQUFNLFVBQVUsOEJBQThCLENBQUMsR0FBVyxFQUFFLEdBQVcsRUFBRSxXQUFnQixFQUFFLFNBQWlCLEVBQUUsSUFBUyxFQUFFLGFBQWdEO0lBQ3ZLLElBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNoQixJQUFJLHFCQUFxQixHQUFHLEtBQUssQ0FBQztJQUVsQyx5RUFBeUU7SUFDekUsSUFBSSxhQUFhLElBQUksYUFBYSxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1FBQ3hFLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxhQUFhLENBQUMsbUJBQW1CLENBQUM7S0FDN0Q7SUFFRCxpSkFBaUo7SUFDakosSUFBSSxTQUFTLElBQUksU0FBUyxDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxFQUFFO1FBQ2hFLHFCQUFxQixHQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQUM7S0FDekQ7SUFFRCx5REFBeUQ7SUFDekQsSUFBTSxxQkFBcUIsR0FBMEIsQ0FBQyxTQUFTLENBQUMscUJBQXFCLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDO0lBRW5KLHVHQUF1RztJQUN2RyxJQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsS0FBSyxJQUFJLFNBQVMsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQ3RELElBQUksYUFBYSxHQUFHLE9BQU8sQ0FBQztJQUM1QixJQUFJLE9BQU8sU0FBUyxDQUFDLEtBQUssS0FBSyxRQUFRLElBQUksU0FBUyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQzNFLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3pDLGFBQWEsR0FBRyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztLQUNqRTtJQUVELElBQUksV0FBVyxJQUFJLFdBQVcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLElBQUkscUJBQXFCLEtBQUssU0FBUyxFQUFFO1FBQ25HLElBQU0sYUFBYSxHQUFHLHFCQUFxQixDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsV0FBVyxDQUFDLGFBQWEsQ0FBQyxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEgsTUFBTSxHQUFHLGFBQXVCLENBQUM7UUFDakMsSUFBSSxhQUFhLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxJQUFJLGFBQWEsQ0FBQyxjQUFjLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDOUYsTUFBTSxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUM7U0FDN0I7UUFDRCxJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLFNBQVMsRUFBRTtZQUMzQyxNQUFNLEdBQUcsRUFBRSxDQUFDO1NBQ2I7S0FDRjtTQUFNLElBQUkscUJBQXFCLElBQUksV0FBVyxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsSUFBSSxTQUFTLENBQUMsU0FBUyxFQUFFO1FBQ3BHLElBQU0sYUFBYSxHQUFHLFNBQVMsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxXQUFXLENBQUMsYUFBYSxDQUFDLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUM5RyxNQUFNLEdBQUcsYUFBdUIsQ0FBQztRQUNqQyxJQUFJLGFBQWEsSUFBSSxPQUFPLGFBQWEsS0FBSyxRQUFRLElBQUksYUFBYSxDQUFDLGNBQWMsQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUM5RixNQUFNLEdBQUcsYUFBYSxDQUFDLElBQUksQ0FBQztTQUM3QjtRQUNELElBQUksTUFBTSxLQUFLLElBQUksSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO1lBQzNDLE1BQU0sR0FBRyxFQUFFLENBQUM7U0FDYjtLQUNGO1NBQU07UUFDTCxNQUFNLEdBQUcsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxjQUFjLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEYsSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxTQUFTLEVBQUU7WUFDM0MsTUFBTSxHQUFHLEVBQUUsQ0FBQztTQUNiO0tBQ0Y7SUFFRCxPQUFPLE1BQU0sQ0FBQztBQUNoQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uLCBFeHBvcnRPcHRpb24sIEV4Y2VsRXhwb3J0T3B0aW9uLCBGb3JtYXR0ZXIgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gZXhwb3J0V2l0aEZvcm1hdHRlcldoZW5EZWZpbmVkKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgZGF0YUNvbnRleHQ6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGdyaWQ6IGFueSwgZXhwb3J0T3B0aW9ucz86IEV4cG9ydE9wdGlvbiB8IEV4Y2VsRXhwb3J0T3B0aW9uKSB7XG4gIGxldCBvdXRwdXQgPSAnJztcbiAgbGV0IGlzRXZhbHVhdGluZ0Zvcm1hdHRlciA9IGZhbHNlO1xuXG4gIC8vIGZpcnN0IGNoZWNrIGlmIHRoZXJlIGFyZSBhbnkgZXhwb3J0IG9wdGlvbnMgcHJvdmlkZWQgKGFzIEdyaWQgT3B0aW9ucylcbiAgaWYgKGV4cG9ydE9wdGlvbnMgJiYgZXhwb3J0T3B0aW9ucy5oYXNPd25Qcm9wZXJ0eSgnZXhwb3J0V2l0aEZvcm1hdHRlcicpKSB7XG4gICAgaXNFdmFsdWF0aW5nRm9ybWF0dGVyID0gISFleHBvcnRPcHRpb25zLmV4cG9ydFdpdGhGb3JtYXR0ZXI7XG4gIH1cblxuICAvLyBzZWNvbmQgY2hlY2sgaWYgXCJleHBvcnRXaXRoRm9ybWF0dGVyXCIgaXMgcHJvdmlkZWQgaW4gdGhlIGNvbHVtbiBkZWZpbml0aW9uLCBpZiBzbyBpdCB3aWxsIGhhdmUgcHJlY2VuZGVuY2Ugb3ZlciB0aGUgR3JpZCBPcHRpb25zIGV4cG9ydE9wdGlvbnNcbiAgaWYgKGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYuaGFzT3duUHJvcGVydHkoJ2V4cG9ydFdpdGhGb3JtYXR0ZXInKSkge1xuICAgIGlzRXZhbHVhdGluZ0Zvcm1hdHRlciA9ICEhY29sdW1uRGVmLmV4cG9ydFdpdGhGb3JtYXR0ZXI7XG4gIH1cblxuICAvLyBkaWQgdGhlIHVzZXIgcHJvdmlkZSBhIEN1c3RvbSBGb3JtYXR0ZXIgZm9yIHRoZSBleHBvcnRcbiAgY29uc3QgZXhwb3J0Q3VzdG9tRm9ybWF0dGVyOiBGb3JtYXR0ZXIgfCB1bmRlZmluZWQgPSAoY29sdW1uRGVmLmV4cG9ydEN1c3RvbUZvcm1hdHRlciAhPT0gdW5kZWZpbmVkKSA/IGNvbHVtbkRlZi5leHBvcnRDdXN0b21Gb3JtYXR0ZXIgOiB1bmRlZmluZWQ7XG5cbiAgLy8gZG9lcyB0aGUgZmllbGQgaGF2ZSB0aGUgZG90ICguKSBub3RhdGlvbiBhbmQgaXMgYSBjb21wbGV4IG9iamVjdD8gaWYgc28gcHVsbCB0aGUgZmlyc3QgcHJvcGVydHkgbmFtZVxuICBjb25zdCBmaWVsZElkID0gY29sdW1uRGVmLmZpZWxkIHx8IGNvbHVtbkRlZi5pZCB8fCAnJztcbiAgbGV0IGZpZWxkUHJvcGVydHkgPSBmaWVsZElkO1xuICBpZiAodHlwZW9mIGNvbHVtbkRlZi5maWVsZCA9PT0gJ3N0cmluZycgJiYgY29sdW1uRGVmLmZpZWxkLmluZGV4T2YoJy4nKSA+IDApIHtcbiAgICBjb25zdCBwcm9wcyA9IGNvbHVtbkRlZi5maWVsZC5zcGxpdCgnLicpO1xuICAgIGZpZWxkUHJvcGVydHkgPSAocHJvcHMubGVuZ3RoID4gMCkgPyBwcm9wc1swXSA6IGNvbHVtbkRlZi5maWVsZDtcbiAgfVxuXG4gIGlmIChkYXRhQ29udGV4dCAmJiBkYXRhQ29udGV4dC5oYXNPd25Qcm9wZXJ0eShmaWVsZFByb3BlcnR5KSAmJiBleHBvcnRDdXN0b21Gb3JtYXR0ZXIgIT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBleHBvcnRDdXN0b21Gb3JtYXR0ZXIocm93LCBjb2wsIGRhdGFDb250ZXh0W2ZpZWxkUHJvcGVydHldLCBjb2x1bW5EZWYsIGRhdGFDb250ZXh0LCBncmlkKTtcbiAgICBvdXRwdXQgPSBmb3JtYXR0ZWREYXRhIGFzIHN0cmluZztcbiAgICBpZiAoZm9ybWF0dGVkRGF0YSAmJiB0eXBlb2YgZm9ybWF0dGVkRGF0YSA9PT0gJ29iamVjdCcgJiYgZm9ybWF0dGVkRGF0YS5oYXNPd25Qcm9wZXJ0eSgndGV4dCcpKSB7XG4gICAgICBvdXRwdXQgPSBmb3JtYXR0ZWREYXRhLnRleHQ7XG4gICAgfVxuICAgIGlmIChvdXRwdXQgPT09IG51bGwgfHwgb3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dCA9ICcnO1xuICAgIH1cbiAgfSBlbHNlIGlmIChpc0V2YWx1YXRpbmdGb3JtYXR0ZXIgJiYgZGF0YUNvbnRleHQuaGFzT3duUHJvcGVydHkoZmllbGRQcm9wZXJ0eSkgJiYgY29sdW1uRGVmLmZvcm1hdHRlcikge1xuICAgIGNvbnN0IGZvcm1hdHRlZERhdGEgPSBjb2x1bW5EZWYuZm9ybWF0dGVyKHJvdywgY29sLCBkYXRhQ29udGV4dFtmaWVsZFByb3BlcnR5XSwgY29sdW1uRGVmLCBkYXRhQ29udGV4dCwgZ3JpZCk7XG4gICAgb3V0cHV0ID0gZm9ybWF0dGVkRGF0YSBhcyBzdHJpbmc7XG4gICAgaWYgKGZvcm1hdHRlZERhdGEgJiYgdHlwZW9mIGZvcm1hdHRlZERhdGEgPT09ICdvYmplY3QnICYmIGZvcm1hdHRlZERhdGEuaGFzT3duUHJvcGVydHkoJ3RleHQnKSkge1xuICAgICAgb3V0cHV0ID0gZm9ybWF0dGVkRGF0YS50ZXh0O1xuICAgIH1cbiAgICBpZiAob3V0cHV0ID09PSBudWxsIHx8IG91dHB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICBvdXRwdXQgPSAnJztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgb3V0cHV0ID0gKCFkYXRhQ29udGV4dC5oYXNPd25Qcm9wZXJ0eShmaWVsZFByb3BlcnR5KSkgPyAnJyA6IGRhdGFDb250ZXh0W2ZpZWxkUHJvcGVydHldO1xuICAgIGlmIChvdXRwdXQgPT09IG51bGwgfHwgb3V0cHV0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG91dHB1dCA9ICcnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG4iXX0=