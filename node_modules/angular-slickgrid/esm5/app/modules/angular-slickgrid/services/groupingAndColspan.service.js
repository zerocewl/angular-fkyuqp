import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { ResizerService } from './resizer.service';
var GroupingAndColspanService = /** @class */ (function () {
    function GroupingAndColspanService(resizerService, translate) {
        this.resizerService = resizerService;
        this.translate = translate;
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(GroupingAndColspanService.prototype, "eventHandler", {
        /** Getter of the SlickGrid Event Handler */
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupingAndColspanService.prototype, "_gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getOptions) ? this._grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(GroupingAndColspanService.prototype, "_columnDefinitions", {
        /** Getter for the Column Definitions pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
        },
        enumerable: true,
        configurable: true
    });
    GroupingAndColspanService.prototype.init = function (grid, dataView) {
        var _this = this;
        this._grid = grid;
        if (grid && this._gridOptions) {
            // When dealing with Pre-Header Grouping colspan, we need to re-create the pre-header in multiple occasions
            // for all these events, we have to trigger a re-create
            if (this._gridOptions.createPreHeaderPanel) {
                // on all following events, call the
                this._eventHandler.subscribe(grid.onSort, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this._eventHandler.subscribe(grid.onColumnsResized, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this._eventHandler.subscribe(grid.onColumnsReordered, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this._eventHandler.subscribe(dataView.onRowCountChanged, function () { return _this.renderPreHeaderRowGroupingTitles(); });
                this.resizerService.onGridAfterResize.subscribe(function () { return _this.renderPreHeaderRowGroupingTitles(); });
                // if we use Translation, we need to re-translate the keys after a language change
                if (this._gridOptions.enableTranslate) {
                    this.translate.onLangChange.subscribe(function () {
                        var currentColumnDefinitions = _this._grid.getColumns();
                        _this.translateItems(currentColumnDefinitions, 'columnGroupKey', 'columnGroup');
                        _this._grid.setColumns(currentColumnDefinitions);
                        _this.renderPreHeaderRowGroupingTitles();
                    });
                }
                // also not sure why at this point, but it seems that I need to call the 1st create in a delayed execution
                // probably some kind of timing issues and delaying it until the grid is fully ready does help
                setTimeout(function () { return _this.renderPreHeaderRowGroupingTitles(); }, 50);
            }
        }
    };
    GroupingAndColspanService.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
    };
    /** Create or Render the Pre-Header Row Grouping Titles */
    GroupingAndColspanService.prototype.renderPreHeaderRowGroupingTitles = function () {
        if (this._gridOptions && this._gridOptions.frozenColumn !== undefined && this._gridOptions.frozenColumn >= 0) {
            // Add column groups to left panel
            var $preHeaderPanel = $(this._grid.getPreHeaderPanelLeft());
            this.renderHeaderGroups($preHeaderPanel, 0, this._gridOptions.frozenColumn + 1);
            // Add column groups to right panel
            $preHeaderPanel = $(this._grid.getPreHeaderPanelRight());
            this.renderHeaderGroups($preHeaderPanel, this._gridOptions.frozenColumn + 1, this._columnDefinitions.length);
        }
        else {
            // regular grid (not a frozen grid)
            var $preHeaderPanel = $(this._grid.getPreHeaderPanel());
            this.renderHeaderGroups($preHeaderPanel, 0, this._columnDefinitions.length);
        }
    };
    GroupingAndColspanService.prototype.renderHeaderGroups = function (preHeaderPanel, start, end) {
        preHeaderPanel.empty()
            .addClass('slick-header-columns')
            .css('left', '-1000px')
            .width(this._grid.getHeadersWidth());
        preHeaderPanel.parent().addClass('slick-header');
        var headerColumnWidthDiff = this._grid.getHeaderColumnWidthDiff();
        var colDef;
        var header;
        var lastColumnGroup = '';
        var widthTotal = 0;
        for (var i = start; i < end; i++) {
            colDef = this._columnDefinitions[i];
            if (colDef) {
                if (lastColumnGroup === colDef.columnGroup && i > 0) {
                    widthTotal += colDef.width || 0;
                    if (header && header.width) {
                        header.width(widthTotal - headerColumnWidthDiff);
                    }
                }
                else {
                    widthTotal = colDef.width || 0;
                    header = $("<div class=\"ui-state-default slick-header-column\" />")
                        .html("<span class=\"slick-column-name\">" + (colDef.columnGroup || '') + "</span>")
                        .width(widthTotal - headerColumnWidthDiff)
                        .appendTo(preHeaderPanel);
                }
                lastColumnGroup = colDef.columnGroup || '';
            }
        }
    };
    /** Translate the an array of items from an input key and assign to the output key */
    GroupingAndColspanService.prototype.translateItems = function (items, inputKey, outputKey) {
        var e_1, _a;
        if (Array.isArray(items)) {
            try {
                for (var items_1 = tslib_1.__values(items), items_1_1 = items_1.next(); !items_1_1.done; items_1_1 = items_1.next()) {
                    var item = items_1_1.value;
                    if (item[inputKey]) {
                        item[outputKey] = this.translate && this.translate && this.translate.instant && this.translate.instant(item[inputKey]);
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (items_1_1 && !items_1_1.done && (_a = items_1.return)) _a.call(items_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
    };
    GroupingAndColspanService = tslib_1.__decorate([
        Injectable(),
        tslib_1.__param(1, Optional()),
        tslib_1.__metadata("design:paramtypes", [ResizerService, TranslateService])
    ], GroupingAndColspanService);
    return GroupingAndColspanService;
}());
export { GroupingAndColspanService };
//# sourceMappingURL=data:application/json;base64,