import { Subject } from 'rxjs';
var SharedService = /** @class */ (function () {
    function SharedService() {
        this.onColumnsChanged = new Subject();
    }
    Object.defineProperty(SharedService.prototype, "allColumns", {
        // --
        // public
        /** Getter for All Columns  in the grid (hidden/visible) */
        get: function () {
            return this._allColumns;
        },
        /** Setter for All Columns  in the grid (hidden/visible) */
        set: function (allColumns) {
            this._allColumns = allColumns;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "columnDefinitions", {
        /** Getter for the Column Definitions pulled through the Grid Object */
        get: function () {
            return (this._grid && this._grid.getColumns) ? this._grid.getColumns() : [];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "currentPagination", {
        /** Getter for the Current Pagination (when Pagination is enabled) */
        get: function () {
            return this._currentPagination;
        },
        /** Setter for the Current Pagination (when Pagination is enabled) */
        set: function (currentPagination) {
            this._currentPagination = currentPagination;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "dataView", {
        /** Getter for SlickGrid DataView object */
        get: function () {
            return this._dataView;
        },
        /** Setter for SlickGrid DataView object */
        set: function (dataView) {
            this._dataView = dataView;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "grid", {
        /** Getter for SlickGrid Grid object */
        get: function () {
            return this._grid;
        },
        /** Setter for SlickGrid Grid object */
        set: function (grid) {
            this._grid = grid;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return this._gridOptions || this._grid && this._grid.getOptions && this._grid.getOptions() || {};
        },
        /** Setter for the Grid Options pulled through the Grid Object */
        set: function (gridOptions) {
            this._gridOptions = gridOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "groupItemMetadataProvider", {
        /** Getter for the Grid Options */
        get: function () {
            return this._groupItemMetadataProvider;
        },
        /** Setter for the Grid Options */
        set: function (groupItemMetadataProvider) {
            this._groupItemMetadataProvider = groupItemMetadataProvider;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SharedService.prototype, "visibleColumns", {
        /** Getter for the Visible Columns in the grid */
        get: function () {
            return this._visibleColumns;
        },
        /** Setter for the Visible Columns in the grid */
        set: function (visibleColumns) {
            this._visibleColumns = visibleColumns;
        },
        enumerable: true,
        configurable: true
    });
    return SharedService;
}());
export { SharedService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2hhcmVkLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL3NlcnZpY2VzL3NoYXJlZC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFJL0I7SUFBQTtRQVFFLHFCQUFnQixHQUFHLElBQUksT0FBTyxFQUFZLENBQUM7SUEwRTdDLENBQUM7SUFwRUMsc0JBQUkscUNBQVU7UUFKZCxLQUFLO1FBQ0wsU0FBUztRQUVULDJEQUEyRDthQUMzRDtZQUNFLE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQztRQUMxQixDQUFDO1FBQ0QsMkRBQTJEO2FBQzNELFVBQWUsVUFBb0I7WUFDakMsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUM7UUFDaEMsQ0FBQzs7O09BSkE7SUFPRCxzQkFBSSw0Q0FBaUI7UUFEckIsdUVBQXVFO2FBQ3ZFO1lBQ0UsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQzlFLENBQUM7OztPQUFBO0lBR0Qsc0JBQUksNENBQWlCO1FBRHJCLHFFQUFxRTthQUNyRTtZQUNFLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDO1FBQ2pDLENBQUM7UUFFRCxxRUFBcUU7YUFDckUsVUFBc0IsaUJBQW9DO1lBQ3hELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztRQUM5QyxDQUFDOzs7T0FMQTtJQVFELHNCQUFJLG1DQUFRO1FBRFosMkNBQTJDO2FBQzNDO1lBQ0UsT0FBTyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQ3hCLENBQUM7UUFDRCwyQ0FBMkM7YUFDM0MsVUFBYSxRQUFhO1lBQ3hCLElBQUksQ0FBQyxTQUFTLEdBQUcsUUFBUSxDQUFDO1FBQzVCLENBQUM7OztPQUpBO0lBT0Qsc0JBQUksK0JBQUk7UUFEUix1Q0FBdUM7YUFDdkM7WUFDRSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7UUFDcEIsQ0FBQztRQUNELHVDQUF1QzthQUN2QyxVQUFTLElBQVM7WUFDaEIsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDcEIsQ0FBQzs7O09BSkE7SUFPRCxzQkFBSSxzQ0FBVztRQURmLGlFQUFpRTthQUNqRTtZQUNFLE9BQU8sSUFBSSxDQUFDLFlBQVksSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsVUFBVSxFQUFFLElBQUksRUFBRSxDQUFDO1FBQ25HLENBQUM7UUFFRCxpRUFBaUU7YUFDakUsVUFBZ0IsV0FBdUI7WUFDckMsSUFBSSxDQUFDLFlBQVksR0FBRyxXQUFXLENBQUM7UUFDbEMsQ0FBQzs7O09BTEE7SUFRRCxzQkFBSSxvREFBeUI7UUFEN0Isa0NBQWtDO2FBQ2xDO1lBQ0UsT0FBTyxJQUFJLENBQUMsMEJBQTBCLENBQUM7UUFDekMsQ0FBQztRQUNELGtDQUFrQzthQUNsQyxVQUE4Qix5QkFBOEI7WUFDMUQsSUFBSSxDQUFDLDBCQUEwQixHQUFHLHlCQUF5QixDQUFDO1FBQzlELENBQUM7OztPQUpBO0lBT0Qsc0JBQUkseUNBQWM7UUFEbEIsaURBQWlEO2FBQ2pEO1lBQ0UsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO1FBQzlCLENBQUM7UUFDRCxpREFBaUQ7YUFDakQsVUFBbUIsY0FBd0I7WUFDekMsSUFBSSxDQUFDLGVBQWUsR0FBRyxjQUFjLENBQUM7UUFDeEMsQ0FBQzs7O09BSkE7SUFLSCxvQkFBQztBQUFELENBQUMsQUFsRkQsSUFrRkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XHJcblxyXG5pbXBvcnQgeyBDb2x1bW4sIEN1cnJlbnRQYWdpbmF0aW9uLCBHcmlkT3B0aW9uIH0gZnJvbSAnLi4vbW9kZWxzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTaGFyZWRTZXJ2aWNlIHtcclxuICBwcml2YXRlIF9hbGxDb2x1bW5zOiBDb2x1bW5bXTtcclxuICBwcml2YXRlIF9kYXRhVmlldzogYW55O1xyXG4gIHByaXZhdGUgX2dyb3VwSXRlbU1ldGFkYXRhUHJvdmlkZXI6IGFueTtcclxuICBwcml2YXRlIF9ncmlkOiBhbnk7XHJcbiAgcHJpdmF0ZSBfZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb247XHJcbiAgcHJpdmF0ZSBfY3VycmVudFBhZ2luYXRpb246IEN1cnJlbnRQYWdpbmF0aW9uO1xyXG4gIHByaXZhdGUgX3Zpc2libGVDb2x1bW5zOiBDb2x1bW5bXTtcclxuICBvbkNvbHVtbnNDaGFuZ2VkID0gbmV3IFN1YmplY3Q8Q29sdW1uW10+KCk7XHJcblxyXG4gIC8vIC0tXHJcbiAgLy8gcHVibGljXHJcblxyXG4gIC8qKiBHZXR0ZXIgZm9yIEFsbCBDb2x1bW5zICBpbiB0aGUgZ3JpZCAoaGlkZGVuL3Zpc2libGUpICovXHJcbiAgZ2V0IGFsbENvbHVtbnMoKTogQ29sdW1uW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2FsbENvbHVtbnM7XHJcbiAgfVxyXG4gIC8qKiBTZXR0ZXIgZm9yIEFsbCBDb2x1bW5zICBpbiB0aGUgZ3JpZCAoaGlkZGVuL3Zpc2libGUpICovXHJcbiAgc2V0IGFsbENvbHVtbnMoYWxsQ29sdW1uczogQ29sdW1uW10pIHtcclxuICAgIHRoaXMuX2FsbENvbHVtbnMgPSBhbGxDb2x1bW5zO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldHRlciBmb3IgdGhlIENvbHVtbiBEZWZpbml0aW9ucyBwdWxsZWQgdGhyb3VnaCB0aGUgR3JpZCBPYmplY3QgKi9cclxuICBnZXQgY29sdW1uRGVmaW5pdGlvbnMoKTogQ29sdW1uW10ge1xyXG4gICAgcmV0dXJuICh0aGlzLl9ncmlkICYmIHRoaXMuX2dyaWQuZ2V0Q29sdW1ucykgPyB0aGlzLl9ncmlkLmdldENvbHVtbnMoKSA6IFtdO1xyXG4gIH1cclxuXHJcbiAgLyoqIEdldHRlciBmb3IgdGhlIEN1cnJlbnQgUGFnaW5hdGlvbiAod2hlbiBQYWdpbmF0aW9uIGlzIGVuYWJsZWQpICovXHJcbiAgZ2V0IGN1cnJlbnRQYWdpbmF0aW9uKCk6IEN1cnJlbnRQYWdpbmF0aW9uIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLl9jdXJyZW50UGFnaW5hdGlvbjtcclxuICB9XHJcblxyXG4gIC8qKiBTZXR0ZXIgZm9yIHRoZSBDdXJyZW50IFBhZ2luYXRpb24gKHdoZW4gUGFnaW5hdGlvbiBpcyBlbmFibGVkKSAqL1xyXG4gIHNldCBjdXJyZW50UGFnaW5hdGlvbihjdXJyZW50UGFnaW5hdGlvbjogQ3VycmVudFBhZ2luYXRpb24pIHtcclxuICAgIHRoaXMuX2N1cnJlbnRQYWdpbmF0aW9uID0gY3VycmVudFBhZ2luYXRpb247XHJcbiAgfVxyXG5cclxuICAvKiogR2V0dGVyIGZvciBTbGlja0dyaWQgRGF0YVZpZXcgb2JqZWN0ICovXHJcbiAgZ2V0IGRhdGFWaWV3KCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGF0YVZpZXc7XHJcbiAgfVxyXG4gIC8qKiBTZXR0ZXIgZm9yIFNsaWNrR3JpZCBEYXRhVmlldyBvYmplY3QgKi9cclxuICBzZXQgZGF0YVZpZXcoZGF0YVZpZXc6IGFueSkge1xyXG4gICAgdGhpcy5fZGF0YVZpZXcgPSBkYXRhVmlldztcclxuICB9XHJcblxyXG4gIC8qKiBHZXR0ZXIgZm9yIFNsaWNrR3JpZCBHcmlkIG9iamVjdCAqL1xyXG4gIGdldCBncmlkKCk6IGFueSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZ3JpZDtcclxuICB9XHJcbiAgLyoqIFNldHRlciBmb3IgU2xpY2tHcmlkIEdyaWQgb2JqZWN0ICovXHJcbiAgc2V0IGdyaWQoZ3JpZDogYW55KSB7XHJcbiAgICB0aGlzLl9ncmlkID0gZ3JpZDtcclxuICB9XHJcblxyXG4gIC8qKiBHZXR0ZXIgZm9yIHRoZSBHcmlkIE9wdGlvbnMgcHVsbGVkIHRocm91Z2ggdGhlIEdyaWQgT2JqZWN0ICovXHJcbiAgZ2V0IGdyaWRPcHRpb25zKCk6IEdyaWRPcHRpb24ge1xyXG4gICAgcmV0dXJuIHRoaXMuX2dyaWRPcHRpb25zIHx8IHRoaXMuX2dyaWQgJiYgdGhpcy5fZ3JpZC5nZXRPcHRpb25zICYmIHRoaXMuX2dyaWQuZ2V0T3B0aW9ucygpIHx8IHt9O1xyXG4gIH1cclxuXHJcbiAgLyoqIFNldHRlciBmb3IgdGhlIEdyaWQgT3B0aW9ucyBwdWxsZWQgdGhyb3VnaCB0aGUgR3JpZCBPYmplY3QgKi9cclxuICBzZXQgZ3JpZE9wdGlvbnMoZ3JpZE9wdGlvbnM6IEdyaWRPcHRpb24pIHtcclxuICAgIHRoaXMuX2dyaWRPcHRpb25zID0gZ3JpZE9wdGlvbnM7XHJcbiAgfVxyXG5cclxuICAvKiogR2V0dGVyIGZvciB0aGUgR3JpZCBPcHRpb25zICovXHJcbiAgZ2V0IGdyb3VwSXRlbU1ldGFkYXRhUHJvdmlkZXIoKTogYW55IHtcclxuICAgIHJldHVybiB0aGlzLl9ncm91cEl0ZW1NZXRhZGF0YVByb3ZpZGVyO1xyXG4gIH1cclxuICAvKiogU2V0dGVyIGZvciB0aGUgR3JpZCBPcHRpb25zICovXHJcbiAgc2V0IGdyb3VwSXRlbU1ldGFkYXRhUHJvdmlkZXIoZ3JvdXBJdGVtTWV0YWRhdGFQcm92aWRlcjogYW55KSB7XHJcbiAgICB0aGlzLl9ncm91cEl0ZW1NZXRhZGF0YVByb3ZpZGVyID0gZ3JvdXBJdGVtTWV0YWRhdGFQcm92aWRlcjtcclxuICB9XHJcblxyXG4gIC8qKiBHZXR0ZXIgZm9yIHRoZSBWaXNpYmxlIENvbHVtbnMgaW4gdGhlIGdyaWQgKi9cclxuICBnZXQgdmlzaWJsZUNvbHVtbnMoKTogQ29sdW1uW10ge1xyXG4gICAgcmV0dXJuIHRoaXMuX3Zpc2libGVDb2x1bW5zO1xyXG4gIH1cclxuICAvKiogU2V0dGVyIGZvciB0aGUgVmlzaWJsZSBDb2x1bW5zIGluIHRoZSBncmlkICovXHJcbiAgc2V0IHZpc2libGVDb2x1bW5zKHZpc2libGVDb2x1bW5zOiBDb2x1bW5bXSkge1xyXG4gICAgdGhpcy5fdmlzaWJsZUNvbHVtbnMgPSB2aXNpYmxlQ29sdW1ucztcclxuICB9XHJcbn1cclxuIl19