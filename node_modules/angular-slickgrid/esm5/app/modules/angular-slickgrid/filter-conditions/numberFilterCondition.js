import { OperatorType } from '../models/index';
import { testFilterCondition } from './filterUtilities';
export var numberFilterCondition = function (options) {
    var cellValue = parseFloat(options.cellValue);
    var searchTerms = Array.isArray(options.searchTerms) && options.searchTerms || [0];
    var isRangeSearch = false;
    var searchValue1;
    var searchValue2;
    if (searchTerms.length === 2 || (typeof searchTerms[0] === 'string' && searchTerms[0].indexOf('..') > 0)) {
        isRangeSearch = true;
        var searchValues = (searchTerms.length === 2) ? searchTerms : searchTerms[0].split('..');
        searchValue1 = parseFloat(Array.isArray(searchValues) && searchValues[0] + '');
        searchValue2 = parseFloat(Array.isArray(searchValues) && searchValues[1] + '');
    }
    else {
        searchValue1 = parseFloat(searchTerms[0] + '');
    }
    if (!searchValue1 && !options.operator) {
        return true;
    }
    if (isRangeSearch) {
        var isInclusive = options.operator && options.operator === OperatorType.rangeInclusive;
        var resultCondition1 = testFilterCondition((isInclusive ? '>=' : '>'), cellValue, searchValue1);
        var resultCondition2 = testFilterCondition((isInclusive ? '<=' : '<'), cellValue, searchValue2);
        return (resultCondition1 && resultCondition2);
    }
    return testFilterCondition(options.operator || '==', cellValue, searchValue1);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyRmlsdGVyQ29uZGl0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9maWx0ZXItY29uZGl0aW9ucy9udW1iZXJGaWx0ZXJDb25kaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEwQyxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsSUFBTSxxQkFBcUIsR0FBb0IsVUFBQyxPQUE4QjtJQUNuRixJQUFNLFNBQVMsR0FBRyxVQUFVLENBQUMsT0FBTyxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ2hELElBQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFdBQVcsQ0FBQyxJQUFJLE9BQU8sQ0FBQyxXQUFXLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVyRixJQUFJLGFBQWEsR0FBRyxLQUFLLENBQUM7SUFDMUIsSUFBSSxZQUFZLENBQUM7SUFDakIsSUFBSSxZQUFZLENBQUM7SUFFakIsSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sV0FBVyxDQUFDLENBQUMsQ0FBQyxLQUFLLFFBQVEsSUFBSyxXQUFXLENBQUMsQ0FBQyxDQUFZLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ3BILGFBQWEsR0FBRyxJQUFJLENBQUM7UUFDckIsSUFBTSxZQUFZLEdBQUcsQ0FBQyxXQUFXLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFFLFdBQVcsQ0FBQyxDQUFDLENBQVksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDdkcsWUFBWSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUMvRSxZQUFZLEdBQUcsVUFBVSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLElBQUksWUFBWSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDO0tBQ2hGO1NBQU07UUFDTCxZQUFZLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUNoRDtJQUVELElBQUksQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsUUFBUSxFQUFFO1FBQ3RDLE9BQU8sSUFBSSxDQUFDO0tBQ2I7SUFFRCxJQUFJLGFBQWEsRUFBRTtRQUNqQixJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsUUFBUSxJQUFJLE9BQU8sQ0FBQyxRQUFRLEtBQUssWUFBWSxDQUFDLGNBQWMsQ0FBQztRQUN6RixJQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNsRyxJQUFNLGdCQUFnQixHQUFHLG1CQUFtQixDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztRQUNsRyxPQUFPLENBQUMsZ0JBQWdCLElBQUksZ0JBQWdCLENBQUMsQ0FBQztLQUMvQztJQUNELE9BQU8sbUJBQW1CLENBQUMsT0FBTyxDQUFDLFFBQVEsSUFBSSxJQUFJLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxDQUFDO0FBQ2hGLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZpbHRlckNvbmRpdGlvbiwgRmlsdGVyQ29uZGl0aW9uT3B0aW9uLCBPcGVyYXRvclR5cGUgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyB0ZXN0RmlsdGVyQ29uZGl0aW9uIH0gZnJvbSAnLi9maWx0ZXJVdGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IG51bWJlckZpbHRlckNvbmRpdGlvbjogRmlsdGVyQ29uZGl0aW9uID0gKG9wdGlvbnM6IEZpbHRlckNvbmRpdGlvbk9wdGlvbikgPT4ge1xyXG4gIGNvbnN0IGNlbGxWYWx1ZSA9IHBhcnNlRmxvYXQob3B0aW9ucy5jZWxsVmFsdWUpO1xyXG4gIGNvbnN0IHNlYXJjaFRlcm1zID0gQXJyYXkuaXNBcnJheShvcHRpb25zLnNlYXJjaFRlcm1zKSAmJiBvcHRpb25zLnNlYXJjaFRlcm1zIHx8IFswXTtcclxuXHJcbiAgbGV0IGlzUmFuZ2VTZWFyY2ggPSBmYWxzZTtcclxuICBsZXQgc2VhcmNoVmFsdWUxO1xyXG4gIGxldCBzZWFyY2hWYWx1ZTI7XHJcblxyXG4gIGlmIChzZWFyY2hUZXJtcy5sZW5ndGggPT09IDIgfHwgKHR5cGVvZiBzZWFyY2hUZXJtc1swXSA9PT0gJ3N0cmluZycgJiYgKHNlYXJjaFRlcm1zWzBdIGFzIHN0cmluZykuaW5kZXhPZignLi4nKSA+IDApKSB7XHJcbiAgICBpc1JhbmdlU2VhcmNoID0gdHJ1ZTtcclxuICAgIGNvbnN0IHNlYXJjaFZhbHVlcyA9IChzZWFyY2hUZXJtcy5sZW5ndGggPT09IDIpID8gc2VhcmNoVGVybXMgOiAoc2VhcmNoVGVybXNbMF0gYXMgc3RyaW5nKS5zcGxpdCgnLi4nKTtcclxuICAgIHNlYXJjaFZhbHVlMSA9IHBhcnNlRmxvYXQoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZXMpICYmIHNlYXJjaFZhbHVlc1swXSArICcnKTtcclxuICAgIHNlYXJjaFZhbHVlMiA9IHBhcnNlRmxvYXQoQXJyYXkuaXNBcnJheShzZWFyY2hWYWx1ZXMpICYmIHNlYXJjaFZhbHVlc1sxXSArICcnKTtcclxuICB9IGVsc2Uge1xyXG4gICAgc2VhcmNoVmFsdWUxID0gcGFyc2VGbG9hdChzZWFyY2hUZXJtc1swXSArICcnKTtcclxuICB9XHJcblxyXG4gIGlmICghc2VhcmNoVmFsdWUxICYmICFvcHRpb25zLm9wZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGlmIChpc1JhbmdlU2VhcmNoKSB7XHJcbiAgICBjb25zdCBpc0luY2x1c2l2ZSA9IG9wdGlvbnMub3BlcmF0b3IgJiYgb3B0aW9ucy5vcGVyYXRvciA9PT0gT3BlcmF0b3JUeXBlLnJhbmdlSW5jbHVzaXZlO1xyXG4gICAgY29uc3QgcmVzdWx0Q29uZGl0aW9uMSA9IHRlc3RGaWx0ZXJDb25kaXRpb24oKGlzSW5jbHVzaXZlID8gJz49JyA6ICc+JyksIGNlbGxWYWx1ZSwgc2VhcmNoVmFsdWUxKTtcclxuICAgIGNvbnN0IHJlc3VsdENvbmRpdGlvbjIgPSB0ZXN0RmlsdGVyQ29uZGl0aW9uKChpc0luY2x1c2l2ZSA/ICc8PScgOiAnPCcpLCBjZWxsVmFsdWUsIHNlYXJjaFZhbHVlMik7XHJcbiAgICByZXR1cm4gKHJlc3VsdENvbmRpdGlvbjEgJiYgcmVzdWx0Q29uZGl0aW9uMik7XHJcbiAgfVxyXG4gIHJldHVybiB0ZXN0RmlsdGVyQ29uZGl0aW9uKG9wdGlvbnMub3BlcmF0b3IgfHwgJz09JywgY2VsbFZhbHVlLCBzZWFyY2hWYWx1ZTEpO1xyXG59O1xyXG4iXX0=