/**
 * Compare 2 objects,
 * we will loop through all properties of the object to compare the entire content of both objects
 * Optionally we can compare by a property key, when that is provided we will compare the object content
 * @param o1
 * @param o2
 * @param compareKey optional
 * @return boolean are objects equals?
 */
export function compareObjects(o1, o2, compareKey) {
    // if user provided an object compare key then compare directly both objects by that key
    if (compareKey && (o1.hasOwnProperty(compareKey) || o2.hasOwnProperty(compareKey))) {
        return o1[compareKey] === o2 || o1 === o2[compareKey] || o1[compareKey] === o2[compareKey];
    }
    // loop through all object properties to compare the full content of the object
    // we'll return false as soon as a difference is detected
    for (var p in o1) {
        if (o1.hasOwnProperty(p)) {
            if (o1[p] !== o2[p]) {
                return false;
            }
        }
    }
    return true;
}
export var testFilterCondition = function (operator, value1, value2) {
    switch (operator) {
        case '<':
        case 'LT': return (value1 < value2);
        case '<=':
        case 'LE': return (value1 <= value2);
        case '>':
        case 'GT': return (value1 > value2);
        case '>=':
        case 'GE': return (value1 >= value2);
        case '!=':
        case '<>':
        case 'NE': return (value1 !== value2);
        case '=':
        case '==':
        case 'EQ': return (value1 === value2);
        case 'IN': return ((value2 && value2.indexOf) ? (value2.indexOf(value1) > -1) : false);
        case 'NIN':
        case 'NOT_IN':
            return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);
        case 'IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return ((value2.findIndex(function (val) { return value1.indexOf(val) > -1; })) > -1);
            }
            return false;
        case 'NIN_CONTAINS':
        case 'NOT_IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return !((value2.findIndex(function (val) { return value1.indexOf(val) > -1; })) > -1);
            }
            return false;
    }
    return true;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9maWx0ZXItY29uZGl0aW9ucy9maWx0ZXJVdGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLEVBQU8sRUFBRSxFQUFPLEVBQUUsVUFBbUI7SUFDbEUsd0ZBQXdGO0lBQ3hGLElBQUksVUFBVSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDbEYsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM1RjtJQUVELCtFQUErRTtJQUMvRSx5REFBeUQ7SUFDekQsS0FBSyxJQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbEIsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3hCLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLENBQUMsSUFBTSxtQkFBbUIsR0FBRyxVQUFDLFFBQXdCLEVBQUUsTUFBVyxFQUFFLE1BQVc7SUFDcEYsUUFBUSxRQUFRLEVBQUU7UUFDaEIsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDcEMsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUM7UUFDckMsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFDcEMsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLElBQUksTUFBTSxDQUFDLENBQUM7UUFDckMsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQztRQUN0QyxLQUFLLEdBQUcsQ0FBQztRQUNULEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZGLEtBQUssS0FBSyxDQUFDO1FBQ1gsS0FBSyxRQUFRO1lBQ1gsT0FBTyxDQUFDLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDNUUsS0FBSyxhQUFhO1lBQ2hCLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxVQUFDLEdBQUcsSUFBSyxPQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQXhCLENBQXdCLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckU7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLEtBQUssY0FBYyxDQUFDO1FBQ3BCLEtBQUssaUJBQWlCO1lBQ3BCLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFVBQUMsR0FBRyxJQUFLLE9BQUEsTUFBTSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBeEIsQ0FBd0IsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0RTtZQUNELE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDZCxDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPcGVyYXRvclN0cmluZyB9IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcblxyXG4vKipcclxuICogQ29tcGFyZSAyIG9iamVjdHMsXHJcbiAqIHdlIHdpbGwgbG9vcCB0aHJvdWdoIGFsbCBwcm9wZXJ0aWVzIG9mIHRoZSBvYmplY3QgdG8gY29tcGFyZSB0aGUgZW50aXJlIGNvbnRlbnQgb2YgYm90aCBvYmplY3RzXHJcbiAqIE9wdGlvbmFsbHkgd2UgY2FuIGNvbXBhcmUgYnkgYSBwcm9wZXJ0eSBrZXksIHdoZW4gdGhhdCBpcyBwcm92aWRlZCB3ZSB3aWxsIGNvbXBhcmUgdGhlIG9iamVjdCBjb250ZW50XHJcbiAqIEBwYXJhbSBvMVxyXG4gKiBAcGFyYW0gbzJcclxuICogQHBhcmFtIGNvbXBhcmVLZXkgb3B0aW9uYWxcclxuICogQHJldHVybiBib29sZWFuIGFyZSBvYmplY3RzIGVxdWFscz9cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjb21wYXJlT2JqZWN0cyhvMTogYW55LCBvMjogYW55LCBjb21wYXJlS2V5Pzogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgLy8gaWYgdXNlciBwcm92aWRlZCBhbiBvYmplY3QgY29tcGFyZSBrZXkgdGhlbiBjb21wYXJlIGRpcmVjdGx5IGJvdGggb2JqZWN0cyBieSB0aGF0IGtleVxyXG4gIGlmIChjb21wYXJlS2V5ICYmIChvMS5oYXNPd25Qcm9wZXJ0eShjb21wYXJlS2V5KSB8fCBvMi5oYXNPd25Qcm9wZXJ0eShjb21wYXJlS2V5KSkpIHtcclxuICAgIHJldHVybiBvMVtjb21wYXJlS2V5XSA9PT0gbzIgfHwgbzEgPT09IG8yW2NvbXBhcmVLZXldIHx8IG8xW2NvbXBhcmVLZXldID09PSBvMltjb21wYXJlS2V5XTtcclxuICB9XHJcblxyXG4gIC8vIGxvb3AgdGhyb3VnaCBhbGwgb2JqZWN0IHByb3BlcnRpZXMgdG8gY29tcGFyZSB0aGUgZnVsbCBjb250ZW50IG9mIHRoZSBvYmplY3RcclxuICAvLyB3ZSdsbCByZXR1cm4gZmFsc2UgYXMgc29vbiBhcyBhIGRpZmZlcmVuY2UgaXMgZGV0ZWN0ZWRcclxuICBmb3IgKGNvbnN0IHAgaW4gbzEpIHtcclxuICAgIGlmIChvMS5oYXNPd25Qcm9wZXJ0eShwKSkge1xyXG4gICAgICBpZiAobzFbcF0gIT09IG8yW3BdKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcblxyXG5leHBvcnQgY29uc3QgdGVzdEZpbHRlckNvbmRpdGlvbiA9IChvcGVyYXRvcjogT3BlcmF0b3JTdHJpbmcsIHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSk6IGJvb2xlYW4gPT4ge1xyXG4gIHN3aXRjaCAob3BlcmF0b3IpIHtcclxuICAgIGNhc2UgJzwnOlxyXG4gICAgY2FzZSAnTFQnOiByZXR1cm4gKHZhbHVlMSA8IHZhbHVlMik7XHJcbiAgICBjYXNlICc8PSc6XHJcbiAgICBjYXNlICdMRSc6IHJldHVybiAodmFsdWUxIDw9IHZhbHVlMik7XHJcbiAgICBjYXNlICc+JzpcclxuICAgIGNhc2UgJ0dUJzogcmV0dXJuICh2YWx1ZTEgPiB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnPj0nOlxyXG4gICAgY2FzZSAnR0UnOiByZXR1cm4gKHZhbHVlMSA+PSB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnIT0nOlxyXG4gICAgY2FzZSAnPD4nOlxyXG4gICAgY2FzZSAnTkUnOiByZXR1cm4gKHZhbHVlMSAhPT0gdmFsdWUyKTtcclxuICAgIGNhc2UgJz0nOlxyXG4gICAgY2FzZSAnPT0nOlxyXG4gICAgY2FzZSAnRVEnOiByZXR1cm4gKHZhbHVlMSA9PT0gdmFsdWUyKTtcclxuICAgIGNhc2UgJ0lOJzogcmV0dXJuICgodmFsdWUyICYmIHZhbHVlMi5pbmRleE9mKSA/ICh2YWx1ZTIuaW5kZXhPZih2YWx1ZTEpID4gLTEpIDogZmFsc2UpO1xyXG4gICAgY2FzZSAnTklOJzpcclxuICAgIGNhc2UgJ05PVF9JTic6XHJcbiAgICAgIHJldHVybiAoKHZhbHVlMiAmJiB2YWx1ZTIuaW5jbHVkZXMpID8gKCF2YWx1ZTIuaW5jbHVkZXModmFsdWUxKSkgOiBmYWxzZSk7XHJcbiAgICBjYXNlICdJTl9DT05UQUlOUyc6XHJcbiAgICAgIGlmICh2YWx1ZTIgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZTIpICYmIHZhbHVlMi5maW5kSW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gKCh2YWx1ZTIuZmluZEluZGV4KCh2YWwpID0+IHZhbHVlMS5pbmRleE9mKHZhbCkgPiAtMSkpID4gLTEpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIGNhc2UgJ05JTl9DT05UQUlOUyc6XHJcbiAgICBjYXNlICdOT1RfSU5fQ09OVEFJTlMnOlxyXG4gICAgICBpZiAodmFsdWUyICYmIEFycmF5LmlzQXJyYXkodmFsdWUyKSAmJiB2YWx1ZTIuZmluZEluZGV4KSB7XHJcbiAgICAgICAgcmV0dXJuICEoKHZhbHVlMi5maW5kSW5kZXgoKHZhbCkgPT4gdmFsdWUxLmluZGV4T2YodmFsKSA+IC0xKSkgPiAtMSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxuICByZXR1cm4gdHJ1ZTtcclxufTtcclxuIl19