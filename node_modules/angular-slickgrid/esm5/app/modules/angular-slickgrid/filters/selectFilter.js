import * as tslib_1 from "tslib";
import { Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import * as DOMPurify_ from 'dompurify';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
import { OperatorType, } from './../models/index';
import { Constants } from './../constants';
import { CollectionService } from './../services/collection.service';
import { castToPromise, getDescendantProperty, htmlEncode, unsubscribeAllObservables } from '../services/utilities';
var SelectFilter = /** @class */ (function () {
    /**
     * Initialize the Filter
     */
    function SelectFilter(translate, collectionService, isMultipleSelect) {
        if (isMultipleSelect === void 0) { isMultipleSelect = true; }
        this.translate = translate;
        this.collectionService = collectionService;
        this._isMultipleSelect = true;
        this._shouldTriggerQuery = true;
        this.isFilled = false;
        this.enableTranslateLabel = false;
        this.subscriptions = [];
        this._isMultipleSelect = isMultipleSelect;
    }
    Object.defineProperty(SelectFilter.prototype, "columnFilter", {
        /** Getter for the Column Filter itself */
        get: function () {
            return this.columnDef && this.columnDef.filter;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectFilter.prototype, "collectionOptions", {
        /** Getter for the Collection Options */
        get: function () {
            return this.columnDef && this.columnDef.filter && this.columnDef.filter.collectionOptions;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectFilter.prototype, "customStructure", {
        /** Getter for the Custom Structure if exist */
        get: function () {
            return this.columnDef && this.columnDef.filter && this.columnDef.filter.customStructure;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectFilter.prototype, "gridOptions", {
        /** Getter for the Grid Options pulled through the Grid Object */
        get: function () {
            return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectFilter.prototype, "defaultOperator", {
        /** Getter to know what would be the default operator when none is specified */
        get: function () {
            return this.isMultipleSelect ? OperatorType.in : OperatorType.equal;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectFilter.prototype, "isMultipleSelect", {
        /** Getter to know if the current filter is a multiple-select (false means it's a single select) */
        get: function () {
            return this._isMultipleSelect;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SelectFilter.prototype, "operator", {
        /** Getter for the filter operator */
        get: function () {
            return this.columnFilter && this.columnFilter.operator || this.defaultOperator;
        },
        /** Setter for the filter operator */
        set: function (operator) {
            if (this.columnFilter) {
                this.columnFilter.operator = operator;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Initialize the filter template
     */
    SelectFilter.prototype.init = function (args, isFilterFirstRender) {
        if (!args) {
            throw new Error('[Angular-SlickGrid] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        if (!this.grid || !this.columnDef || !this.columnFilter || (!this.columnFilter.collection && !this.columnFilter.collectionAsync)) {
            throw new Error("[Angular-SlickGrid] You need to pass a \"collection\" (or \"collectionAsync\") for the MultipleSelect/SingleSelect Filter to work correctly. Also each option should include a value/label pair (or value/labelKey when using Locale). For example:: { filter: model: Filters.multipleSelect, collection: [{ value: true, label: 'True' }, { value: false, label: 'False'}] }");
        }
        this.enableTranslateLabel = this.columnFilter.enableTranslateLabel;
        this.labelName = this.customStructure && this.customStructure.label || 'label';
        this.labelPrefixName = this.customStructure && this.customStructure.labelPrefix || 'labelPrefix';
        this.labelSuffixName = this.customStructure && this.customStructure.labelSuffix || 'labelSuffix';
        this.optionLabel = this.customStructure && this.customStructure.optionLabel || 'value';
        this.valueName = this.customStructure && this.customStructure.value || 'value';
        if (this.enableTranslateLabel && !this.gridOptions.enableTranslate && (!this.translate || typeof this.translate.instant !== 'function')) {
            throw new Error("[select-filter] The ngx-translate TranslateService is required for the Select Filter to work correctly when \"enableTranslateLabel\" is set.");
        }
        // get locales provided by user in forRoot or else use default English locales via the Constants
        this._locales = this.gridOptions && this.gridOptions.locales || Constants.locales;
        // create the multiple select element
        this.initMultipleSelect();
        // add placeholder when found
        var placeholder = this.gridOptions && this.gridOptions.defaultFilterPlaceholder || '';
        if (this.columnFilter && this.columnFilter.placeholder) {
            placeholder = this.columnFilter.placeholder;
        }
        this.defaultOptions.placeholder = placeholder || '';
        // always render the Select (dropdown) DOM element, even if user passed a "collectionAsync",
        // if that is the case, the Select will simply be without any options but we still have to render it (else SlickGrid would throw an error)
        var newCollection = this.columnFilter.collection || [];
        this.renderDomElement(newCollection);
        // on every Filter which have a "collection" or a "collectionAsync"
        // we will add (or replace) a Subject to the "collectionAsync" property so that user has possibility to change the collection
        // if "collectionAsync" is already set by the user, it will resolve it first then after it will replace it with a Subject
        var collectionAsync = this.columnFilter && this.columnFilter.collectionAsync;
        if (collectionAsync) {
            return this.renderOptionsAsync(collectionAsync); // create Subject after resolve (createCollectionAsyncSubject)
        }
        else {
            return new Promise(function (resolve) { return resolve(true); });
        }
    };
    /**
     * Clear the filter values
     */
    SelectFilter.prototype.clear = function (shouldTriggerQuery) {
        if (shouldTriggerQuery === void 0) { shouldTriggerQuery = true; }
        if (this.$filterElm && this.$filterElm.multipleSelect) {
            // reload the filter element by it's id, to make sure it's still a valid element (because of some issue in the GraphQL example)
            this.$filterElm.multipleSelect('setSelects', []);
            this.$filterElm.removeClass('filled');
            this.$filterElm.siblings('div .search-filter').removeClass('filled');
            this.searchTerms = [];
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.callback(undefined, { columnDef: this.columnDef, clearFilterTriggered: true, shouldTriggerQuery: this._shouldTriggerQuery });
            // reset both flags for next use
            this._shouldTriggerQuery = true;
        }
    };
    /**
     * destroy the filter
     */
    SelectFilter.prototype.destroy = function () {
        if (this.$filterElm) {
            // remove event watcher
            this.$filterElm.off().remove();
            var elementClassName = this.elementName.toString().replace('.', '\\.'); // make sure to escape any dot "." from CSS class to avoid console error
            $("[name=" + elementClassName + "].ms-drop").remove();
        }
        // also dispose of all Subscriptions
        this.subscriptions = unsubscribeAllObservables(this.subscriptions);
    };
    /**
     * Get selected values retrieved from the multiple-selected element
     * @params selected items
     */
    SelectFilter.prototype.getValues = function () {
        if (this.$filterElm && typeof this.$filterElm.multipleSelect === 'function') {
            return this.$filterElm.multipleSelect('getSelects');
        }
        return [];
    };
    /** Set value(s) on the DOM element */
    SelectFilter.prototype.setValues = function (values, operator) {
        if (values && this.$filterElm && typeof this.$filterElm.multipleSelect === 'function') {
            values = Array.isArray(values) ? values : [values];
            this.$filterElm.multipleSelect('setSelects', values);
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    };
    //
    // protected functions
    // ------------------
    /**
     * user might want to filter certain items of the collection
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    SelectFilter.prototype.filterCollection = function (inputCollection) {
        var outputCollection = inputCollection;
        // user might want to filter certain items of the collection
        if (this.columnDef && this.columnFilter && this.columnFilter.collectionFilterBy) {
            var filterBy = this.columnFilter.collectionFilterBy;
            var filterCollectionBy = this.columnFilter.collectionOptions && this.columnFilter.collectionOptions.filterResultAfterEachPass || null;
            outputCollection = this.collectionService.filterCollection(outputCollection, filterBy, filterCollectionBy);
        }
        return outputCollection;
    };
    /**
     * user might want to sort the collection in a certain way
     * @param inputCollection
     * @return outputCollection filtered and/or sorted collection
     */
    SelectFilter.prototype.sortCollection = function (inputCollection) {
        var outputCollection = inputCollection;
        // user might want to sort the collection
        if (this.columnDef && this.columnFilter && this.columnFilter.collectionSortBy) {
            var sortBy = this.columnFilter.collectionSortBy;
            outputCollection = this.collectionService.sortCollection(this.columnDef, outputCollection, sortBy, this.enableTranslateLabel);
        }
        return outputCollection;
    };
    SelectFilter.prototype.renderOptionsAsync = function (collectionAsync) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var awaitedCollection;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        awaitedCollection = [];
                        if (!collectionAsync) return [3 /*break*/, 2];
                        return [4 /*yield*/, castToPromise(collectionAsync)];
                    case 1:
                        awaitedCollection = _a.sent();
                        this.renderDomElementFromCollectionAsync(awaitedCollection);
                        // because we accept Promises & HttpClient Observable only execute once
                        // we will re-create an RxJs Subject which will replace the "collectionAsync" which got executed once anyway
                        // doing this provide the user a way to call a "collectionAsync.next()"
                        this.createCollectionAsyncSubject();
                        _a.label = 2;
                    case 2: return [2 /*return*/, true];
                }
            });
        });
    };
    /** Create or recreate an Observable Subject and reassign it to the "collectionAsync" object so user can call a "collectionAsync.next()" on it */
    SelectFilter.prototype.createCollectionAsyncSubject = function () {
        var _this = this;
        var newCollectionAsync = new Subject();
        this.columnFilter.collectionAsync = newCollectionAsync;
        this.subscriptions.push(newCollectionAsync.subscribe(function (collection) { return _this.renderDomElementFromCollectionAsync(collection); }));
    };
    /**
     * When user use a CollectionAsync we will use the returned collection to render the filter DOM element
     * and reinitialize filter collection with this new collection
     */
    SelectFilter.prototype.renderDomElementFromCollectionAsync = function (collection) {
        if (this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {
            var collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;
            collection = getDescendantProperty(collection, collectionInsideObjectProperty);
        }
        if (!Array.isArray(collection)) {
            throw new Error('Something went wrong while trying to pull the collection from the "collectionAsync" call in the Select Filter, the collection is not a valid array.');
        }
        // copy over the array received from the async call to the "collection" as the new collection to use
        // this has to be BEFORE the `collectionObserver().subscribe` to avoid going into an infinite loop
        this.columnFilter.collection = collection;
        // recreate Multiple Select after getting async collection
        this.renderDomElement(collection);
    };
    SelectFilter.prototype.renderDomElement = function (collection) {
        if (!Array.isArray(collection) && this.collectionOptions && (this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty)) {
            var collectionInsideObjectProperty = this.collectionOptions.collectionInsideObjectProperty || this.collectionOptions.collectionInObjectProperty;
            collection = getDescendantProperty(collection, collectionInsideObjectProperty);
        }
        if (!Array.isArray(collection)) {
            throw new Error('The "collection" passed to the Select Filter is not a valid array.');
        }
        // make sure however that it wasn't added more than once
        if (this.collectionOptions && this.collectionOptions.addBlankEntry && Array.isArray(collection) && collection.length > 0 && collection[0][this.labelName] !== '') {
            collection.unshift(this.createBlankEntry());
        }
        var newCollection = collection;
        // user might want to filter and/or sort certain items of the collection
        newCollection = this.filterCollection(newCollection);
        newCollection = this.sortCollection(newCollection);
        // step 1, create HTML string template
        var filterTemplate = this.buildTemplateHtmlString(newCollection, this.searchTerms);
        // step 2, create the DOM Element of the filter & pre-load search terms
        // also subscribe to the onClose event
        this.createDomElement(filterTemplate);
    };
    /** Create the HTML template as a string */
    SelectFilter.prototype.buildTemplateHtmlString = function (optionCollection, searchTerms) {
        var _this = this;
        var options = '';
        var columnId = this.columnDef && this.columnDef.id;
        var separatorBetweenLabels = this.collectionOptions && this.collectionOptions.separatorBetweenTextLabels || '';
        var isEnableTranslate = this.gridOptions && this.gridOptions.enableTranslate;
        var isRenderHtmlEnabled = this.columnFilter && this.columnFilter.enableRenderHtml || false;
        var sanitizedOptions = this.gridOptions && this.gridOptions.sanitizeHtmlOptions || {};
        // collection could be an Array of Strings OR Objects
        if (Array.isArray(optionCollection)) {
            if (optionCollection.every(function (x) { return typeof x === 'string'; })) {
                optionCollection.forEach(function (option) {
                    var selected = (searchTerms.findIndex(function (term) { return term === option; }) >= 0) ? 'selected' : '';
                    options += "<option value=\"" + option + "\" label=\"" + option + "\" " + selected + ">" + option + "</option>";
                    // if there's at least 1 search term found, we will add the "filled" class for styling purposes
                    // on a single select, we'll also make sure the single value is not an empty string to consider this being filled
                    if ((selected && _this.isMultipleSelect) || (selected && !_this.isMultipleSelect && option !== '')) {
                        _this.isFilled = true;
                    }
                });
            }
            else {
                // array of objects will require a label/value pair unless a customStructure is passed
                optionCollection.forEach(function (option) {
                    if (!option || (option[_this.labelName] === undefined && option.labelKey === undefined)) {
                        throw new Error("[select-filter] A collection with value/label (or value/labelKey when using Locale) is required to populate the Select list, for example:: { filter: model: Filters.multipleSelect, collection: [ { value: '1', label: 'One' } ]')");
                    }
                    var labelKey = (option.labelKey || option[_this.labelName]);
                    var selected = (searchTerms.findIndex(function (term) { return term === option[_this.valueName]; }) >= 0) ? 'selected' : '';
                    var labelText = ((option.labelKey || _this.enableTranslateLabel) && labelKey && isEnableTranslate) ? _this.translate && _this.translate.currentLang && _this.translate.instant(labelKey || ' ') : labelKey;
                    var prefixText = option[_this.labelPrefixName] || '';
                    var suffixText = option[_this.labelSuffixName] || '';
                    var optionLabel = option.hasOwnProperty(_this.optionLabel) ? option[_this.optionLabel] : '';
                    optionLabel = optionLabel.toString().replace(/\"/g, '\''); // replace double quotes by single quotes to avoid interfering with regular html
                    // also translate prefix/suffix if enableTranslateLabel is true and text is a string
                    prefixText = (_this.enableTranslateLabel && isEnableTranslate && prefixText && typeof prefixText === 'string') ? _this.translate && _this.translate.currentLang && _this.translate.instant(prefixText || ' ') : prefixText;
                    suffixText = (_this.enableTranslateLabel && isEnableTranslate && suffixText && typeof suffixText === 'string') ? _this.translate && _this.translate.currentLang && _this.translate.instant(suffixText || ' ') : suffixText;
                    optionLabel = (_this.enableTranslateLabel && isEnableTranslate && optionLabel && typeof optionLabel === 'string') ? _this.translate && _this.translate.currentLang && _this.translate.instant(optionLabel || ' ') : optionLabel;
                    // add to a temp array for joining purpose and filter out empty text
                    var tmpOptionArray = [prefixText, (typeof labelText === 'string' || typeof labelText === 'number') ? labelText.toString() : labelText, suffixText].filter(function (text) { return text; });
                    var optionText = tmpOptionArray.join(separatorBetweenLabels);
                    // if user specifically wants to render html text, he needs to opt-in else it will stripped out by default
                    // also, the 3rd party lib will saninitze any html code unless it's encoded, so we'll do that
                    if (isRenderHtmlEnabled) {
                        // sanitize any unauthorized html tags like script and others
                        // for the remaining allowed tags we'll permit all attributes
                        var sanitizedText = (DOMPurify.sanitize(optionText, sanitizedOptions) || '').toString();
                        optionText = htmlEncode(sanitizedText);
                    }
                    // html text of each select option
                    options += "<option value=\"" + option[_this.valueName] + "\" label=\"" + optionLabel + "\" " + selected + ">" + optionText + "</option>";
                    // if there's at least 1 search term found, we will add the "filled" class for styling purposes
                    // on a single select, we'll also make sure the single value is not an empty string to consider this being filled
                    if ((selected && _this.isMultipleSelect) || (selected && !_this.isMultipleSelect && option[_this.valueName] !== '')) {
                        _this.isFilled = true;
                    }
                });
            }
        }
        return "<select class=\"ms-filter search-filter filter-" + columnId + "\" " + (this.isMultipleSelect ? 'multiple="multiple"' : '') + ">" + options + "</select>";
    };
    /** Create a blank entry that can be added to the collection. It will also reuse the same customStructure if need be */
    SelectFilter.prototype.createBlankEntry = function () {
        var _a;
        var blankEntry = (_a = {},
            _a[this.labelName] = '',
            _a[this.valueName] = '',
            _a);
        if (this.labelPrefixName) {
            blankEntry[this.labelPrefixName] = '';
        }
        if (this.labelSuffixName) {
            blankEntry[this.labelSuffixName] = '';
        }
        return blankEntry;
    };
    /**
     * From the html template string, create a DOM element
     * Subscribe to the onClose event and run the callback when that happens
     * @param filterTemplate
     */
    SelectFilter.prototype.createDomElement = function (filterTemplate) {
        var fieldId = this.columnDef && this.columnDef.id;
        // provide the name attribute to the DOM element which will be needed to auto-adjust drop position (dropup / dropdown)
        this.elementName = "filter-" + fieldId;
        this.defaultOptions.name = this.elementName;
        var $headerElm = this.grid.getHeaderRowColumn(fieldId);
        $($headerElm).empty();
        // create the DOM element & add an ID and filter class
        this.$filterElm = $(filterTemplate);
        if (typeof this.$filterElm.multipleSelect !== 'function') {
            throw new Error("multiple-select.js was not found, make sure to modify your \"angular-cli.json\" file and include \"../node_modules/angular-slickgrid/lib/multiple-select/multiple-select.js\" and it's css or SASS file");
        }
        this.$filterElm.attr('name', this.elementName);
        this.$filterElm.data('columnId', fieldId);
        // if there's a search term, we will add the "filled" class for styling purposes
        if (this.isFilled) {
            this.$filterElm.addClass('filled');
        }
        // append the new DOM element to the header row
        if (this.$filterElm && typeof this.$filterElm.appendTo === 'function') {
            this.$filterElm.appendTo($headerElm);
        }
        // merge options & attach multiSelect
        var filterOptions = tslib_1.__assign({}, this.defaultOptions, this.columnFilter.filterOptions);
        this.filterElmOptions = tslib_1.__assign({}, this.defaultOptions, filterOptions);
        this.$filterElm = this.$filterElm.multipleSelect(this.filterElmOptions);
    };
    /** Initialize the Multiple Select element and its options to use */
    SelectFilter.prototype.initMultipleSelect = function () {
        var _this = this;
        // default options used by this Filter, user can overwrite any of these by passing "otions"
        var options = {
            autoAdjustDropHeight: true,
            autoAdjustDropPosition: true,
            autoAdjustDropWidthByTextSize: true,
            container: 'body',
            filter: false,
            maxHeight: 275,
            single: true,
            textTemplate: function ($elm) {
                // are we rendering HTML code? by default it is sanitized and won't be rendered
                var isRenderHtmlEnabled = _this.columnDef && _this.columnDef.filter && _this.columnDef.filter.enableRenderHtml || false;
                return isRenderHtmlEnabled ? $elm.text() : $elm.html();
            },
            onClose: function () {
                // we will subscribe to the onClose event for triggering our callback
                // also add/remove "filled" class for styling purposes
                _this.onTriggerEvent(undefined);
            }
        };
        if (this.isMultipleSelect) {
            options.single = false;
            options.okButton = true;
            options.addTitle = true; // show tooltip of all selected items while hovering the filter
            options.countSelected = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant('X_OF_Y_SELECTED') || this._locales && this._locales.TEXT_X_OF_Y_SELECTED;
            options.allSelected = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant('ALL_SELECTED') || this._locales && this._locales.TEXT_ALL_SELECTED;
            options.okButtonText = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant('OK') || this._locales && this._locales.TEXT_OK;
            options.selectAllText = this.translate && this.translate.currentLang && this.translate.instant && this.translate.instant('SELECT_ALL') || this._locales && this._locales.TEXT_SELECT_ALL;
            options.selectAllDelimiter = ['', '']; // remove default square brackets of default text "[Select All]" => "Select All"
        }
        this.defaultOptions = options;
    };
    SelectFilter.prototype.onTriggerEvent = function (e) {
        var selectedItems = this.getValues();
        if (Array.isArray(selectedItems) && selectedItems.length > 1 || (selectedItems.length === 1 && selectedItems[0] !== '')) {
            this.isFilled = true;
            this.$filterElm.addClass('filled').siblings('div .search-filter').addClass('filled');
        }
        else {
            this.isFilled = false;
            this.$filterElm.removeClass('filled');
            this.$filterElm.siblings('div .search-filter').removeClass('filled');
        }
        this.searchTerms = selectedItems;
        this.callback(undefined, { columnDef: this.columnDef, operator: this.operator, searchTerms: selectedItems, shouldTriggerQuery: this._shouldTriggerQuery });
        // reset flag for next use
        this._shouldTriggerQuery = true;
    };
    SelectFilter = tslib_1.__decorate([
        tslib_1.__param(0, Optional()),
        tslib_1.__metadata("design:paramtypes", [TranslateService, CollectionService, Object])
    ], SelectFilter);
    return SelectFilter;
}());
export { SelectFilter };
//# sourceMappingURL=data:application/json;base64,