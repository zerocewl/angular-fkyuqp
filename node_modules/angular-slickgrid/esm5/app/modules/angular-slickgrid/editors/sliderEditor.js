import { Constants } from '../constants';
import { getDescendantProperty, setDeepValue } from '../services/utilities';
var DEFAULT_MIN_VALUE = 0;
var DEFAULT_MAX_VALUE = 100;
var DEFAULT_STEP = 1;
var SliderEditor = /** @class */ (function () {
    function SliderEditor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.init();
    }
    Object.defineProperty(SliderEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this._$input;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.grid && this.grid.getOptions && this.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderEditor.prototype, "editorParams", {
        /** Getter for the Editor Generic Params */
        get: function () {
            return this.columnEditor.params || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SliderEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return this.columnEditor.validator || this.columnDef.validator;
        },
        enumerable: true,
        configurable: true
    });
    SliderEditor.prototype.init = function () {
        var _this = this;
        var container = this.args && this.args.container;
        // define the input & slider number IDs
        var itemId = this.args && this.args.item && this.args.item.id;
        this._elementRangeInputId = "rangeInput_" + this.columnDef.field + "_" + itemId;
        this._elementRangeOutputId = "rangeOutput_" + this.columnDef.field + "_" + itemId;
        // create HTML string template
        var editorTemplate = this.buildTemplateHtmlString();
        this._$editorElm = $(editorTemplate);
        this._$input = this._$editorElm.children('input');
        this.$sliderNumber = this._$editorElm.children('div.input-group-addon.input-group-append').children();
        this.focus();
        // watch on change event
        this._$editorElm
            .appendTo(container)
            .on('mouseup', function () { return _this.save(); });
        // if user chose to display the slider number on the right side, then update it every time it changes
        // we need to use both "input" and "change" event to be all cross-browser
        if (!this.editorParams.hideSliderNumber) {
            this._$editorElm.on('input change', function (event) {
                var value = event && event.target && event.target.value || '';
                if (value) {
                    var elements = document.getElementsByClassName(_this._elementRangeOutputId);
                    if (elements.length) {
                        elements[0].innerHTML = event.target.value;
                    }
                }
            });
        }
    };
    SliderEditor.prototype.cancel = function () {
        this._$input.val(this.originalValue);
        this.args.cancelChanges();
    };
    SliderEditor.prototype.destroy = function () {
        this._$editorElm.off('input change mouseup').remove();
    };
    SliderEditor.prototype.focus = function () {
        this._$editorElm.focus();
    };
    SliderEditor.prototype.getValue = function () {
        return this._$input.val() || '';
    };
    SliderEditor.prototype.setValue = function (value) {
        this._$input.val(value);
    };
    SliderEditor.prototype.applyValue = function (item, state) {
        var fieldName = this.columnDef && this.columnDef.field;
        var isComplexObject = fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
        var validation = this.validate(state);
        var newValue = (validation && validation.valid) ? state : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            setDeepValue(item, fieldName, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    };
    SliderEditor.prototype.isValueChanged = function () {
        var elmValue = this._$input.val();
        return (!(elmValue === '' && this.originalValue === undefined)) && (+elmValue !== this.originalValue);
    };
    SliderEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        // is the field a complex object, "address.streetNumber"
        var isComplexObject = fieldName.indexOf('.') > 0;
        if (item && this.columnDef && (item.hasOwnProperty(fieldName) || isComplexObject)) {
            var value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            if (value === '' || value === null || value === undefined) {
                value = this.defaultValue; // load default value when item doesn't have any value
            }
            this.originalValue = +value;
            this._$input.val(value);
            this.$sliderNumber.html(value);
        }
    };
    SliderEditor.prototype.save = function () {
        var validation = this.validate();
        if (validation && validation.valid && this.isValueChanged()) {
            if (this.hasAutoCommitEdit) {
                this.args.grid.getEditorLock().commitCurrentEdit();
            }
            else {
                this.args.commitChanges();
            }
        }
    };
    SliderEditor.prototype.serializeValue = function () {
        var elmValue = this._$input.val();
        return elmValue !== '' ? parseInt(elmValue, 10) : this.originalValue;
    };
    SliderEditor.prototype.validate = function (inputValue) {
        var elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val && this._$input.val();
        var isRequired = this.columnEditor.required;
        var minValue = this.columnEditor.minValue;
        var maxValue = this.columnEditor.maxValue;
        var errorMsg = this.columnEditor.errorMessage;
        var mapValidation = {
            '{{minValue}}': minValue,
            '{{maxValue}}': maxValue
        };
        if (this.validator) {
            return this.validator(elmValue, this.args);
        }
        else if (isRequired && elmValue === '') {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        else if (minValue !== undefined && maxValue !== undefined && elmValue !== null && (elmValue < minValue || elmValue > maxValue)) {
            // when decimal value is bigger than 0, we only accept the decimal values as that value set
            // for example if we set decimalPlaces to 2, we will only accept numbers between 0 and 2 decimals
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_EDITOR_NUMBER_BETWEEN.replace(/{{minValue}}|{{maxValue}}/gi, function (matched) {
                    return mapValidation[matched];
                })
            };
        }
        return {
            valid: true,
            msg: null
        };
    };
    //
    // private functions
    // ------------------
    /**
     * Create the HTML template as a string
     */
    SliderEditor.prototype.buildTemplateHtmlString = function () {
        var fieldId = this.columnDef && this.columnDef.id;
        var title = this.columnEditor && this.columnEditor.title || '';
        var minValue = this.columnEditor.hasOwnProperty('minValue') ? this.columnEditor.minValue : DEFAULT_MIN_VALUE;
        var maxValue = this.columnEditor.hasOwnProperty('maxValue') ? this.columnEditor.maxValue : DEFAULT_MAX_VALUE;
        var defaultValue = this.editorParams.hasOwnProperty('sliderStartValue') ? this.editorParams.sliderStartValue : minValue;
        var step = this.columnEditor.hasOwnProperty('valueStep') ? this.columnEditor.valueStep : DEFAULT_STEP;
        this.defaultValue = defaultValue;
        if (this.editorParams.hideSliderNumber) {
            return "\n      <div class=\"slider-container slider-editor\">\n        <input type=\"range\" name=\"" + this._elementRangeInputId + "\" title=\"" + title + "\"\n          defaultValue=\"" + defaultValue + "\" value=\"" + defaultValue + "\"\n          min=\"" + minValue + "\" max=\"" + maxValue + "\" step=\"" + step + "\"\n          class=\"form-control slider-editor-input editor-" + fieldId + " range " + this._elementRangeInputId + "\" />\n      </div>";
        }
        return "\n      <div class=\"input-group slider-container slider-editor\">\n        <input type=\"range\" name=\"" + this._elementRangeInputId + "\" title=\"" + title + "\"\n          defaultValue=\"" + defaultValue + "\" value=\"" + defaultValue + "\"\n          min=\"" + minValue + "\" max=\"" + maxValue + "\" step=\"" + step + "\"\n          class=\"form-control slider-editor-input editor-" + fieldId + " range " + this._elementRangeInputId + "\" />\n        <div class=\"input-group-addon input-group-append slider-value\"><span class=\"input-group-text " + this._elementRangeOutputId + "\">" + defaultValue + "</span></div>\n      </div>";
    };
    return SliderEditor;
}());
export { SliderEditor };
//# sourceMappingURL=data:application/json;base64,