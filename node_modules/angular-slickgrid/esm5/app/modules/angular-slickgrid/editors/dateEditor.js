import * as tslib_1 from "tslib";
import { TranslateService } from '@ngx-translate/core';
import { Constants } from './../constants';
import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType, setDeepValue, getDescendantProperty } from './../services/utilities';
import { FieldType, } from './../models/index';
import * as moment_ from 'moment-mini';
var moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
require('flatpickr');
/*
 * An example of a date picker editor using Flatpickr
 * https://chmln.github.io/flatpickr
 */
var DateEditor = /** @class */ (function () {
    function DateEditor(args) {
        this.args = args;
        if (!args) {
            throw new Error('[Angular-SlickGrid] Something is wrong with this grid, an Editor must always have valid arguments.');
        }
        this.grid = args.grid;
        this.gridOptions = (args.grid && args.grid.getOptions() || {});
        var options = this.gridOptions || this.args.column.params || {};
        if (options && options.i18n instanceof TranslateService) {
            this._translate = options.i18n;
        }
        this.init();
    }
    Object.defineProperty(DateEditor.prototype, "columnDef", {
        /** Get Column Definition object */
        get: function () {
            return this.args && this.args.column;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "columnEditor", {
        /** Get Column Editor object */
        get: function () {
            return this.columnDef && this.columnDef.internalColumnEditor || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "editorDomElement", {
        /** Get the Editor DOM Element */
        get: function () {
            return this._$input;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "editorOptions", {
        /** Get Flatpickr options passed to the editor by the user */
        get: function () {
            return this.columnEditor.editorOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "hasAutoCommitEdit", {
        get: function () {
            return this.grid.getOptions().autoCommitEdit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(DateEditor.prototype, "validator", {
        /** Get the Validator function, can be passed in Editor property or Column Definition */
        get: function () {
            return this.columnEditor.validator || this.columnDef.validator;
        },
        enumerable: true,
        configurable: true
    });
    DateEditor.prototype.init = function () {
        var _this = this;
        if (this.args && this.columnDef) {
            var columnId = this.columnDef && this.columnDef.id;
            var placeholder = this.columnEditor && this.columnEditor.placeholder || '';
            var title = this.columnEditor && this.columnEditor.title || '';
            this.defaultDate = (this.args.item) ? this.args.item[this.columnDef.field] : null;
            var inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);
            var outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || FieldType.dateUtc);
            var currentLocale = this._translate && this._translate.currentLang || this.gridOptions.locale || 'en';
            if (currentLocale && currentLocale.length > 2) {
                currentLocale = currentLocale.substring(0, 2);
            }
            var pickerOptions = {
                defaultDate: this.defaultDate,
                altInput: true,
                altFormat: inputFormat,
                dateFormat: outputFormat,
                closeOnSelect: false,
                locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',
                onChange: function (selectedDates, dateStr, instance) {
                    _this.save();
                },
            };
            // merge options with optional user's custom options
            var pickerMergedOptions = tslib_1.__assign({}, pickerOptions, this.editorOptions);
            var inputCssClasses = ".editor-text.editor-" + columnId + ".flatpickr";
            if (pickerMergedOptions.altInput) {
                pickerMergedOptions.altInputClass = 'flatpickr-alt-input editor-text';
            }
            this._$input = $("<input type=\"text\" data-defaultDate=\"" + this.defaultDate + "\" class=\"" + inputCssClasses.replace(/\./g, ' ') + "\" placeholder=\"" + placeholder + "\" title=\"" + title + "\" />");
            this._$input.appendTo(this.args.container);
            this.flatInstance = (this._$input[0] && typeof this._$input[0].flatpickr === 'function') ? this._$input[0].flatpickr(pickerMergedOptions) : null;
            // when we're using an alternate input to display data, we'll consider this input as the one to do the focus later on
            // else just use the top one
            this._$inputWithData = (pickerMergedOptions && pickerMergedOptions.altInput) ? $(inputCssClasses + ".flatpickr-alt-input") : this._$input;
        }
    };
    DateEditor.prototype.destroy = function () {
        this.hide();
        this._$input.remove();
        if (this._$inputWithData && typeof this._$inputWithData.remove === 'function') {
            this._$inputWithData.remove();
        }
        if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {
            this.flatInstance.destroy();
        }
    };
    DateEditor.prototype.focus = function () {
        this._$input.focus();
        if (this._$inputWithData && typeof this._$inputWithData.focus === 'function') {
            this._$inputWithData.focus().select();
        }
    };
    DateEditor.prototype.hide = function () {
        if (this.flatInstance && typeof this.flatInstance.close === 'function') {
            this.flatInstance.close();
        }
    };
    DateEditor.prototype.show = function () {
        if (this.flatInstance && typeof this.flatInstance.open === 'function') {
            this.flatInstance.open();
        }
    };
    DateEditor.prototype.getValue = function () {
        return this._$input.val();
    };
    DateEditor.prototype.setValue = function (val) {
        this.flatInstance.setDate(val);
    };
    DateEditor.prototype.applyValue = function (item, state) {
        var fieldName = this.columnDef && this.columnDef.field;
        var outputFormat = mapMomentDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);
        var isComplexObject = fieldName.indexOf('.') > 0; // is the field a complex object, "address.streetNumber"
        // validate the value before applying it (if not valid we'll set an empty string)
        var validation = this.validate(state);
        var newValue = (validation && validation.valid) ? moment(state, outputFormat).toDate() : '';
        // set the new value to the item datacontext
        if (isComplexObject) {
            setDeepValue(item, fieldName, newValue);
        }
        else {
            item[fieldName] = newValue;
        }
    };
    DateEditor.prototype.isValueChanged = function () {
        var elmValue = this._$input.val();
        var outputFormat = mapMomentDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);
        var elmDateStr = elmValue ? moment(elmValue).format(outputFormat) : '';
        var orgDateStr = this.originalDate ? moment(this.originalDate).format(outputFormat) : '';
        return (!(elmDateStr === '' && orgDateStr === '')) && (elmDateStr !== orgDateStr);
    };
    DateEditor.prototype.loadValue = function (item) {
        var fieldName = this.columnDef && this.columnDef.field;
        // is the field a complex object, "address.streetNumber"
        var isComplexObject = fieldName.indexOf('.') > 0;
        if (item && this.columnDef && (item.hasOwnProperty(fieldName) || isComplexObject)) {
            var value = (isComplexObject) ? getDescendantProperty(item, fieldName) : item[fieldName];
            this.originalDate = value;
            this.flatInstance.setDate(value);
            this.show();
            this.focus();
        }
    };
    DateEditor.prototype.save = function () {
        // autocommit will not focus the next editor
        var validation = this.validate();
        if (validation && validation.valid && this.isValueChanged()) {
            if (this.hasAutoCommitEdit) {
                this.grid.getEditorLock().commitCurrentEdit();
            }
            else {
                this.args.commitChanges();
            }
        }
    };
    DateEditor.prototype.serializeValue = function () {
        var domValue = this._$input.val();
        if (!domValue) {
            return '';
        }
        var outputFormat = mapMomentDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);
        var value = moment(domValue).format(outputFormat);
        return value;
    };
    DateEditor.prototype.validate = function (inputValue) {
        var isRequired = this.columnEditor.required;
        var elmValue = (inputValue !== undefined) ? inputValue : this._$input && this._$input.val && this._$input.val();
        var errorMsg = this.columnEditor.errorMessage;
        if (this.validator) {
            return this.validator(elmValue, this.args);
        }
        // by default the editor is almost always valid (except when it's required but not provided)
        if (isRequired && elmValue === '') {
            return {
                valid: false,
                msg: errorMsg || Constants.VALIDATION_REQUIRED_FIELD
            };
        }
        return {
            valid: true,
            msg: null
        };
    };
    //
    // private functions
    // ------------------
    /** Load a different set of locales for Flatpickr to be localized */
    DateEditor.prototype.loadFlatpickrLocale = function (language) {
        var locales = 'en';
        if (language !== 'en') {
            // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/
            var localeDefault = require("flatpickr/dist/l10n/" + language + ".js").default;
            locales = (localeDefault && localeDefault[language]) ? localeDefault[language] : 'en';
        }
        return locales;
    };
    return DateEditor;
}());
export { DateEditor };
//# sourceMappingURL=data:application/json;base64,