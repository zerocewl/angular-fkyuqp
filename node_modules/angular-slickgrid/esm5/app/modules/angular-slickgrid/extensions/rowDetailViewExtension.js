import * as tslib_1 from "tslib";
import { ApplicationRef, Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import * as DOMPurify_ from 'dompurify';
var DOMPurify = DOMPurify_; // patch to fix rollup to work
import { ExtensionName } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { AngularUtilService } from '../services/angularUtil.service';
import { FilterService } from '../services/filter.service';
import { SharedService } from '../services/shared.service';
import { addToArrayWhenNotExists, castToPromise, unsubscribeAllObservables } from '../services/utilities';
var ROW_DETAIL_CONTAINER_PREFIX = 'container_';
var PRELOAD_CONTAINER_PREFIX = 'container_loading';
var RowDetailViewExtension = /** @class */ (function () {
    function RowDetailViewExtension(angularUtilService, appRef, extensionUtility, filterService, sharedService) {
        this.angularUtilService = angularUtilService;
        this.appRef = appRef;
        this.extensionUtility = extensionUtility;
        this.filterService = filterService;
        this.sharedService = sharedService;
        this._views = [];
        this._subscriptions = [];
        this._eventHandler = new Slick.EventHandler();
    }
    Object.defineProperty(RowDetailViewExtension.prototype, "datasetIdPropName", {
        get: function () {
            return this.gridOptions.datasetIdPropertyName || 'id';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowDetailViewExtension.prototype, "eventHandler", {
        get: function () {
            return this._eventHandler;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowDetailViewExtension.prototype, "gridOptions", {
        get: function () {
            return this.sharedService && this.sharedService.gridOptions || {};
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RowDetailViewExtension.prototype, "rowDetailViewOptions", {
        get: function () {
            return this.gridOptions.rowDetailView;
        },
        enumerable: true,
        configurable: true
    });
    /** Dispose of the RowDetailView Extension */
    RowDetailViewExtension.prototype.dispose = function () {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
        // also unsubscribe all RxJS subscriptions
        this._subscriptions = unsubscribeAllObservables(this._subscriptions);
        this.disposeAllViewComponents();
    };
    /** Dispose of all the opened Row Detail Panels Angular View Components */
    RowDetailViewExtension.prototype.disposeAllViewComponents = function () {
        var _this = this;
        this._views.forEach(function (compRef) { return _this.disposeViewComponent(compRef); });
        this._views = [];
    };
    /**
     * Create the plugin before the Grid creation, else it will behave oddly.
     * Mostly because the column definitions might change after the grid creation
     */
    RowDetailViewExtension.prototype.create = function (columnDefinitions, gridOptions) {
        var _this = this;
        if (columnDefinitions && gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.rowDetailView);
            if (!gridOptions.rowDetailView) {
                throw new Error('The Row Detail View requires options to be passed via the "rowDetailView" property of the Grid Options');
            }
            if (gridOptions && gridOptions.rowDetailView) {
                if (!this._addon) {
                    if (typeof gridOptions.rowDetailView.process === 'function') {
                        // we need to keep the user "process" method and replace it with our own execution method
                        // we do this because when we get the item detail, we need to call "onAsyncResponse.notify" for the plugin to work
                        this._userProcessFn = gridOptions.rowDetailView.process; // keep user's process method
                        gridOptions.rowDetailView.process = function (item) { return _this.onProcessing(item); }; // replace process method & run our internal one
                    }
                    else {
                        throw new Error('You need to provide a "process" function for the Row Detail Extension to work properly');
                    }
                    // load the Preload & RowDetail Templates (could be straight HTML or Angular View/ViewModel)
                    // when those are Angular View/ViewModel, we need to create View Component & provide the html containers to the Plugin (preTemplate/postTemplate methods)
                    if (!gridOptions.rowDetailView.preTemplate) {
                        this._preloadComponent = gridOptions && gridOptions.rowDetailView && gridOptions.rowDetailView.preloadComponent;
                        gridOptions.rowDetailView.preTemplate = function () { return DOMPurify.sanitize("<div class=\"" + PRELOAD_CONTAINER_PREFIX + "\"></div>"); };
                    }
                    if (!gridOptions.rowDetailView.postTemplate) {
                        this._viewComponent = gridOptions && gridOptions.rowDetailView && gridOptions.rowDetailView.viewComponent;
                        gridOptions.rowDetailView.postTemplate = function (itemDetail) { return DOMPurify.sanitize("<div class=\"" + ROW_DETAIL_CONTAINER_PREFIX + itemDetail[_this.datasetIdPropName] + "\"></div>"); };
                    }
                    // finally register the Row Detail View Plugin
                    this._addon = new Slick.Plugins.RowDetailView(gridOptions.rowDetailView);
                }
                var selectionColumn = this._addon.getColumnDefinition();
                if (typeof selectionColumn === 'object') {
                    selectionColumn.excludeFromExport = true;
                    selectionColumn.excludeFromColumnPicker = true;
                    selectionColumn.excludeFromGridMenu = true;
                    selectionColumn.excludeFromQuery = true;
                    selectionColumn.excludeFromHeaderMenu = true;
                    columnDefinitions.unshift(selectionColumn);
                }
            }
            return this._addon;
        }
        return null;
    };
    /** Get the instance of the SlickGrid addon (control or plugin). */
    RowDetailViewExtension.prototype.getAddonInstance = function () {
        return this._addon;
    };
    RowDetailViewExtension.prototype.register = function (rowSelectionPlugin) {
        var _this = this;
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // the plugin has to be created BEFORE the grid (else it behaves oddly), but we can only watch grid events AFTER the grid is created
            this.sharedService.grid.registerPlugin(this._addon);
            // this also requires the Row Selection Model to be registered as well
            if (!rowSelectionPlugin || !this.sharedService.grid.getSelectionModel()) {
                this.extensionUtility.loadExtensionDynamically(ExtensionName.rowSelection);
                rowSelectionPlugin = new Slick.RowSelectionModel(this.sharedService.gridOptions.rowSelectionOptions || { selectActiveRow: true });
                this.sharedService.grid.setSelectionModel(rowSelectionPlugin);
            }
            // hook all events
            if (this.sharedService.grid && this.rowDetailViewOptions) {
                if (this.rowDetailViewOptions.onExtensionRegistered) {
                    this.rowDetailViewOptions.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onAsyncResponse, function (e, args) {
                    if (_this.rowDetailViewOptions && typeof _this.rowDetailViewOptions.onAsyncResponse === 'function') {
                        _this.rowDetailViewOptions.onAsyncResponse(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onAsyncEndUpdate, function (e, args) {
                    // triggers after backend called "onAsyncResponse.notify()"
                    _this.renderViewModel(args && args.item);
                    if (_this.rowDetailViewOptions && typeof _this.rowDetailViewOptions.onAsyncEndUpdate === 'function') {
                        _this.rowDetailViewOptions.onAsyncEndUpdate(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onAfterRowDetailToggle, function (e, args) {
                    // display preload template & re-render all the other Detail Views after toggling
                    // the preload View will eventually go away once the data gets loaded after the "onAsyncEndUpdate" event
                    _this.renderPreloadView();
                    _this.renderAllViewComponents();
                    if (_this.rowDetailViewOptions && typeof _this.rowDetailViewOptions.onAfterRowDetailToggle === 'function') {
                        _this.rowDetailViewOptions.onAfterRowDetailToggle(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onBeforeRowDetailToggle, function (e, args) {
                    // before toggling row detail, we need to create View Component if it doesn't exist
                    _this.onBeforeRowDetailToggle(e, args);
                    if (_this.rowDetailViewOptions && typeof _this.rowDetailViewOptions.onBeforeRowDetailToggle === 'function') {
                        _this.rowDetailViewOptions.onBeforeRowDetailToggle(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onRowBackToViewportRange, function (e, args) {
                    // when row is back to viewport range, we will re-render the View Component(s)
                    _this.onRowBackToViewportRange(e, args);
                    if (_this.rowDetailViewOptions && typeof _this.rowDetailViewOptions.onRowBackToViewportRange === 'function') {
                        _this.rowDetailViewOptions.onRowBackToViewportRange(e, args);
                    }
                });
                this._eventHandler.subscribe(this._addon.onRowOutOfViewportRange, function (e, args) {
                    if (_this.rowDetailViewOptions && typeof _this.rowDetailViewOptions.onRowOutOfViewportRange === 'function') {
                        _this.rowDetailViewOptions.onRowOutOfViewportRange(e, args);
                    }
                });
                // --
                // hook some events needed by the Plugin itself
                this._eventHandler.subscribe(this.sharedService.grid.onColumnsReordered, function () { return _this.redrawAllViewComponents(); });
                // on sort, all row detail are collapsed so we can dispose of all the Views as well
                this._eventHandler.subscribe(this.sharedService.grid.onSort, function () { return _this.disposeAllViewComponents(); });
                // on filter changed, we need to re-render all Views
                this._subscriptions.push(this.filterService.onFilterChanged.subscribe(function () { return _this.redrawAllViewComponents(); }));
            }
            return this._addon;
        }
        return null;
    };
    /** Redraw (re-render) all the expanded row detail View Components */
    RowDetailViewExtension.prototype.redrawAllViewComponents = function () {
        var _this = this;
        this._views.forEach(function (compRef) {
            _this.redrawViewComponent(compRef);
        });
    };
    /** Render all the expanded row detail View Components */
    RowDetailViewExtension.prototype.renderAllViewComponents = function () {
        var _this = this;
        this._views.forEach(function (view) {
            if (view && view.dataContext) {
                _this.renderViewModel(view.dataContext);
            }
        });
    };
    /** Redraw the necessary View Component */
    RowDetailViewExtension.prototype.redrawViewComponent = function (createdView) {
        var containerElements = document.getElementsByClassName("" + ROW_DETAIL_CONTAINER_PREFIX + createdView[this.datasetIdPropName]);
        if (containerElements && containerElements.length) {
            this.renderViewModel(createdView.dataContext);
        }
    };
    /** Render (or rerender) the View Component (Row Detail) */
    RowDetailViewExtension.prototype.renderPreloadView = function () {
        var containerElements = document.getElementsByClassName("" + PRELOAD_CONTAINER_PREFIX);
        if (containerElements && containerElements.length) {
            this.angularUtilService.createAngularComponentAppendToDom(this._preloadComponent, containerElements[0], true);
        }
    };
    /** Render (or rerender) the View Component (Row Detail) */
    RowDetailViewExtension.prototype.renderViewModel = function (item) {
        var _this = this;
        var containerElements = document.getElementsByClassName("" + ROW_DETAIL_CONTAINER_PREFIX + item[this.datasetIdPropName]);
        if (containerElements && containerElements.length) {
            var componentOutput = this.angularUtilService.createAngularComponentAppendToDom(this._viewComponent, containerElements[0], true);
            if (componentOutput && componentOutput.componentRef && componentOutput.componentRef.instance) {
                // pass a few properties to the Row Detail template component
                Object.assign(componentOutput.componentRef.instance, {
                    model: item,
                    addon: this._addon,
                    grid: this.sharedService.grid,
                    dataView: this.sharedService.dataView,
                    parent: this.rowDetailViewOptions && this.rowDetailViewOptions.parent,
                });
                var viewObj = this._views.find(function (obj) { return obj[_this.datasetIdPropName] === item[_this.datasetIdPropName]; });
                if (viewObj) {
                    viewObj.componentRef = componentOutput.componentRef;
                }
                return viewObj;
            }
        }
        return null;
    };
    // --
    // private functions
    // ------------------
    RowDetailViewExtension.prototype.disposeViewComponent = function (expandedView) {
        var compRef = expandedView && expandedView.componentRef;
        if (compRef) {
            this.appRef.detachView(compRef.hostView);
            compRef.destroy();
            return expandedView;
        }
        return null;
    };
    /**
     * notify the onAsyncResponse with the "args.item" (required property)
     * the plugin will then use item to populate the row detail panel with the "postTemplate"
     * @param item
     */
    RowDetailViewExtension.prototype.notifyTemplate = function (item) {
        if (this._addon) {
            this._addon.onAsyncResponse.notify({ item: item }, undefined, this);
        }
    };
    /**
     * On Processing, we will notify the plugin with the new item detail once backend server call completes
     * @param item
     */
    RowDetailViewExtension.prototype.onProcessing = function (item) {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var awaitedItemDetail, userProcessFn, response;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(item && typeof this._userProcessFn === 'function')) return [3 /*break*/, 5];
                        awaitedItemDetail = void 0;
                        userProcessFn = this._userProcessFn(item);
                        return [4 /*yield*/, userProcessFn];
                    case 1:
                        response = _a.sent();
                        if (!response.hasOwnProperty(this.datasetIdPropName)) return [3 /*break*/, 2];
                        awaitedItemDetail = response; // from Promise
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(response && response instanceof Observable || response instanceof Promise)) return [3 /*break*/, 4];
                        return [4 /*yield*/, castToPromise(response)];
                    case 3:
                        awaitedItemDetail = _a.sent(); // from Angular-http-client
                        _a.label = 4;
                    case 4:
                        if (!awaitedItemDetail || !awaitedItemDetail.hasOwnProperty(this.datasetIdPropName)) {
                            throw new Error("[Angular-Slickgrid] could not process the Row Detail, you must make sure that your \"process\" callback\n          (a Promise or an HttpClient call returning an Observable) returns an item object that has an \"" + this.datasetIdPropName + "\" property");
                        }
                        // notify the plugin with the new item details
                        this.notifyTemplate(awaitedItemDetail || {});
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Just before the row get expanded or collapsed we will do the following
     * First determine if the row is expanding or collapsing,
     * if it's expanding we will add it to our View Components reference array if we don't already have it
     * or if it's collapsing we will remove it from our View Components reference array
     */
    RowDetailViewExtension.prototype.onBeforeRowDetailToggle = function (e, args) {
        var _this = this;
        // expanding
        if (args && args.item && args.item.__collapsed) {
            // expanding row detail
            var viewInfo = {
                id: args.item[this.datasetIdPropName],
                dataContext: args.item
            };
            addToArrayWhenNotExists(this._views, viewInfo);
        }
        else {
            // collapsing, so dispose of the View/Component
            var foundViewIndex = this._views.findIndex(function (view) { return view[_this.datasetIdPropName] === args.item[_this.datasetIdPropName]; });
            if (foundViewIndex >= 0 && this._views.hasOwnProperty(foundViewIndex)) {
                var compRef = this._views[foundViewIndex].componentRef;
                this.appRef.detachView(compRef.hostView);
                compRef.destroy();
                this._views.splice(foundViewIndex, 1);
            }
        }
    };
    /** When Row comes back to Viewport Range, we need to redraw the View */
    RowDetailViewExtension.prototype.onRowBackToViewportRange = function (e, args) {
        var _this = this;
        if (args && args.item) {
            this._views.forEach(function (view) {
                if (view[_this.datasetIdPropName] === args.item[_this.datasetIdPropName]) {
                    _this.redrawViewComponent(view);
                }
            });
        }
    };
    RowDetailViewExtension = tslib_1.__decorate([
        Injectable(),
        tslib_1.__metadata("design:paramtypes", [AngularUtilService,
            ApplicationRef,
            ExtensionUtility,
            FilterService,
            SharedService])
    ], RowDetailViewExtension);
    return RowDetailViewExtension;
}());
export { RowDetailViewExtension };
//# sourceMappingURL=data:application/json;base64,