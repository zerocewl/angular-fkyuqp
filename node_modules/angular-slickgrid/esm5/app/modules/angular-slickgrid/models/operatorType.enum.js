export var OperatorType;
(function (OperatorType) {
    /** value is empty */
    OperatorType["empty"] = "";
    /** value contains x */
    OperatorType["contains"] = "Contains";
    /** value not contains x (inversed of contains) */
    OperatorType["notContains"] = "Not_Contains";
    /** value less than x */
    OperatorType["lessThan"] = "LT";
    /** value less than or equal to x */
    OperatorType["lessThanOrEqual"] = "LE";
    /** value greater than x */
    OperatorType["greaterThan"] = "GT";
    /** value great than or equal to x */
    OperatorType["greaterThanOrEqual"] = "GE";
    /** value not equal to x */
    OperatorType["notEqual"] = "NE";
    /** value equal to x */
    OperatorType["equal"] = "EQ";
    /** String ends with value */
    OperatorType["endsWith"] = "EndsWith";
    /**
     * Search in an inclusive range of values that is greater or equal to search value 1 and is smaller or equal to value 2
     * For example the search term of "5..10" will return any values that are greater or equal to 5 and smaller or equal to 10
     */
    OperatorType["rangeInclusive"] = "RangeInclusive";
    /**
     * Search in an inclusive range of values that is greater then search value 1 and is smaller then value 2
     * For example the search term of "5..10" will return any values that is greater then 5 and smaller then 10
     */
    OperatorType["rangeExclusive"] = "RangeExclusive";
    /** String starts with value */
    OperatorType["startsWith"] = "StartsWith";
    /** Find an equal match inside a collection */
    OperatorType["in"] = "IN";
    /** Inverse (Not In) of an equal match inside a collection */
    OperatorType["notIn"] = "NOT_IN";
    /**
     * Find a substring contained inside a collection
     * For example, this condition would return True with "IN_CONTAINS":: value='Task2,Task3', collection=['Task2','Task3']
     * This would have returned False with "IN" because 'Task2' does not equal 'Task2,Task3'. However 'Task2' is contained in 'Task2,Task3'
     */
    OperatorType["inContains"] = "IN_CONTAINS";
    /** Inversed (Not In) of substring contained inside a collection */
    OperatorType["notInContains"] = "NOT_IN_CONTAINS";
})(OperatorType || (OperatorType = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BlcmF0b3JUeXBlLmVudW0uanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL21vZGVscy9vcGVyYXRvclR5cGUuZW51bS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLENBQU4sSUFBWSxZQTZEWDtBQTdERCxXQUFZLFlBQVk7SUFDdEIscUJBQXFCO0lBQ3JCLDBCQUFVLENBQUE7SUFFVix1QkFBdUI7SUFDdkIscUNBQXFCLENBQUE7SUFFckIsa0RBQWtEO0lBQ2xELDRDQUE0QixDQUFBO0lBRTVCLHdCQUF3QjtJQUN4QiwrQkFBZSxDQUFBO0lBRWYsb0NBQW9DO0lBQ3BDLHNDQUFzQixDQUFBO0lBRXRCLDJCQUEyQjtJQUMzQixrQ0FBa0IsQ0FBQTtJQUVsQixxQ0FBcUM7SUFDckMseUNBQXlCLENBQUE7SUFFekIsMkJBQTJCO0lBQzNCLCtCQUFlLENBQUE7SUFFZix1QkFBdUI7SUFDdkIsNEJBQVksQ0FBQTtJQUVaLDZCQUE2QjtJQUM3QixxQ0FBcUIsQ0FBQTtJQUVyQjs7O09BR0c7SUFDSCxpREFBaUMsQ0FBQTtJQUVqQzs7O09BR0c7SUFDSCxpREFBaUMsQ0FBQTtJQUVqQywrQkFBK0I7SUFDL0IseUNBQXlCLENBQUE7SUFFekIsOENBQThDO0lBQzlDLHlCQUFTLENBQUE7SUFFVCw2REFBNkQ7SUFDN0QsZ0NBQWdCLENBQUE7SUFFaEI7Ozs7T0FJRztJQUNILDBDQUEwQixDQUFBO0lBRTFCLG1FQUFtRTtJQUNuRSxpREFBaUMsQ0FBQTtBQUNuQyxDQUFDLEVBN0RXLFlBQVksS0FBWixZQUFZLFFBNkR2QiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBlbnVtIE9wZXJhdG9yVHlwZSB7XHJcbiAgLyoqIHZhbHVlIGlzIGVtcHR5ICovXHJcbiAgZW1wdHkgPSAnJyxcclxuXHJcbiAgLyoqIHZhbHVlIGNvbnRhaW5zIHggKi9cclxuICBjb250YWlucyA9ICdDb250YWlucycsXHJcblxyXG4gIC8qKiB2YWx1ZSBub3QgY29udGFpbnMgeCAoaW52ZXJzZWQgb2YgY29udGFpbnMpICovXHJcbiAgbm90Q29udGFpbnMgPSAnTm90X0NvbnRhaW5zJyxcclxuXHJcbiAgLyoqIHZhbHVlIGxlc3MgdGhhbiB4ICovXHJcbiAgbGVzc1RoYW4gPSAnTFQnLFxyXG5cclxuICAvKiogdmFsdWUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIHggKi9cclxuICBsZXNzVGhhbk9yRXF1YWwgPSAnTEUnLFxyXG5cclxuICAvKiogdmFsdWUgZ3JlYXRlciB0aGFuIHggKi9cclxuICBncmVhdGVyVGhhbiA9ICdHVCcsXHJcblxyXG4gIC8qKiB2YWx1ZSBncmVhdCB0aGFuIG9yIGVxdWFsIHRvIHggKi9cclxuICBncmVhdGVyVGhhbk9yRXF1YWwgPSAnR0UnLFxyXG5cclxuICAvKiogdmFsdWUgbm90IGVxdWFsIHRvIHggKi9cclxuICBub3RFcXVhbCA9ICdORScsXHJcblxyXG4gIC8qKiB2YWx1ZSBlcXVhbCB0byB4ICovXHJcbiAgZXF1YWwgPSAnRVEnLFxyXG5cclxuICAvKiogU3RyaW5nIGVuZHMgd2l0aCB2YWx1ZSAqL1xyXG4gIGVuZHNXaXRoID0gJ0VuZHNXaXRoJyxcclxuXHJcbiAgLyoqXHJcbiAgICogU2VhcmNoIGluIGFuIGluY2x1c2l2ZSByYW5nZSBvZiB2YWx1ZXMgdGhhdCBpcyBncmVhdGVyIG9yIGVxdWFsIHRvIHNlYXJjaCB2YWx1ZSAxIGFuZCBpcyBzbWFsbGVyIG9yIGVxdWFsIHRvIHZhbHVlIDJcclxuICAgKiBGb3IgZXhhbXBsZSB0aGUgc2VhcmNoIHRlcm0gb2YgXCI1Li4xMFwiIHdpbGwgcmV0dXJuIGFueSB2YWx1ZXMgdGhhdCBhcmUgZ3JlYXRlciBvciBlcXVhbCB0byA1IGFuZCBzbWFsbGVyIG9yIGVxdWFsIHRvIDEwXHJcbiAgICovXHJcbiAgcmFuZ2VJbmNsdXNpdmUgPSAnUmFuZ2VJbmNsdXNpdmUnLFxyXG5cclxuICAvKipcclxuICAgKiBTZWFyY2ggaW4gYW4gaW5jbHVzaXZlIHJhbmdlIG9mIHZhbHVlcyB0aGF0IGlzIGdyZWF0ZXIgdGhlbiBzZWFyY2ggdmFsdWUgMSBhbmQgaXMgc21hbGxlciB0aGVuIHZhbHVlIDJcclxuICAgKiBGb3IgZXhhbXBsZSB0aGUgc2VhcmNoIHRlcm0gb2YgXCI1Li4xMFwiIHdpbGwgcmV0dXJuIGFueSB2YWx1ZXMgdGhhdCBpcyBncmVhdGVyIHRoZW4gNSBhbmQgc21hbGxlciB0aGVuIDEwXHJcbiAgICovXHJcbiAgcmFuZ2VFeGNsdXNpdmUgPSAnUmFuZ2VFeGNsdXNpdmUnLFxyXG5cclxuICAvKiogU3RyaW5nIHN0YXJ0cyB3aXRoIHZhbHVlICovXHJcbiAgc3RhcnRzV2l0aCA9ICdTdGFydHNXaXRoJyxcclxuXHJcbiAgLyoqIEZpbmQgYW4gZXF1YWwgbWF0Y2ggaW5zaWRlIGEgY29sbGVjdGlvbiAqL1xyXG4gIGluID0gJ0lOJyxcclxuXHJcbiAgLyoqIEludmVyc2UgKE5vdCBJbikgb2YgYW4gZXF1YWwgbWF0Y2ggaW5zaWRlIGEgY29sbGVjdGlvbiAqL1xyXG4gIG5vdEluID0gJ05PVF9JTicsXHJcblxyXG4gIC8qKlxyXG4gICAqIEZpbmQgYSBzdWJzdHJpbmcgY29udGFpbmVkIGluc2lkZSBhIGNvbGxlY3Rpb25cclxuICAgKiBGb3IgZXhhbXBsZSwgdGhpcyBjb25kaXRpb24gd291bGQgcmV0dXJuIFRydWUgd2l0aCBcIklOX0NPTlRBSU5TXCI6OiB2YWx1ZT0nVGFzazIsVGFzazMnLCBjb2xsZWN0aW9uPVsnVGFzazInLCdUYXNrMyddXHJcbiAgICogVGhpcyB3b3VsZCBoYXZlIHJldHVybmVkIEZhbHNlIHdpdGggXCJJTlwiIGJlY2F1c2UgJ1Rhc2syJyBkb2VzIG5vdCBlcXVhbCAnVGFzazIsVGFzazMnLiBIb3dldmVyICdUYXNrMicgaXMgY29udGFpbmVkIGluICdUYXNrMixUYXNrMydcclxuICAgKi9cclxuICBpbkNvbnRhaW5zID0gJ0lOX0NPTlRBSU5TJyxcclxuXHJcbiAgLyoqIEludmVyc2VkIChOb3QgSW4pIG9mIHN1YnN0cmluZyBjb250YWluZWQgaW5zaWRlIGEgY29sbGVjdGlvbiAqL1xyXG4gIG5vdEluQ29udGFpbnMgPSAnTk9UX0lOX0NPTlRBSU5TJyxcclxufVxyXG4iXX0=