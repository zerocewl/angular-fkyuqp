import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import { FieldType } from '../models/index';
import * as moment_ from 'moment-mini';
var moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
export function compareDates(value1, value2, sortDirection, format, strict) {
    var diff = 0;
    if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {
        diff = -1;
    }
    else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {
        diff = 1;
    }
    else {
        var date1 = moment(value1, format, strict);
        var date2 = moment(value2, format, strict);
        diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);
    }
    return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));
}
/** From a FieldType, return the associated date Sorter */
export function getAssociatedDateSorter(fieldType) {
    var FORMAT = (fieldType === FieldType.date) ? moment.ISO_8601 : mapMomentDateFormatWithFieldType(fieldType);
    return function (value1, value2, sortDirection) {
        if (FORMAT === moment.ISO_8601) {
            return compareDates(value1, value2, sortDirection, FORMAT, false);
        }
        return compareDates(value1, value2, sortDirection, FORMAT, true);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc29ydGVycy9kYXRlVXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEtBQUssT0FBTyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxJQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxzSEFBc0g7QUFFOUksTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsTUFBVyxFQUFFLGFBQXFCLEVBQUUsTUFBNEMsRUFBRSxNQUFnQjtJQUMxSSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFFYixJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ2pGLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNYO1NBQU0sSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUN4RixJQUFJLEdBQUcsQ0FBQyxDQUFDO0tBQ1Y7U0FBTTtRQUNMLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMxRTtJQUVELE9BQU8sYUFBYSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFFRCwwREFBMEQ7QUFDMUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFNBQW9CO0lBQzFELElBQU0sTUFBTSxHQUFHLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFOUcsT0FBTyxVQUFDLE1BQVcsRUFBRSxNQUFXLEVBQUUsYUFBcUI7UUFDckQsSUFBSSxNQUFNLEtBQUssTUFBTSxDQUFDLFFBQVEsRUFBRTtZQUM5QixPQUFPLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7U0FDbkU7UUFDRCxPQUFPLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDbkUsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlIH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuaW1wb3J0IHsgRmllbGRUeXBlLCBTb3J0ZXIgfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgKiBhcyBtb21lbnRfIGZyb20gJ21vbWVudC1taW5pJztcclxuY29uc3QgbW9tZW50ID0gbW9tZW50XzsgLy8gcGF0Y2ggdG8gZml4IHJvbGx1cCBcIm1vbWVudCBoYXMgbm8gZGVmYXVsdCBleHBvcnRcIiBpc3N1ZSwgZG9jdW1lbnQgaGVyZSBodHRwczovL2dpdGh1Yi5jb20vcm9sbHVwL3JvbGx1cC9pc3N1ZXMvNjcwXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gY29tcGFyZURhdGVzKHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgc29ydERpcmVjdGlvbjogbnVtYmVyLCBmb3JtYXQ6IHN0cmluZyB8IG1vbWVudF8uTW9tZW50QnVpbHRpbkZvcm1hdCwgc3RyaWN0PzogYm9vbGVhbikge1xyXG4gIGxldCBkaWZmID0gMDtcclxuXHJcbiAgaWYgKHZhbHVlMSA9PT0gbnVsbCB8fCB2YWx1ZTEgPT09ICcnIHx8ICFtb21lbnQodmFsdWUxLCBmb3JtYXQsIHN0cmljdCkuaXNWYWxpZCgpKSB7XHJcbiAgICBkaWZmID0gLTE7XHJcbiAgfSBlbHNlIGlmICh2YWx1ZTIgPT09IG51bGwgfHwgdmFsdWUyID09PSAnJyB8fCAhbW9tZW50KHZhbHVlMiwgZm9ybWF0LCBzdHJpY3QpLmlzVmFsaWQoKSkge1xyXG4gICAgZGlmZiA9IDE7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGRhdGUxID0gbW9tZW50KHZhbHVlMSwgZm9ybWF0LCBzdHJpY3QpO1xyXG4gICAgY29uc3QgZGF0ZTIgPSBtb21lbnQodmFsdWUyLCBmb3JtYXQsIHN0cmljdCk7XHJcbiAgICBkaWZmID0gcGFyc2VJbnQoZGF0ZTEuZm9ybWF0KCdYJyksIDEwKSAtIHBhcnNlSW50KGRhdGUyLmZvcm1hdCgnWCcpLCAxMCk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gc29ydERpcmVjdGlvbiAqIChkaWZmID09PSAwID8gMCA6IChkaWZmID4gMCA/IDEgOiAtMSkpO1xyXG59XHJcblxyXG4vKiogRnJvbSBhIEZpZWxkVHlwZSwgcmV0dXJuIHRoZSBhc3NvY2lhdGVkIGRhdGUgU29ydGVyICovXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBc3NvY2lhdGVkRGF0ZVNvcnRlcihmaWVsZFR5cGU6IEZpZWxkVHlwZSk6IFNvcnRlciB7XHJcbiAgY29uc3QgRk9STUFUID0gKGZpZWxkVHlwZSA9PT0gRmllbGRUeXBlLmRhdGUpID8gbW9tZW50LklTT184NjAxIDogbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoZmllbGRUeXBlKTtcclxuXHJcbiAgcmV0dXJuICh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHNvcnREaXJlY3Rpb246IG51bWJlcikgPT4ge1xyXG4gICAgaWYgKEZPUk1BVCA9PT0gbW9tZW50LklTT184NjAxKSB7XHJcbiAgICAgIHJldHVybiBjb21wYXJlRGF0ZXModmFsdWUxLCB2YWx1ZTIsIHNvcnREaXJlY3Rpb24sIEZPUk1BVCwgZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGNvbXBhcmVEYXRlcyh2YWx1ZTEsIHZhbHVlMiwgc29ydERpcmVjdGlvbiwgRk9STUFULCB0cnVlKTtcclxuICB9O1xyXG59XHJcbiJdfQ==