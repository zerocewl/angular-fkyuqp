import { Column, Filter, FilterArguments, FilterCallback, OperatorString, OperatorType, SearchTerm } from './../models/index';
export declare class CompoundSliderFilter implements Filter {
    private _clearFilterTriggered;
    private _currentValue;
    private _shouldTriggerQuery;
    private _elementRangeInputId;
    private _elementRangeOutputId;
    private _operator;
    private $containerInputGroupElm;
    private $filterElm;
    private $filterInputElm;
    private $selectOperatorElm;
    grid: any;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    constructor();
    /** Getter to know what would be the default operator when none is specified */
    readonly defaultOperator: OperatorType | OperatorString;
    /** Getter for the Filter Generic Params */
    private readonly filterParams;
    /** Getter for the `filter` properties */
    private readonly filterProperties;
    operator: OperatorType | OperatorString;
    /**
     * Initialize the Filter
     */
    init(args: FilterArguments): void;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    /**
     * Get selected value retrieved from the slider element
     * @params selected items
     */
    getValues(): number;
    /** Set value(s) on the DOM element */
    setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString): void;
    /** Build HTML Template for the input range (slider) */
    private buildTemplateHtmlString;
    /** Build HTML Template for the text (number) that is shown appended to the slider */
    private buildTemplateSliderTextHtmlString;
    /** Build HTML Template select dropdown (operator) */
    private buildSelectOperatorHtmlString;
    /** Get the available operator option values */
    private getOptionValues;
    /**
     * Create the DOM element
     */
    private createDomElement;
    private onTriggerEvent;
}
