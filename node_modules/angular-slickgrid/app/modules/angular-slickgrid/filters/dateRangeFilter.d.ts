import { TranslateService } from '@ngx-translate/core';
import { Column, ColumnFilter, Filter, FilterArguments, FilterCallback, FlatpickrOption, OperatorString, OperatorType, SearchTerm } from '../models/index';
export declare class DateRangeFilter implements Filter {
    private translate;
    private _clearFilterTriggered;
    private _currentValue;
    private _currentDates;
    private _currentDateStrings;
    private _flatpickrOptions;
    private _shouldTriggerQuery;
    private $filterElm;
    private $filterInputElm;
    flatInstance: any;
    grid: any;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    constructor(translate: TranslateService);
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly gridOptions;
    /** Getter for the Column Filter */
    readonly columnFilter: ColumnFilter;
    /** Getter for the Current Dates selected */
    readonly currentDates: Date[];
    /** Getter to know what would be the default operator when none is specified */
    readonly defaultOperator: OperatorType | OperatorString;
    /** Getter for the Flatpickr Options */
    readonly flatpickrOptions: FlatpickrOption;
    /** Getter of the Operator to use when doing the filter comparing */
    /** Setter for the filter operator */
    operator: OperatorType | OperatorString;
    /**
     * Initialize the Filter
     */
    init(args: FilterArguments): void;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    hide(): void;
    show(): void;
    /**
     * Set value(s) on the DOM element
     * @params searchTerms
     */
    setValues(searchTerms: SearchTerm[], operator?: OperatorType | OperatorString): void;
    private buildDatePickerInput;
    /**
     * Create the DOM element
     * @params searchTerms
     */
    private createDomElement;
    /** Load a different set of locales for Flatpickr to be localized */
    private loadFlatpickrLocale;
    private onTriggerEvent;
}
