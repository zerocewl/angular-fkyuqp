{"version":3,"file":"autoCompleteFilter.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/filters/autoCompleteFilter.d.ts"],"sourcesContent":["import { TranslateService } from '@ngx-translate/core';\r\nimport { AutocompleteOption, CollectionCustomStructure, CollectionOption, Column, ColumnFilter, Filter, FilterArguments, FilterCallback, GridOption, OperatorType, OperatorString, SearchTerm } from './../models/index';\r\nimport { CollectionService } from '../services/collection.service';\r\nimport { Subscription, Subject, Observable } from 'rxjs';\r\nexport declare class AutoCompleteFilter implements Filter {\r\n    protected translate: TranslateService;\r\n    protected collectionService: CollectionService;\r\n    private _autoCompleteOptions;\r\n    private _clearFilterTriggered;\r\n    private _collection;\r\n    private _shouldTriggerQuery;\r\n    /** DOM Element Name, useful for auto-detecting positioning (dropup / dropdown) */\r\n    elementName: string;\r\n    /** The JQuery DOM element */\r\n    $filterElm: any;\r\n    grid: any;\r\n    searchTerms: SearchTerm[];\r\n    columnDef: Column;\r\n    callback: FilterCallback;\r\n    isFilled: boolean;\r\n    /** The property name for labels in the collection */\r\n    labelName: string;\r\n    /** The property name for values in the collection */\r\n    optionLabel: string;\r\n    /** The property name for values in the collection */\r\n    valueName: string;\r\n    enableTranslateLabel: boolean;\r\n    subscriptions: Subscription[];\r\n    /**\r\n     * Initialize the Filter\r\n     */\r\n    constructor(translate: TranslateService, collectionService: CollectionService);\r\n    /** Getter for the Autocomplete Option */\r\n    readonly autoCompleteOptions: Partial<AutocompleteOption>;\r\n    /** Getter for the Collection Options */\r\n    protected readonly collectionOptions: CollectionOption;\r\n    /** Getter for the Collection Used by the Filter */\r\n    readonly collection: any[];\r\n    /** Getter for the Column Filter */\r\n    readonly columnFilter: ColumnFilter;\r\n    /** Getter for the Custom Structure if exist */\r\n    readonly customStructure: CollectionCustomStructure | undefined;\r\n    /** Getter to know what would be the default operator when none is specified */\r\n    readonly defaultOperator: OperatorType | OperatorString;\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    readonly gridOptions: GridOption;\r\n    /** Getter of the Operator to use when doing the filter comparing */\r\n    /** Setter for the filter operator */\r\n    operator: OperatorType | OperatorString;\r\n    /**\r\n     * Initialize the filter template\r\n     */\r\n    init(args: FilterArguments): Promise<boolean>;\r\n    /**\r\n     * Clear the filter value\r\n     */\r\n    clear(shouldTriggerQuery?: boolean): void;\r\n    /**\r\n     * destroy the filter\r\n     */\r\n    destroy(): void;\r\n    /** Set value(s) on the DOM element */\r\n    setValues(values: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString): void;\r\n    /**\r\n     * user might want to filter certain items of the collection\r\n     * @param inputCollection\r\n     * @return outputCollection filtered and/or sorted collection\r\n     */\r\n    protected filterCollection(inputCollection: any[]): any[];\r\n    /**\r\n     * user might want to sort the collection in a certain way\r\n     * @param inputCollection\r\n     * @return outputCollection filtered and/or sorted collection\r\n     */\r\n    protected sortCollection(inputCollection: any[]): any[];\r\n    protected renderOptionsAsync(collectionAsync: Promise<any> | Observable<any> | Subject<any>): Promise<boolean>;\r\n    /** Create or recreate an Observable Subject and reassign it to the \"collectionAsync\" object so user can call a \"collectionAsync.next()\" on it */\r\n    protected createCollectionAsyncSubject(): void;\r\n    /**\r\n     * When user use a CollectionAsync we will use the returned collection to render the filter DOM element\r\n     * and reinitialize filter collection with this new collection\r\n     */\r\n    protected renderDomElementFromCollectionAsync(collection: any): void;\r\n    protected renderDomElement(collection: any[]): void;\r\n    /**\r\n     * Create the HTML template as a string\r\n     */\r\n    private buildTemplateHtmlString;\r\n    /**\r\n     * From the html template string, create a DOM element\r\n     * @param filterTemplate\r\n     */\r\n    private createDomElement;\r\n    onSelect(event: Event, ui: any): boolean;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;"}