import { Column, ColumnFilter, Filter, FilterArguments, FilterCallback, GridOption, JQueryUiSliderOption, OperatorType, OperatorString, SearchTerm } from '../models/index';
/** A Slider Range Filter which uses jQuery UI, this is only meant to be used as a range filter (with 2 handles lowest & highest values) */
export declare class SliderRangeFilter implements Filter {
    private _clearFilterTriggered;
    private _currentValues;
    private _shouldTriggerQuery;
    private _sliderOptions;
    private $filterElm;
    private $filterContainerElm;
    grid: any;
    searchTerms: SearchTerm[];
    columnDef: Column;
    callback: FilterCallback;
    /** Getter for the Filter Generic Params */
    private readonly filterParams;
    /** Getter for the `filter` properties */
    private readonly filterProperties;
    /** Getter for the Column Filter */
    readonly columnFilter: ColumnFilter;
    /** Getter for the Current Slider Values */
    readonly currentValues: number[];
    /** Getter to know what would be the default operator when none is specified */
    readonly defaultOperator: OperatorType | OperatorString;
    /** Getter for the Grid Options pulled through the Grid Object */
    readonly gridOptions: GridOption;
    /** Getter for the JQuery UI Slider Options */
    readonly sliderOptions: JQueryUiSliderOption;
    /** Getter of the Operator to use when doing the filter comparing */
    /** Setter for the filter operator */
    operator: OperatorType | OperatorString;
    /**
     * Initialize the Filter
     */
    init(args: FilterArguments): void;
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery?: boolean): void;
    /**
     * destroy the filter
     */
    destroy(): void;
    /**
     * Render both slider values (low/high) on screen
     * @param lowestValue number
     * @param highestValue number
     */
    renderSliderValues(lowestValue: number | string, highestValue: number | string): void;
    /**
     * Set value(s) on the DOM element
     * @params searchTerms
     */
    setValues(searchTerms: SearchTerm | SearchTerm[], operator?: OperatorType | OperatorString): void;
    /**
     * From the html template string, create a DOM element
     * @param searchTerm optional preset search terms
     */
    private createDomElement;
    /** On a value change event triggered */
    private onValueChanged;
}
