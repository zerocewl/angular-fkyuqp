{"version":3,"file":"angular-slickgrid.component.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/components/angular-slickgrid.component.d.ts"],"sourcesContent":["import 'jquery-ui-dist/jquery-ui';\r\nimport 'slickgrid/lib/jquery.event.drag-2.3.0';\r\nimport 'slickgrid/slick.core';\r\nimport 'slickgrid/slick.grid';\r\nimport 'slickgrid/slick.dataview';\r\nimport { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { AngularGridInstance, BackendServiceApi, Column, CustomFooterOption, GridOption, GridStateChange, Locale, Metrics, Pagination, ServicePagination } from './../models/index';\r\nimport { Subscription } from 'rxjs';\r\nimport { ExcelExportService } from '../services/excelExport.service';\r\nimport { ExportService } from './../services/export.service';\r\nimport { ExtensionService } from '../services/extension.service';\r\nimport { ExtensionUtility } from '../extensions/extensionUtility';\r\nimport { FilterService } from './../services/filter.service';\r\nimport { GridEventService } from './../services/gridEvent.service';\r\nimport { GridService } from './../services/grid.service';\r\nimport { GridStateService } from './../services/gridState.service';\r\nimport { GroupingAndColspanService } from './../services/groupingAndColspan.service';\r\nimport { PaginationService } from '../services/pagination.service';\r\nimport { ResizerService } from './../services/resizer.service';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { SortService } from './../services/sort.service';\r\nexport declare class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {\r\n    private cd;\r\n    private elm;\r\n    private excelExportService;\r\n    private exportService;\r\n    private extensionService;\r\n    private extensionUtility;\r\n    private filterService;\r\n    private gridEventService;\r\n    private gridService;\r\n    private gridStateService;\r\n    private groupingAndColspanService;\r\n    private paginationService;\r\n    private resizer;\r\n    private sharedService;\r\n    private sortService;\r\n    private translate;\r\n    private forRootConfig;\r\n    private _dataset;\r\n    private _columnDefinitions;\r\n    private _eventHandler;\r\n    private _fixedHeight;\r\n    private _fixedWidth;\r\n    private _hideHeaderRowAfterPageLoad;\r\n    private _isGridInitialized;\r\n    private _isDatasetInitialized;\r\n    private _isPaginationInitialized;\r\n    private _isLocalGrid;\r\n    dataView: any;\r\n    grid: any;\r\n    gridHeightString: string;\r\n    gridWidthString: string;\r\n    groupingDefinition: any;\r\n    groupItemMetadataProvider: any;\r\n    backendServiceApi: BackendServiceApi;\r\n    customFooterOptions: CustomFooterOption;\r\n    locales: Locale;\r\n    metrics: Metrics;\r\n    paginationOptions: Pagination;\r\n    showCustomFooter: boolean;\r\n    showPagination: boolean;\r\n    totalItems: number;\r\n    paginationData: {\r\n        gridOptions: GridOption;\r\n    };\r\n    subscriptions: Subscription[];\r\n    onAngularGridCreated: EventEmitter<AngularGridInstance>;\r\n    onDataviewCreated: EventEmitter<any>;\r\n    onGridCreated: EventEmitter<any>;\r\n    onGridInitialized: EventEmitter<any>;\r\n    onBeforeGridCreate: EventEmitter<boolean>;\r\n    onBeforeGridDestroy: EventEmitter<any>;\r\n    onAfterGridDestroyed: EventEmitter<boolean>;\r\n    onGridStateChanged: EventEmitter<GridStateChange>;\r\n    onGridBeforeExportToFile: import(\"rxjs/internal/Subject\").Subject<boolean>;\r\n    onGridAfterExportToFile: import(\"rxjs/internal/Subject\").Subject<{\r\n        content?: string;\r\n        filename: string;\r\n        format: string;\r\n        useUtf8WithBom: boolean;\r\n    }>;\r\n    onGridBeforeExportToExcel: import(\"rxjs/internal/Subject\").Subject<boolean>;\r\n    onGridAfterExportToExcel: import(\"rxjs/internal/Subject\").Subject<{\r\n        blob?: Blob;\r\n        filename: string;\r\n        format?: string;\r\n    }>;\r\n    customDataView: any;\r\n    gridId: string;\r\n    gridOptions: GridOption;\r\n    gridHeight: number;\r\n    gridWidth: number;\r\n    columnDefinitions: Column[];\r\n    dataset: any[];\r\n    readonly elementRef: ElementRef;\r\n    constructor(cd: ChangeDetectorRef, elm: ElementRef, excelExportService: ExcelExportService, exportService: ExportService, extensionService: ExtensionService, extensionUtility: ExtensionUtility, filterService: FilterService, gridEventService: GridEventService, gridService: GridService, gridStateService: GridStateService, groupingAndColspanService: GroupingAndColspanService, paginationService: PaginationService, resizer: ResizerService, sharedService: SharedService, sortService: SortService, translate: TranslateService, forRootConfig: GridOption);\r\n    ngAfterViewInit(): void;\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    destroy(shouldEmptyDomElementContainer?: boolean): void;\r\n    destroyGridContainerElm(): void;\r\n    /** Dispatch of Custom Event, which by default will bubble & is cancelable */\r\n    dispatchCustomEvent(eventName: string, data?: any, isBubbling?: boolean, isCancelable?: boolean): any;\r\n    /**\r\n     * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call\r\n     * For now, this is GraphQL Service ONLY feature and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time\r\n     */\r\n    createBackendApiInternalPostProcessCallback(gridOptions: GridOption): void;\r\n    /**\r\n     * On a Pagination changed, we will trigger a Grid State changed with the new pagination info\r\n     * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection\r\n     */\r\n    paginationChanged(pagination: ServicePagination): void;\r\n    /**\r\n     * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well\r\n     * @param dataset\r\n     */\r\n    refreshGridData(dataset: any[], totalCount?: number): void;\r\n    /**\r\n     * Check if there's any Pagination Presets defined in the Grid Options,\r\n     * if there are then load them in the paginationOptions object\r\n     */\r\n    setPaginationOptionsWhenPresetDefined(gridOptions: GridOption, paginationOptions: Pagination): Pagination;\r\n    /**\r\n     * Dynamically change or update the column definitions list.\r\n     * We will re-render the grid so that the new header and data shows up correctly.\r\n     * If using i18n, we also need to trigger a re-translate of the column headers\r\n     */\r\n    updateColumnDefinitionsList(newColumnDefinitions: any): void;\r\n    /**\r\n     * Show the filter row displayed on first row, we can optionally pass false to hide it.\r\n     * @param showing\r\n     */\r\n    showHeaderRow(showing?: boolean): boolean;\r\n    private bindDifferentHooks;\r\n    private bindBackendCallbackFunctions;\r\n    private bindResizeHook;\r\n    private executeAfterDataviewCreated;\r\n    private initializePaginationService;\r\n    private initialization;\r\n    /** Load the Editor Collection asynchronously and replace the \"collection\" property when Observable resolves */\r\n    private loadEditorCollectionAsync;\r\n    /**\r\n     * local grid, check if we need to show the Pagination\r\n     * if so then also check if there's any presets and finally initialize the PaginationService\r\n     * a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total\r\n     */\r\n    private loadLocalGridPagination;\r\n    /** Load any Row Selections into the DataView that were presets by the user */\r\n    private loadRowSelectionPresetWhenExists;\r\n    private mergeGridOptions;\r\n    /**\r\n     * We could optionally display a custom footer below the grid to show some metrics (last update, item count with/without filters)\r\n     * It's an opt-in, user has to enable \"showCustomFooter\" and it cannot be used when there's already a Pagination since they display the same kind of info\r\n     */\r\n    private optionallyShowCustomFooterWithMetrics;\r\n    /**\r\n     * For convenience to the user, we provide the property \"editor\" as an Angular-Slickgrid editor complex object\r\n     * however \"editor\" is used internally by SlickGrid for it's own Editor Factory\r\n     * so in our lib we will swap \"editor\" and copy it into a new property called \"internalColumnEditor\"\r\n     * then take back \"editor.model\" and make it the new \"editor\" so that SlickGrid Editor Factory still works\r\n     */\r\n    private swapInternalEditorToSlickGridFactoryEditor;\r\n    /** Translate all Custom Footer Texts (footer with metrics) */\r\n    private translateCustomFooterTexts;\r\n    private translateColumnHeaderTitleKeys;\r\n    private translateColumnGroupKeys;\r\n    /**\r\n     * Update the Editor \"collection\" property from an async call resolved\r\n     * Since this is called after the async call resolves, the pointer will not be the same as the \"column\" argument passed.\r\n     * Once we found the new pointer, we will reassign the \"editor\" and \"collection\" to the \"internalColumnEditor\" so it has newest collection\r\n     */\r\n    private updateEditorCollection;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyJA;"}