import 'jquery-ui-dist/jquery-ui';
import 'slickgrid/lib/jquery.event.drag-2.3.0';
import 'slickgrid/slick.core';
import 'slickgrid/slick.grid';
import 'slickgrid/slick.dataview';
import { AfterViewInit, ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { AngularGridInstance, BackendServiceApi, Column, CustomFooterOption, GridOption, GridStateChange, Locale, Metrics, Pagination, ServicePagination } from './../models/index';
import { Subscription } from 'rxjs';
import { ExcelExportService } from '../services/excelExport.service';
import { ExportService } from './../services/export.service';
import { ExtensionService } from '../services/extension.service';
import { ExtensionUtility } from '../extensions/extensionUtility';
import { FilterService } from './../services/filter.service';
import { GridEventService } from './../services/gridEvent.service';
import { GridService } from './../services/grid.service';
import { GridStateService } from './../services/gridState.service';
import { GroupingAndColspanService } from './../services/groupingAndColspan.service';
import { PaginationService } from '../services/pagination.service';
import { ResizerService } from './../services/resizer.service';
import { SharedService } from '../services/shared.service';
import { SortService } from './../services/sort.service';
import * as ɵngcc0 from '@angular/core';
export declare class AngularSlickgridComponent implements AfterViewInit, OnDestroy, OnInit {
    private cd;
    private elm;
    private excelExportService;
    private exportService;
    private extensionService;
    private extensionUtility;
    private filterService;
    private gridEventService;
    private gridService;
    private gridStateService;
    private groupingAndColspanService;
    private paginationService;
    private resizer;
    private sharedService;
    private sortService;
    private translate;
    private forRootConfig;
    private _dataset;
    private _columnDefinitions;
    private _eventHandler;
    private _fixedHeight;
    private _fixedWidth;
    private _hideHeaderRowAfterPageLoad;
    private _isGridInitialized;
    private _isDatasetInitialized;
    private _isPaginationInitialized;
    private _isLocalGrid;
    dataView: any;
    grid: any;
    gridHeightString: string;
    gridWidthString: string;
    groupingDefinition: any;
    groupItemMetadataProvider: any;
    backendServiceApi: BackendServiceApi;
    customFooterOptions: CustomFooterOption;
    locales: Locale;
    metrics: Metrics;
    paginationOptions: Pagination;
    showCustomFooter: boolean;
    showPagination: boolean;
    totalItems: number;
    paginationData: {
        gridOptions: GridOption;
    };
    subscriptions: Subscription[];
    onAngularGridCreated: EventEmitter<AngularGridInstance>;
    onDataviewCreated: EventEmitter<any>;
    onGridCreated: EventEmitter<any>;
    onGridInitialized: EventEmitter<any>;
    onBeforeGridCreate: EventEmitter<boolean>;
    onBeforeGridDestroy: EventEmitter<any>;
    onAfterGridDestroyed: EventEmitter<boolean>;
    onGridStateChanged: EventEmitter<GridStateChange>;
    onGridBeforeExportToFile: import("rxjs/internal/Subject").Subject<boolean>;
    onGridAfterExportToFile: import("rxjs/internal/Subject").Subject<{
        content?: string;
        filename: string;
        format: string;
        useUtf8WithBom: boolean;
    }>;
    onGridBeforeExportToExcel: import("rxjs/internal/Subject").Subject<boolean>;
    onGridAfterExportToExcel: import("rxjs/internal/Subject").Subject<{
        blob?: Blob;
        filename: string;
        format?: string;
    }>;
    customDataView: any;
    gridId: string;
    gridOptions: GridOption;
    gridHeight: number;
    gridWidth: number;
    columnDefinitions: Column[];
    dataset: any[];
    readonly elementRef: ElementRef;
    constructor(cd: ChangeDetectorRef, elm: ElementRef, excelExportService: ExcelExportService, exportService: ExportService, extensionService: ExtensionService, extensionUtility: ExtensionUtility, filterService: FilterService, gridEventService: GridEventService, gridService: GridService, gridStateService: GridStateService, groupingAndColspanService: GroupingAndColspanService, paginationService: PaginationService, resizer: ResizerService, sharedService: SharedService, sortService: SortService, translate: TranslateService, forRootConfig: GridOption);
    ngAfterViewInit(): void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    destroy(shouldEmptyDomElementContainer?: boolean): void;
    destroyGridContainerElm(): void;
    /** Dispatch of Custom Event, which by default will bubble & is cancelable */
    dispatchCustomEvent(eventName: string, data?: any, isBubbling?: boolean, isCancelable?: boolean): any;
    /**
     * Define our internal Post Process callback, it will execute internally after we get back result from the Process backend call
     * For now, this is GraphQL Service ONLY feature and it will basically refresh the Dataset & Pagination without having the user to create his own PostProcess every time
     */
    createBackendApiInternalPostProcessCallback(gridOptions: GridOption): void;
    /**
     * On a Pagination changed, we will trigger a Grid State changed with the new pagination info
     * Also if we use Row Selection or the Checkbox Selector, we need to reset any selection
     */
    paginationChanged(pagination: ServicePagination): void;
    /**
     * When dataset changes, we need to refresh the entire grid UI & possibly resize it as well
     * @param dataset
     */
    refreshGridData(dataset: any[], totalCount?: number): void;
    /**
     * Check if there's any Pagination Presets defined in the Grid Options,
     * if there are then load them in the paginationOptions object
     */
    setPaginationOptionsWhenPresetDefined(gridOptions: GridOption, paginationOptions: Pagination): Pagination;
    /**
     * Dynamically change or update the column definitions list.
     * We will re-render the grid so that the new header and data shows up correctly.
     * If using i18n, we also need to trigger a re-translate of the column headers
     */
    updateColumnDefinitionsList(newColumnDefinitions: any): void;
    /**
     * Show the filter row displayed on first row, we can optionally pass false to hide it.
     * @param showing
     */
    showHeaderRow(showing?: boolean): boolean;
    private bindDifferentHooks;
    private bindBackendCallbackFunctions;
    private bindResizeHook;
    private executeAfterDataviewCreated;
    private initializePaginationService;
    private initialization;
    /** Load the Editor Collection asynchronously and replace the "collection" property when Observable resolves */
    private loadEditorCollectionAsync;
    /**
     * local grid, check if we need to show the Pagination
     * if so then also check if there's any presets and finally initialize the PaginationService
     * a local grid with Pagination presets will potentially have a different total of items, we'll need to get it from the DataView and update our total
     */
    private loadLocalGridPagination;
    /** Load any Row Selections into the DataView that were presets by the user */
    private loadRowSelectionPresetWhenExists;
    private mergeGridOptions;
    /**
     * We could optionally display a custom footer below the grid to show some metrics (last update, item count with/without filters)
     * It's an opt-in, user has to enable "showCustomFooter" and it cannot be used when there's already a Pagination since they display the same kind of info
     */
    private optionallyShowCustomFooterWithMetrics;
    /**
     * For convenience to the user, we provide the property "editor" as an Angular-Slickgrid editor complex object
     * however "editor" is used internally by SlickGrid for it's own Editor Factory
     * so in our lib we will swap "editor" and copy it into a new property called "internalColumnEditor"
     * then take back "editor.model" and make it the new "editor" so that SlickGrid Editor Factory still works
     */
    private swapInternalEditorToSlickGridFactoryEditor;
    /** Translate all Custom Footer Texts (footer with metrics) */
    private translateCustomFooterTexts;
    private translateColumnHeaderTitleKeys;
    private translateColumnGroupKeys;
    /**
     * Update the Editor "collection" property from an async call resolved
     * Since this is called after the async call resolves, the pointer will not be the same as the "column" argument passed.
     * Once we found the new pointer, we will reassign the "editor" and "collection" to the "internalColumnEditor" so it has newest collection
     */
    private updateEditorCollection;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AngularSlickgridComponent>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AngularSlickgridComponent, "angular-slickgrid", never, {
    "gridHeight": "gridHeight";
    "gridWidth": "gridWidth";
    "columnDefinitions": "columnDefinitions";
    "dataset": "dataset";
    "gridOptions": "gridOptions";
    "customDataView": "customDataView";
    "gridId": "gridId";
}, {
    "onAngularGridCreated": "onAngularGridCreated";
    "onDataviewCreated": "onDataviewCreated";
    "onGridCreated": "onGridCreated";
    "onGridInitialized": "onGridInitialized";
    "onBeforeGridCreate": "onBeforeGridCreate";
    "onBeforeGridDestroy": "onBeforeGridDestroy";
    "onAfterGridDestroyed": "onAfterGridDestroyed";
    "onGridStateChanged": "onGridStateChanged";
    "onGridBeforeExportToFile": "onGridBeforeExportToFile";
    "onGridAfterExportToFile": "onGridAfterExportToFile";
    "onGridBeforeExportToExcel": "onGridBeforeExportToExcel";
    "onGridAfterExportToExcel": "onGridAfterExportToExcel";
}, never>;
}

//# sourceMappingURL=angular-slickgrid.component.d.ts.map