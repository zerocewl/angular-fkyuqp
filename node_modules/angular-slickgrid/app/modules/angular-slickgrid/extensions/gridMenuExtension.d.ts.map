{"version":3,"file":"gridMenuExtension.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/extensions/gridMenuExtension.d.ts"],"sourcesContent":["import { TranslateService } from '@ngx-translate/core';\r\nimport { Extension, GridOption, SlickEventHandler } from '../models';\r\nimport { ExcelExportService } from '../services/excelExport.service';\r\nimport { ExportService } from '../services/export.service';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { FilterService } from '../services/filter.service';\r\nimport { SortService } from '../services/sort.service';\r\nimport { SharedService } from '../services/shared.service';\r\nexport declare class GridMenuExtension implements Extension {\r\n    private excelExportService;\r\n    private exportService;\r\n    private extensionUtility;\r\n    private filterService;\r\n    private sharedService;\r\n    private sortService;\r\n    private translate;\r\n    private _addon;\r\n    private _areVisibleColumnDifferent;\r\n    private _eventHandler;\r\n    private _locales;\r\n    private _userOriginalGridMenu;\r\n    constructor(excelExportService: ExcelExportService, exportService: ExportService, extensionUtility: ExtensionUtility, filterService: FilterService, sharedService: SharedService, sortService: SortService, translate: TranslateService);\r\n    readonly eventHandler: SlickEventHandler;\r\n    dispose(): void;\r\n    /** Get the instance of the SlickGrid addon (control or plugin). */\r\n    getAddonInstance(): any;\r\n    /** Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...) */\r\n    register(): any;\r\n    /** Refresh the dataset through the Backend Service */\r\n    refreshBackendDataset(gridOptions?: GridOption): void;\r\n    showGridMenu(e: any): void;\r\n    /** Translate the Grid Menu titles and column picker */\r\n    translateGridMenu(): void;\r\n    /** Create Grid Menu with Custom Commands if user has enabled Filters and/or uses a Backend Service (OData, GraphQL) */\r\n    private addGridMenuCustomCommands;\r\n    /**\r\n     * Execute the Grid Menu Custom command callback that was triggered by the onCommand subscribe\r\n     * These are the default internal custom commands\r\n     * @param event\r\n     * @param GridMenuItem args\r\n     */\r\n    private executeGridMenuInternalCustomCommands;\r\n    private emptyGridMenuTitles;\r\n    /** @return default Grid Menu options */\r\n    private getDefaultGridMenuOptions;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;"}