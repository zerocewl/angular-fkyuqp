{"version":3,"file":"extensionUtility.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/extensions/extensionUtility.d.ts"],"sourcesContent":["import { TranslateService } from '@ngx-translate/core';\r\nimport { ExtensionName } from '../models/index';\r\nimport { SharedService } from '../services/shared.service';\r\nexport declare class ExtensionUtility {\r\n    private sharedService;\r\n    private translate;\r\n    constructor(sharedService: SharedService, translate: TranslateService);\r\n    /**\r\n     * Remove a column from the grid by it's index in the grid\r\n     * @param array input\r\n     * @param index\r\n     */\r\n    arrayRemoveItemByIndex<T>(array: T[], index: number): T[];\r\n    /**\r\n     * Load SlickGrid Extension (Control/Plugin) dynamically (on demand)\r\n     * This will basically only load the extension when user enables the feature\r\n     * @param extensionName\r\n     */\r\n    loadExtensionDynamically(extensionName: ExtensionName): any;\r\n    /**\r\n     * From a Grid Menu object property name, we will return the correct title output string following this order\r\n     * 1- if user provided a title, use it as the output title\r\n     * 2- else if user provided a title key, use it to translate the output title\r\n     * 3- else if nothing is provided use text defined as constants\r\n     */\r\n    getPickerTitleOutputString(propName: string, pickerName: 'gridMenu' | 'columnPicker'): string;\r\n    /**\r\n     * Sort items (by pointers) in an array by a property name\r\n     * @params items array\r\n     * @param property name to sort with\r\n     */\r\n    sortItems(items: any[], propertyName: string): void;\r\n    /** Translate the an array of items from an input key and assign to the output key */\r\n    translateItems(items: any[], inputKey: string, outputKey: string): void;\r\n    /**\r\n     * When \"enabledTranslate\" is set to True, we will try to translate if the Translate Service exist or use the Locales when not\r\n     * @param translationKey\r\n     * @param localeKey\r\n     */\r\n    translateWhenEnabledAndServiceExist(translationKey: string, localeKey: string): string;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqCA;"}