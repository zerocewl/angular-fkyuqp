{"version":3,"file":"rowDetailViewExtension.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/extensions/rowDetailViewExtension.d.ts"],"sourcesContent":["import { ApplicationRef, ComponentRef, ViewContainerRef } from '@angular/core';\r\nimport { Column, Extension, GridOption, RowDetailView, SlickEventHandler } from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { AngularUtilService } from '../services/angularUtil.service';\r\nimport { FilterService } from '../services/filter.service';\r\nimport { SharedService } from '../services/shared.service';\r\nexport interface CreatedView {\r\n    id: string | number;\r\n    dataContext: any;\r\n    componentRef?: ComponentRef<any>;\r\n}\r\nexport declare class RowDetailViewExtension implements Extension {\r\n    private angularUtilService;\r\n    private appRef;\r\n    private extensionUtility;\r\n    private filterService;\r\n    private sharedService;\r\n    rowDetailContainer: ViewContainerRef;\r\n    private _addon;\r\n    private _eventHandler;\r\n    private _preloadComponent;\r\n    private _views;\r\n    private _viewComponent;\r\n    private _subscriptions;\r\n    private _userProcessFn;\r\n    constructor(angularUtilService: AngularUtilService, appRef: ApplicationRef, extensionUtility: ExtensionUtility, filterService: FilterService, sharedService: SharedService);\r\n    private readonly datasetIdPropName;\r\n    readonly eventHandler: SlickEventHandler;\r\n    readonly gridOptions: GridOption;\r\n    readonly rowDetailViewOptions: RowDetailView;\r\n    /** Dispose of the RowDetailView Extension */\r\n    dispose(): void;\r\n    /** Dispose of all the opened Row Detail Panels Angular View Components */\r\n    disposeAllViewComponents(): void;\r\n    /**\r\n     * Create the plugin before the Grid creation, else it will behave oddly.\r\n     * Mostly because the column definitions might change after the grid creation\r\n     */\r\n    create(columnDefinitions: Column[], gridOptions: GridOption): any;\r\n    /** Get the instance of the SlickGrid addon (control or plugin). */\r\n    getAddonInstance(): any;\r\n    register(rowSelectionPlugin?: any): any;\r\n    /** Redraw (re-render) all the expanded row detail View Components */\r\n    redrawAllViewComponents(): void;\r\n    /** Render all the expanded row detail View Components */\r\n    renderAllViewComponents(): void;\r\n    /** Redraw the necessary View Component */\r\n    redrawViewComponent(createdView: CreatedView): void;\r\n    /** Render (or rerender) the View Component (Row Detail) */\r\n    renderPreloadView(): void;\r\n    /** Render (or rerender) the View Component (Row Detail) */\r\n    renderViewModel(item: any): CreatedView | null;\r\n    private disposeViewComponent;\r\n    /**\r\n     * notify the onAsyncResponse with the \"args.item\" (required property)\r\n     * the plugin will then use item to populate the row detail panel with the \"postTemplate\"\r\n     * @param item\r\n     */\r\n    private notifyTemplate;\r\n    /**\r\n     * On Processing, we will notify the plugin with the new item detail once backend server call completes\r\n     * @param item\r\n     */\r\n    private onProcessing;\r\n    /**\r\n     * Just before the row get expanded or collapsed we will do the following\r\n     * First determine if the row is expanding or collapsing,\r\n     * if it's expanding we will add it to our View Components reference array if we don't already have it\r\n     * or if it's collapsing we will remove it from our View Components reference array\r\n     */\r\n    private onBeforeRowDetailToggle;\r\n    /** When Row comes back to Viewport Range, we need to redraw the View */\r\n    private onRowBackToViewportRange;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmEA;"}