{"version":3,"file":"contextMenuExtension.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/extensions/contextMenuExtension.d.ts"],"sourcesContent":["import { TranslateService } from '@ngx-translate/core';\r\nimport { Extension, SlickEventHandler } from '../models/index';\r\nimport { ExtensionUtility } from './extensionUtility';\r\nimport { SharedService } from '../services/shared.service';\r\nimport { ExportService } from '../services/export.service';\r\nimport { ExcelExportService } from '../services/excelExport.service';\r\nexport declare class ContextMenuExtension implements Extension {\r\n    private excelExportService;\r\n    private exportService;\r\n    private extensionUtility;\r\n    private sharedService;\r\n    private translate;\r\n    private _addon;\r\n    private _eventHandler;\r\n    private _userOriginalContextMenu;\r\n    constructor(excelExportService: ExcelExportService, exportService: ExportService, extensionUtility: ExtensionUtility, sharedService: SharedService, translate: TranslateService);\r\n    readonly eventHandler: SlickEventHandler;\r\n    dispose(): void;\r\n    /** Get the instance of the SlickGrid addon (control or plugin). */\r\n    getAddonInstance(): any;\r\n    /**\r\n     * Create the Action Cell Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)\r\n     * @param grid\r\n     * @param dataView\r\n     * @param columnDefinitions\r\n     */\r\n    register(): any;\r\n    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */\r\n    translateContextMenu(): void;\r\n    /** Create Context Menu with Custom Commands (copy cell value, export) */\r\n    private addMenuCustomCommands;\r\n    /**\r\n     * First get the value, if \"exportWithFormatter\" is set then we'll use the formatter output\r\n     * Then we create the DOM trick to copy a text value by creating a fake <div> that is not shown to the user\r\n     * and from there we can call the execCommand 'copy' command and expect the value to be in clipboard\r\n     * @param args\r\n     */\r\n    private copyToClipboard;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA;"}