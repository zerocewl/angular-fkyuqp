{"version":3,"file":"extension.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/extension.service.d.ts"],"sourcesContent":["import 'slickgrid/plugins/slick.cellrangedecorator';\r\nimport 'slickgrid/plugins/slick.cellrangeselector';\r\nimport 'slickgrid/plugins/slick.cellselectionmodel';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { Column, ExtensionModel, ExtensionName, GridOption } from '../models/index';\r\nimport { AutoTooltipExtension, CellExternalCopyManagerExtension, CellMenuExtension, CheckboxSelectorExtension, ColumnPickerExtension, ContextMenuExtension, DraggableGroupingExtension, GridMenuExtension, GroupItemMetaProviderExtension, HeaderButtonExtension, HeaderMenuExtension, RowDetailViewExtension, RowMoveManagerExtension, RowSelectionExtension } from '../extensions/index';\r\nimport { SharedService } from './shared.service';\r\nexport declare class ExtensionService {\r\n    private autoTooltipExtension;\r\n    private cellExternalCopyExtension;\r\n    private cellMenuExtension;\r\n    private checkboxSelectorExtension;\r\n    private columnPickerExtension;\r\n    private contextMenuExtension;\r\n    private draggableGroupingExtension;\r\n    private gridMenuExtension;\r\n    private groupItemMetaExtension;\r\n    private headerButtonExtension;\r\n    private headerMenuExtension;\r\n    private rowDetailViewExtension;\r\n    private rowMoveManagerExtension;\r\n    private rowSelectionExtension;\r\n    private sharedService;\r\n    private translate;\r\n    private _extensionCreatedList;\r\n    private _extensionList;\r\n    constructor(autoTooltipExtension: AutoTooltipExtension, cellExternalCopyExtension: CellExternalCopyManagerExtension, cellMenuExtension: CellMenuExtension, checkboxSelectorExtension: CheckboxSelectorExtension, columnPickerExtension: ColumnPickerExtension, contextMenuExtension: ContextMenuExtension, draggableGroupingExtension: DraggableGroupingExtension, gridMenuExtension: GridMenuExtension, groupItemMetaExtension: GroupItemMetaProviderExtension, headerButtonExtension: HeaderButtonExtension, headerMenuExtension: HeaderMenuExtension, rowDetailViewExtension: RowDetailViewExtension, rowMoveManagerExtension: RowMoveManagerExtension, rowSelectionExtension: RowSelectionExtension, sharedService: SharedService, translate: TranslateService);\r\n    /** Dispose of all the controls & plugins */\r\n    dispose(): void;\r\n    /** Get all columns (includes visible and non-visible) */\r\n    getAllColumns(): Column[];\r\n    /** Get only visible columns */\r\n    getVisibleColumns(): Column[];\r\n    /** Get all Extensions */\r\n    getAllExtensions(): ExtensionModel[];\r\n    /**\r\n     * Get an Extension by it's name\r\n     *  @param name\r\n     */\r\n    getExtensionByName(name: ExtensionName): ExtensionModel | undefined;\r\n    /**\r\n     * Get the instance of the SlickGrid addon (control or plugin).\r\n     * This is the raw addon coming directly from SlickGrid itself, not to confuse with Angular-Slickgrid extension\r\n     *  @param name\r\n     */\r\n    getSlickgridAddonInstance(name: ExtensionName): any;\r\n    /** Auto-resize all the column in the grid to fit the grid width */\r\n    autoResizeColumns(): void;\r\n    /** Bind/Create different Controls or Plugins after the Grid is created */\r\n    bindDifferentExtensions(): void;\r\n    /**\r\n     * Bind/Create certain plugins before the Grid creation, else they might behave oddly.\r\n     * Mostly because the column definitions might change after the grid creation\r\n     * @param columnDefinitions\r\n     * @param options\r\n     */\r\n    createExtensionsBeforeGridCreation(columnDefinitions: Column[], options: GridOption): void;\r\n    /** Hide a column from the grid */\r\n    hideColumn(column: Column): void;\r\n    /** Refresh the dataset through the Backend Service */\r\n    refreshBackendDataset(gridOptions?: GridOption): void;\r\n    /**\r\n     * Remove a column from the grid by it's index in the grid\r\n     * @param columns input\r\n     * @param index\r\n     */\r\n    removeColumnByIndex(columns: Column[], index: number): Column[];\r\n    /** Translate the Cell Menu titles, we need to loop through all column definition to re-translate them */\r\n    translateCellMenu(): void;\r\n    /** Translate the Column Picker and it's last 2 checkboxes */\r\n    translateColumnPicker(): void;\r\n    /** Translate the Context Menu titles, we need to loop through all column definition to re-translate them */\r\n    translateContextMenu(): void;\r\n    /**\r\n     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n     */\r\n    translateGridMenu(): void;\r\n    /**\r\n     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them\r\n     */\r\n    translateHeaderMenu(): void;\r\n    /**\r\n     * Translate manually the header titles.\r\n     * We could optionally pass a locale (that will change currently loaded locale), else it will use current locale\r\n     * @param locale to use\r\n     * @param new column definitions (optional)\r\n     */\r\n    translateColumnHeaders(locale?: boolean | string, newColumnDefinitions?: Column[]): void;\r\n    /**\r\n     * Render (or re-render) the column headers from column definitions.\r\n     * calling setColumns() will trigger a grid re-render\r\n     */\r\n    renderColumnHeaders(newColumnDefinitions?: Column[]): void;\r\n    /**\r\n     * Get an Extension that was created by calling its \"create\" method (there are only 3 extensions which uses this method)\r\n     *  @param name\r\n     */\r\n    private getCreatedExtensionByName;\r\n    /** Translate an array of items from an input key and assign translated value to the output key */\r\n    private translateItems;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6FA;"}