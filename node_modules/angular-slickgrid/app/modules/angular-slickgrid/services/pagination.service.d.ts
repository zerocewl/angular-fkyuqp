import { Subject } from 'rxjs';
import { BackendServiceApi, CurrentPagination, Pagination, ServicePagination } from '../models';
import { FilterService } from './filter.service';
import { GridService } from './grid.service';
import { SharedService } from './shared.service';
import * as ɵngcc0 from '@angular/core';
export declare class PaginationService {
    private filterService;
    private gridService;
    private sharedService;
    private _initialized;
    private _isLocalGrid;
    private _backendServiceApi;
    private _dataFrom;
    private _dataTo;
    private _itemsPerPage;
    private _pageCount;
    private _pageNumber;
    private _totalItems;
    private _availablePageSizes;
    private _eventHandler;
    private _paginationOptions;
    private _subscriptions;
    onPaginationChanged: Subject<ServicePagination>;
    onPaginationVisibilityChanged: Subject<{
        visible: boolean;
    }>;
    dataView: any;
    grid: any;
    /** Constructor */
    constructor(filterService: FilterService, gridService: GridService, sharedService: SharedService);
    paginationOptions: Pagination;
    readonly availablePageSizes: number[];
    readonly dataFrom: number;
    readonly dataTo: number;
    readonly itemsPerPage: number;
    readonly pageCount: number;
    readonly pageNumber: number;
    totalItems: number;
    init(grid: any, dataView: any, paginationOptions: Pagination, backendServiceApi?: BackendServiceApi): void;
    dispose(): void;
    getCurrentPageNumber(): number;
    getCurrentPagination(): CurrentPagination & {
        pageSizes: number[];
    };
    getFullPagination(): ServicePagination;
    getCurrentItemPerPage(): number;
    changeItemPerPage(itemsPerPage: number, event?: any): Promise<any>;
    goToFirstPage(event?: any): Promise<any>;
    goToLastPage(event?: any): Promise<any>;
    goToNextPage(event?: any): Promise<any>;
    goToPageNumber(pageNumber: number, event?: any): Promise<any>;
    goToPreviousPage(event?: any): Promise<any>;
    refreshPagination(isPageNumberReset?: boolean, triggerChangedEvent?: boolean): void;
    processOnPageChanged(pageNumber: number, event?: Event | undefined): Promise<any>;
    recalculateFromToIndexes(): void;
    /** Reset the Pagination to first page and recalculate necessary numbers */
    resetPagination(triggerChangedEvent?: boolean): void;
    /**
     * Toggle the Pagination (show/hide), it will use the visible if defined else it will automatically inverse when called without argument
     *
     * IMPORTANT NOTE:
     * The Pagination must be created on initial page load, then only after can you toggle it.
     * Basically this method WILL NOT WORK to show the Pagination if it was not there from the start.
     */
    togglePaginationVisibility(visible?: boolean): void;
    /**
     * When item is added or removed, we will refresh the numbers on the pagination however we won't trigger a backend change
     * This will have a side effect though, which is that the "To" count won't be matching the "items per page" count,
     * that is a necessary side effect to avoid triggering a backend query just to refresh the paging,
     * basically we assume that this offset is fine for the time being,
     * until user does an action which will refresh the data hence the pagination which will then become normal again
     */
    private processOnItemAddedOrRemoved;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<PaginationService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<PaginationService>;
}

//# sourceMappingURL=pagination.service.d.ts.map