import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import * as moment_ from 'moment-mini';
import { ExcelCellFormat, ExcelExportOption, FieldType } from '../models/index';
import * as ɵngcc0 from '@angular/core';
export declare class ExcelExportService {
    private translate;
    private _fileFormat;
    private _dataView;
    private _grid;
    private _locales;
    private _columnHeaders;
    private _groupedHeaders;
    private _hasGroupedItems;
    private _excelExportOptions;
    private _sheet;
    private _stylesheet;
    private _stylesheetFormats;
    private _workbook;
    onGridBeforeExportToExcel: Subject<boolean>;
    onGridAfterExportToExcel: Subject<{
        blob?: Blob;
        filename: string;
        format?: string;
    }>;
    constructor(translate: TranslateService);
    private readonly datasetIdName;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    /**
     * Initialize the Export Service
     * @param grid
     * @param gridOptions
     * @param dataView
     */
    init(grid: any, dataView: any): void;
    /**
     * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.
     * This is a WYSIWYG export to file output (What You See is What You Get)
     *
     * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,
     * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well
     *
     * Example: exportToExcel({ format: FileType.csv, delimiter: DelimiterType.comma })
     */
    exportToExcel(options: ExcelExportOption): Promise<boolean>;
    /**
     * Triggers download file with file format.
     * IE(6-10) are not supported
     * All other browsers will use plain javascript on client side to produce a file download.
     * @param options
     */
    startDownloadFile(options: {
        filename: string;
        blob: Blob;
        data: any[];
    }): void;
    /** use different Excel Stylesheet Format as per the Field Type */
    useCellFormatByFieldType(data: string | Date | moment_.Moment, fieldType: FieldType): ExcelCellFormat | string;
    private getDataOutput;
    /** Get all column headers and format them in Bold */
    private getColumnHeaderData;
    private getGroupColumnTitle;
    /**
     * Get all header titles and their keys, translate the title when required.
     * @param columns of the grid
     */
    private getColumnHeaders;
    /**
     * Get all the grid row data and return that as an output string
     */
    private pushAllGridRowDataToArray;
    /**
     * Get the data of a regular row (a row without grouping)
     * @param row
     * @param itemObj
     */
    private readRegularRowData;
    /**
     * Get the grouped title(s) and its group title formatter, for example if we grouped by salesRep, the returned result would be:: 'Sales Rep: John Dow (2 items)'
     * @param itemObj
     */
    private readGroupedTitleRow;
    /**
     * Get the grouped totals (below the regular rows), these are set by Slick Aggregators.
     * For example if we grouped by "salesRep" and we have a Sum Aggregator on "sales", then the returned output would be:: ["Sum 123$"]
     * @param itemObj
     */
    private readGroupedTotalRow;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ExcelExportService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ExcelExportService>;
}

//# sourceMappingURL=excelExport.service.d.ts.map