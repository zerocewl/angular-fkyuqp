{"version":3,"file":"filter.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/filter.service.d.ts"],"sourcesContent":["import { Subject } from 'rxjs';\r\nimport { Column, ColumnFilters, CurrentFilter, EmitterType, SlickEvent, SlickEventHandler } from './../models/index';\r\nimport { FilterFactory } from '../filters/filterFactory';\r\nimport { SharedService } from './shared.service';\r\nexport declare class FilterService {\r\n    private filterFactory;\r\n    private sharedService;\r\n    private _eventHandler;\r\n    private _isFilterFirstRender;\r\n    private _firstColumnIdRendered;\r\n    private _filtersMetadata;\r\n    private _columnFilters;\r\n    private _dataView;\r\n    private _grid;\r\n    private _onSearchChange;\r\n    private httpCancelRequests$;\r\n    onFilterChanged: Subject<CurrentFilter[]>;\r\n    onFilterCleared: Subject<boolean>;\r\n    constructor(filterFactory: FilterFactory, sharedService: SharedService);\r\n    /** Getter of the SlickGrid Event Handler */\r\n    readonly eventHandler: SlickEventHandler;\r\n    /** Getter to know if the filter was already rendered or if it was its first time render */\r\n    readonly isFilterFirstRender: boolean;\r\n    /** Getter of the SlickGrid Event Handler */\r\n    readonly onSearchChange: SlickEvent;\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    /** Getter for the Column Definitions pulled through the Grid Object */\r\n    private readonly _columnDefinitions;\r\n    init(grid: any): void;\r\n    dispose(): void;\r\n    /**\r\n     * Dispose of the filters, since it's a singleton, we don't want to affect other grids with same columns\r\n     */\r\n    disposeColumnFilters(): void;\r\n    /**\r\n     * Bind a backend filter hook to the grid\r\n     * @param grid SlickGrid Grid object\r\n     */\r\n    bindBackendOnFilter(grid: any, dataView: any): void;\r\n    /**\r\n     * Bind a local filter hook to the grid\r\n     * @param grid SlickGrid Grid object\r\n     * @param dataView\r\n     */\r\n    bindLocalOnFilter(grid: any, dataView: any): void;\r\n    clearFilterByColumnId(event: Event, columnId: number | string): void;\r\n    /** Clear the search filters (below the column titles) */\r\n    clearFilters(triggerChange?: boolean): void;\r\n    customLocalFilter(item: any, args: any): boolean;\r\n    getColumnFilters(): ColumnFilters;\r\n    getFiltersMetadata(): any[];\r\n    getCurrentLocalFilters(): CurrentFilter[];\r\n    /**\r\n     * A simple function that is binded to the subscriber and emit a change when the filter is called.\r\n     * Other services, like Pagination, can then subscribe to it.\r\n     * @param caller\r\n     */\r\n    emitFilterChanged(caller: EmitterType): void;\r\n    onBackendFilterChange(event: KeyboardEvent, args: any): Promise<void>;\r\n    /**\r\n     * When user passes an array of preset filters, we need to pre-populate each column filter searchTerm(s)\r\n     * The process is to loop through the preset filters array, find the associated column from columnDefinitions and fill in the filter object searchTerm(s)\r\n     * This is basically the same as if we would manually add searchTerm(s) to a column filter object in the column definition, but we do it programmatically.\r\n     * At the end of the day, when creating the Filter (DOM Element), it will use these searchTerm(s) so we can take advantage of that without recoding each Filter type (DOM element)\r\n     */\r\n    populateColumnFilterSearchTermPresets(filters: CurrentFilter[]): Column[];\r\n    /**\r\n     * Set the sort icons in the UI (ONLY the icons, it does not do any sorting)\r\n     * The column sort icons are not necessarily inter-connected to the sorting functionality itself,\r\n     * you can change the sorting icons separately by passing an array of columnId/sortAsc and that will change ONLY the icons\r\n     * @param sortColumns\r\n     */\r\n    setSortColumnIcons(sortColumns: {\r\n        columnId: string;\r\n        sortAsc: boolean;\r\n    }[]): void;\r\n    /**\r\n     * Update Filters dynamically just by providing an array of filter(s).\r\n     * You can also choose emit (default) a Filter Changed event that will be picked by the Grid State Service.\r\n     *\r\n     * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,\r\n     * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.\r\n     * @param filters array\r\n     * @param triggerEvent defaults to True, do we want to emit a filter changed event?\r\n     * @param triggerBackendQuery defaults to True, which will query the backend.\r\n     */\r\n    updateFilters(filters: CurrentFilter[], emitChangedEvent?: boolean, triggerBackendQuery?: boolean): void;\r\n    /** Add all created filters (from their template) to the header row section area */\r\n    private addFilterTemplateToHeaderRow;\r\n    /**\r\n     * Callback method that is called and executed by the individual Filter (DOM element),\r\n     * for example when user type in a word to search (which uses InputFilter), this Filter will execute the callback from a keyup event.\r\n     */\r\n    private callbackSearchEvent;\r\n    private updateColumnFilters;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4FA;"}