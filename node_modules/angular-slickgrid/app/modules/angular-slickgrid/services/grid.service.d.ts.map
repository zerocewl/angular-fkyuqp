{"version":3,"file":"grid.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/grid.service.d.ts"],"sourcesContent":["import { CellArgs, Column, GridServiceDeleteOption, GridServiceInsertOption, GridServiceUpdateOption, OnEventArgs } from './../models/index';\r\nimport { ExtensionService } from './extension.service';\r\nimport { FilterService } from './filter.service';\r\nimport { GridStateService } from './gridState.service';\r\nimport { SortService } from './sort.service';\r\nimport { Subject } from 'rxjs';\r\nexport declare class GridService {\r\n    private extensionService;\r\n    private filterService;\r\n    private gridStateService;\r\n    private sortService;\r\n    private _grid;\r\n    private _dataView;\r\n    onItemAdded: Subject<any>;\r\n    onItemDeleted: Subject<any>;\r\n    onItemUpdated: Subject<any>;\r\n    onItemUpserted: Subject<any>;\r\n    constructor(extensionService: ExtensionService, filterService: FilterService, gridStateService: GridStateService, sortService: SortService);\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    init(grid: any, dataView: any): void;\r\n    /** Clear all Filters & Sorts */\r\n    clearAllFiltersAndSorts(): void;\r\n    /**\r\n     * From a SlickGrid Event triggered get the Column Definition and Item Data Context\r\n     *\r\n     * For example the SlickGrid onClick will return cell arguments when subscribing to it.\r\n     * From these cellArgs, we want to get the Column Definition and Item Data\r\n     * @param cell event args\r\n     * @return object with columnDef and dataContext\r\n     */\r\n    getColumnFromEventArguments(args: CellArgs): OnEventArgs;\r\n    /** Get data item by it's row index number */\r\n    getDataItemByRowNumber(rowNumber: number): any;\r\n    /** Chain the item Metadata with our implementation of Metadata at given row index */\r\n    getItemRowMetadataToHighlight(previousItemMetadata: any): (rowNumber: number) => {\r\n        cssClasses: string;\r\n    };\r\n    /**\r\n     * Highlight then fade a row for x seconds.\r\n     * The implementation follows this SO answer: https://stackoverflow.com/a/19985148/1212166\r\n     * @param rowNumber\r\n     * @param fadeDelay\r\n     */\r\n    highlightRow(rowNumber: number | number[], fadeDelay?: number, fadeOutDelay?: number): void;\r\n    highlightRowByMetadata(rowNumber: number, fadeDelay?: number, fadeOutDelay?: number): void;\r\n    /** Get the Data Item from a grid row index */\r\n    getDataItemByRowIndex(index: number): any;\r\n    /** Get the Data Item from an array of grid row indexes */\r\n    getDataItemByRowIndexes(indexes: number[]): any[];\r\n    /** Get the currently selected row indexes */\r\n    getSelectedRows(): number[];\r\n    /** Get the currently selected rows item data */\r\n    getSelectedRowsDataItem(): any[];\r\n    /** Select the selected row by a row index */\r\n    setSelectedRow(rowIndex: number): void;\r\n    /** Set selected rows with provided array of row indexes */\r\n    setSelectedRows(rowIndexes: number[]): void;\r\n    /** Re-Render the Grid */\r\n    renderGrid(): void;\r\n    /**\r\n     * Reset the grid to it's original state (clear any filters, sorting & pagination if exists) .\r\n     * The column definitions could be passed as argument to reset (this can be used after a Grid State reset)\r\n     * The reset will clear the Filters & Sort, then will reset the Columns to their original state\r\n     */\r\n    resetGrid(columnDefinitions?: Column[]): void;\r\n    /** @deprecated please use \"addItem\" method instead */\r\n    addItemToDatagrid(item: any, shouldHighlightRow?: boolean, shouldResortGrid?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number;\r\n    /** @deprecated please use \"addItems\" method instead */\r\n    addItemsToDatagrid(items: any[], shouldHighlightRow?: boolean, shouldResortGrid?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number[];\r\n    /**\r\n     * Add an item (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n     * @return rowIndex: typically index 0 when adding to position \"top\" or a different number when adding to the \"bottom\"\r\n     */\r\n    addItem(item: any, options?: GridServiceInsertOption): number;\r\n    /**\r\n     * Add item array (data item) to the datagrid, by default it will highlight (flashing) the inserted row but we can disable it too\r\n     * @param item object arrays, which must contain unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n     */\r\n    addItems(items: any | any[], options?: GridServiceInsertOption): number[];\r\n    /** @deprecated please use \"deleteItem\" method instead */\r\n    deleteDataGridItem(item: any, shouldTriggerEvent?: boolean): void;\r\n    /** @deprecated please use \"deleteItems\" method instead */\r\n    deleteDataGridItems(items: any[], shouldTriggerEvent?: boolean): void;\r\n    /** @deprecated please use \"deleteItemById\" method instead */\r\n    deleteDataGridItemById(itemId: string | number, shouldTriggerEvent?: boolean): void;\r\n    /** @deprecated please use \"deleteItemByIds\" method instead */\r\n    deleteDataGridItemByIds(itemIds: number[] | string[], shouldTriggerEvent?: boolean): void;\r\n    /**\r\n     * Delete an existing item from the datagrid (dataView)\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n     * @return item id deleted\r\n     */\r\n    deleteItem(item: any, options?: GridServiceDeleteOption): number | string;\r\n    /**\r\n     * Delete an array of existing items from the datagrid\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n     * @return item id deleted\r\n     */\r\n    deleteItems(items: any | any[], options?: GridServiceDeleteOption): number[] | string[];\r\n    /**\r\n     * Delete an existing item from the datagrid (dataView) by it's id\r\n     * @param itemId: item unique id\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n     * @return item id deleted\r\n     */\r\n    deleteItemById(itemId: string | number, options?: GridServiceDeleteOption): number | string;\r\n    /**\r\n     * Delete an array of existing items from the datagrid\r\n     * @param itemIds array of item unique IDs\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (triggerEvent)\r\n     */\r\n    deleteItemByIds(itemIds: number[] | string[], options?: GridServiceDeleteOption): number[] | string[];\r\n    /** @deprecated please use \"updateItem\" method instead */\r\n    updateDataGridItem(item: any, shouldHighlightRow?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number;\r\n    /** @deprecated please use \"updateItems\" method instead */\r\n    updateDataGridItems(items: any | any[], shouldHighlightRow?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number[];\r\n    /** @deprecated please use \"updateItemById\" method instead */\r\n    updateDataGridItemById(itemId: number | string, item: any, shouldHighlightRow?: boolean, shouldTriggerEvent?: boolean, shouldSelectRow?: boolean): number;\r\n    /**\r\n     * Update an existing item with new properties inside the datagrid\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)\r\n     * @return grid row index\r\n     */\r\n    updateItem(item: any, options?: GridServiceUpdateOption): number;\r\n    /**\r\n     * Update an array of existing items with new properties inside the datagrid\r\n     * @param item object arrays, which must contain unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)\r\n     * @return grid row indexes\r\n     */\r\n    updateItems(items: any | any[], options?: GridServiceUpdateOption): number[];\r\n    /**\r\n     * Update an existing item in the datagrid by it's id and new properties\r\n     * @param itemId: item unique id\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, selectRow, triggerEvent)\r\n     * @return grid row number\r\n     */\r\n    updateItemById(itemId: number | string, item: any, options?: GridServiceUpdateOption): number;\r\n    /**\r\n     * Insert a row into the grid if it doesn't already exist or update if it does.\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n     */\r\n    upsertItem(item: any, options?: GridServiceInsertOption): {\r\n        added: number;\r\n        updated: number;\r\n    };\r\n    /**\r\n     * Update an array of existing items with new properties inside the datagrid\r\n     * @param item object arrays, which must contain unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n     * @return row numbers in the grid\r\n     */\r\n    upsertItems(items: any | any[], options?: GridServiceInsertOption): {\r\n        added: number;\r\n        updated: number;\r\n    }[];\r\n    /**\r\n     * Update an existing item in the datagrid by it's id and new properties\r\n     * @param itemId: item unique id\r\n     * @param item object which must contain a unique \"id\" property and any other suitable properties\r\n     * @param options: provide the possibility to do certain actions after or during the upsert (highlightRow, resortGrid, selectRow, triggerEvent)\r\n     * @return grid row number in the grid\r\n     */\r\n    upsertItemById(itemId: number | string, item: any, options?: GridServiceInsertOption): {\r\n        added: number;\r\n        updated: number;\r\n    };\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;AAMA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0KA;"}