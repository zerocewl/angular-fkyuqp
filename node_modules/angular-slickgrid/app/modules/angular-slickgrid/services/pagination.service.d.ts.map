{"version":3,"file":"pagination.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/pagination.service.d.ts"],"sourcesContent":["import { Subject } from 'rxjs';\r\nimport { BackendServiceApi, CurrentPagination, Pagination, ServicePagination } from '../models';\r\nimport { FilterService } from './filter.service';\r\nimport { GridService } from './grid.service';\r\nimport { SharedService } from './shared.service';\r\nexport declare class PaginationService {\r\n    private filterService;\r\n    private gridService;\r\n    private sharedService;\r\n    private _initialized;\r\n    private _isLocalGrid;\r\n    private _backendServiceApi;\r\n    private _dataFrom;\r\n    private _dataTo;\r\n    private _itemsPerPage;\r\n    private _pageCount;\r\n    private _pageNumber;\r\n    private _totalItems;\r\n    private _availablePageSizes;\r\n    private _eventHandler;\r\n    private _paginationOptions;\r\n    private _subscriptions;\r\n    onPaginationChanged: Subject<ServicePagination>;\r\n    onPaginationVisibilityChanged: Subject<{\r\n        visible: boolean;\r\n    }>;\r\n    dataView: any;\r\n    grid: any;\r\n    /** Constructor */\r\n    constructor(filterService: FilterService, gridService: GridService, sharedService: SharedService);\r\n    paginationOptions: Pagination;\r\n    readonly availablePageSizes: number[];\r\n    readonly dataFrom: number;\r\n    readonly dataTo: number;\r\n    readonly itemsPerPage: number;\r\n    readonly pageCount: number;\r\n    readonly pageNumber: number;\r\n    totalItems: number;\r\n    init(grid: any, dataView: any, paginationOptions: Pagination, backendServiceApi?: BackendServiceApi): void;\r\n    dispose(): void;\r\n    getCurrentPageNumber(): number;\r\n    getCurrentPagination(): CurrentPagination & {\r\n        pageSizes: number[];\r\n    };\r\n    getFullPagination(): ServicePagination;\r\n    getCurrentItemPerPage(): number;\r\n    changeItemPerPage(itemsPerPage: number, event?: any): Promise<any>;\r\n    goToFirstPage(event?: any): Promise<any>;\r\n    goToLastPage(event?: any): Promise<any>;\r\n    goToNextPage(event?: any): Promise<any>;\r\n    goToPageNumber(pageNumber: number, event?: any): Promise<any>;\r\n    goToPreviousPage(event?: any): Promise<any>;\r\n    refreshPagination(isPageNumberReset?: boolean, triggerChangedEvent?: boolean): void;\r\n    processOnPageChanged(pageNumber: number, event?: Event | undefined): Promise<any>;\r\n    recalculateFromToIndexes(): void;\r\n    /** Reset the Pagination to first page and recalculate necessary numbers */\r\n    resetPagination(triggerChangedEvent?: boolean): void;\r\n    /**\r\n     * Toggle the Pagination (show/hide), it will use the visible if defined else it will automatically inverse when called without argument\r\n     *\r\n     * IMPORTANT NOTE:\r\n     * The Pagination must be created on initial page load, then only after can you toggle it.\r\n     * Basically this method WILL NOT WORK to show the Pagination if it was not there from the start.\r\n     */\r\n    togglePaginationVisibility(visible?: boolean): void;\r\n    /**\r\n     * When item is added or removed, we will refresh the numbers on the pagination however we won't trigger a backend change\r\n     * This will have a side effect though, which is that the \"To\" count won't be matching the \"items per page\" count,\r\n     * that is a necessary side effect to avoid triggering a backend query just to refresh the paging,\r\n     * basically we assume that this offset is fine for the time being,\r\n     * until user does an action which will refresh the data hence the pagination which will then become normal again\r\n     */\r\n    private processOnItemAddedOrRemoved;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoEA;"}