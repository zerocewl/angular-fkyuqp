{"version":3,"file":"graphql.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/graphql.service.d.ts"],"sourcesContent":["import { BackendService, Column, ColumnFilters, ColumnSort, CurrentFilter, CurrentPagination, CurrentSorter, FilterChangedArgs, GraphqlCursorPaginationOption, GraphqlDatasetFilter, GraphqlPaginationOption, GraphqlServiceOption, MultiColumnSort, Pagination, PaginationChangedArgs, SortChangedArgs } from './../models/index';\r\nexport declare class GraphqlService implements BackendService {\r\n    private _currentFilters;\r\n    private _currentPagination;\r\n    private _currentSorters;\r\n    private _columnDefinitions;\r\n    private _grid;\r\n    private _datasetIdPropName;\r\n    options: GraphqlServiceOption;\r\n    pagination: Pagination | undefined;\r\n    defaultPaginationOptions: GraphqlPaginationOption | GraphqlCursorPaginationOption;\r\n    /** Getter for the Column Definitions */\r\n    readonly columnDefinitions: Column[];\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    /** Initialization of the service, which acts as a constructor */\r\n    init(serviceOptions?: GraphqlServiceOption, pagination?: Pagination, grid?: any): void;\r\n    /**\r\n     * Build the GraphQL query, since the service include/exclude cursor, the output query will be different.\r\n     * @param serviceOptions GraphqlServiceOption\r\n     */\r\n    buildQuery(): string;\r\n    /**\r\n     * From an input array of strings, we want to build a GraphQL query string.\r\n     * The process has to take the dot notation and parse it into a valid GraphQL query\r\n     * Following this SO answer https://stackoverflow.com/a/47705476/1212166\r\n     *\r\n     * INPUT\r\n     *  ['firstName', 'lastName', 'billing.address.street', 'billing.address.zip']\r\n     * OUTPUT\r\n     * firstName, lastName, billing{address{street, zip}}\r\n     * @param inputArray\r\n     */\r\n    buildFilterQuery(inputArray: string[]): string;\r\n    clearFilters(): void;\r\n    clearSorters(): void;\r\n    /**\r\n     * Get an initialization of Pagination options\r\n     * @return Pagination Options\r\n     */\r\n    getInitPaginationOptions(): GraphqlDatasetFilter;\r\n    /** Get the GraphQL dataset name */\r\n    getDatasetName(): string;\r\n    /** Get the Filters that are currently used by the grid */\r\n    getCurrentFilters(): ColumnFilters | CurrentFilter[];\r\n    /** Get the Pagination that is currently used by the grid */\r\n    getCurrentPagination(): CurrentPagination;\r\n    /** Get the Sorters that are currently used by the grid */\r\n    getCurrentSorters(): CurrentSorter[];\r\n    resetPaginationOptions(): void;\r\n    updateOptions(serviceOptions?: Partial<GraphqlServiceOption>): void;\r\n    processOnFilterChanged(event: Event, args: FilterChangedArgs): string;\r\n    processOnPaginationChanged(event: Event, args: PaginationChangedArgs): string;\r\n    processOnSortChanged(event: Event, args: SortChangedArgs | ColumnSort | MultiColumnSort): string;\r\n    /**\r\n     * loop through all columns to inspect filters & update backend service filteringOptions\r\n     * @param columnFilters\r\n     */\r\n    updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically: boolean): void;\r\n    /**\r\n     * Update the pagination component with it's new page number and size\r\n     * @param newPage\r\n     * @param pageSize\r\n     */\r\n    updatePagination(newPage: number, pageSize: number): void;\r\n    /**\r\n     * loop through all columns to inspect sorters & update backend service sortingOptions\r\n     * @param columnFilters\r\n     */\r\n    updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]): void;\r\n    /**\r\n     * A function which takes an input string and removes double quotes only\r\n     * on certain fields are identified as GraphQL enums (except fields with dot notation)\r\n     * For example let say we identified (\"direction:\", \"sort\") as word which are GraphQL enum fields\r\n     * then the result will be:\r\n     * FROM\r\n     * query { users (orderBy:[{field:\"firstName\", direction:\"ASC\"} }]) }\r\n     * TO\r\n     * query { users (orderBy:[{field: firstName, direction: ASC}})}\r\n     *\r\n     * EXCEPTIONS (fields with dot notation \".\" which are inside a \"field:\")\r\n     * these fields will keep double quotes while everything else will be stripped of double quotes\r\n     * query { users (orderBy:[{field:\"billing.street.name\", direction: \"ASC\"} }\r\n     * TO\r\n     * query { users (orderBy:[{field:\"billing.street.name\", direction: ASC}}\r\n     * @param inputStr input string\r\n     * @param enumSearchWords array of enum words to filter\r\n     * @returns outputStr output string\r\n     */\r\n    trimDoubleQuotesOnEnumField(inputStr: string, enumSearchWords: string[], keepArgumentFieldDoubleQuotes: boolean): string;\r\n    /**\r\n     * Cast provided filters (could be in multiple formats) into an array of CurrentFilter\r\n     * @param columnFilters\r\n     */\r\n    private castFilterToColumnFilters;\r\n}\r\n"],"names":[],"mappings":"AAAA;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA;"}