{"version":3,"file":"excelExport.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/excelExport.service.d.ts"],"sourcesContent":["import { TranslateService } from '@ngx-translate/core';\r\nimport { Subject } from 'rxjs';\r\nimport * as moment_ from 'moment-mini';\r\nimport { ExcelCellFormat, ExcelExportOption, FieldType } from '../models/index';\r\nexport declare class ExcelExportService {\r\n    private translate;\r\n    private _fileFormat;\r\n    private _dataView;\r\n    private _grid;\r\n    private _locales;\r\n    private _columnHeaders;\r\n    private _groupedHeaders;\r\n    private _hasGroupedItems;\r\n    private _excelExportOptions;\r\n    private _sheet;\r\n    private _stylesheet;\r\n    private _stylesheetFormats;\r\n    private _workbook;\r\n    onGridBeforeExportToExcel: Subject<boolean>;\r\n    onGridAfterExportToExcel: Subject<{\r\n        blob?: Blob;\r\n        filename: string;\r\n        format?: string;\r\n    }>;\r\n    constructor(translate: TranslateService);\r\n    private readonly datasetIdName;\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    /**\r\n     * Initialize the Export Service\r\n     * @param grid\r\n     * @param gridOptions\r\n     * @param dataView\r\n     */\r\n    init(grid: any, dataView: any): void;\r\n    /**\r\n     * Function to export the Grid result to an Excel CSV format using javascript for it to produce the CSV file.\r\n     * This is a WYSIWYG export to file output (What You See is What You Get)\r\n     *\r\n     * NOTES: The column position needs to match perfectly the JSON Object position because of the way we are pulling the data,\r\n     * which means that if any column(s) got moved in the UI, it has to be reflected in the JSON array output as well\r\n     *\r\n     * Example: exportToExcel({ format: FileType.csv, delimiter: DelimiterType.comma })\r\n     */\r\n    exportToExcel(options: ExcelExportOption): Promise<boolean>;\r\n    /**\r\n     * Triggers download file with file format.\r\n     * IE(6-10) are not supported\r\n     * All other browsers will use plain javascript on client side to produce a file download.\r\n     * @param options\r\n     */\r\n    startDownloadFile(options: {\r\n        filename: string;\r\n        blob: Blob;\r\n        data: any[];\r\n    }): void;\r\n    /** use different Excel Stylesheet Format as per the Field Type */\r\n    useCellFormatByFieldType(data: string | Date | moment_.Moment, fieldType: FieldType): ExcelCellFormat | string;\r\n    private getDataOutput;\r\n    /** Get all column headers and format them in Bold */\r\n    private getColumnHeaderData;\r\n    private getGroupColumnTitle;\r\n    /**\r\n     * Get all header titles and their keys, translate the title when required.\r\n     * @param columns of the grid\r\n     */\r\n    private getColumnHeaders;\r\n    /**\r\n     * Get all the grid row data and return that as an output string\r\n     */\r\n    private pushAllGridRowDataToArray;\r\n    /**\r\n     * Get the data of a regular row (a row without grouping)\r\n     * @param row\r\n     * @param itemObj\r\n     */\r\n    private readRegularRowData;\r\n    /**\r\n     * Get the grouped title(s) and its group title formatter, for example if we grouped by salesRep, the returned result would be:: 'Sales Rep: John Dow (2 items)'\r\n     * @param itemObj\r\n     */\r\n    private readGroupedTitleRow;\r\n    /**\r\n     * Get the grouped totals (below the regular rows), these are set by Slick Aggregators.\r\n     * For example if we grouped by \"salesRep\" and we have a Sum Aggregator on \"sales\", then the returned output would be:: [\"Sum 123$\"]\r\n     * @param itemObj\r\n     */\r\n    private readGroupedTotalRow;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoFA;"}