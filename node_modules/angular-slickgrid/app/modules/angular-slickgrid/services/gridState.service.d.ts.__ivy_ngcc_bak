import { Column, CurrentColumn, CurrentFilter, CurrentPagination, CurrentRowSelection, CurrentSorter, GridState, GridStateChange } from './../models/index';
import { ExtensionService } from './extension.service';
import { FilterService } from './filter.service';
import { SortService } from './sort.service';
import { Subject } from 'rxjs';
import { SharedService } from './shared.service';
export declare class GridStateService {
    private extensionService;
    private filterService;
    private sharedService;
    private sortService;
    private _eventHandler;
    private _columns;
    private _currentColumns;
    private _dataView;
    private _grid;
    private _subscriptions;
    private _selectedRowDataContextIds;
    private _selectedFilteredRowDataContextIds;
    private _wasRecheckedAfterPageChange;
    onGridStateChanged: Subject<GridStateChange>;
    constructor(extensionService: ExtensionService, filterService: FilterService, sharedService: SharedService, sortService: SortService);
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    private readonly datasetIdPropName;
    /** Getter of the selected data context object IDs */
    /** Setter of the selected data context object IDs */
    selectedRowDataContextIds: Array<number | string> | undefined;
    /**
     * Initialize the Grid State Service
     * @param grid
     */
    init(grid: any, dataView: any): void;
    /** Dispose of all the SlickGrid & Angular subscriptions */
    dispose(): void;
    /**
     * Get the current grid state (filters/sorters/pagination)
     * @return grid state
     */
    getCurrentGridState(args?: {
        requestRefreshRowFilteredRow?: boolean;
    }): GridState;
    /**
     * Get the Columns (and their state: visibility/position) that are currently applied in the grid
     * @return current columns
     */
    getColumns(): Column[];
    /**
     * From an array of Grid Column Definitions, get the associated Current Columns
     * @param gridColumns
     */
    getAssociatedCurrentColumns(gridColumns: Column[]): CurrentColumn[];
    /**
     * From an array of Current Columns, get the associated Grid Column Definitions
     * @param grid
     * @param currentColumns
     */
    getAssociatedGridColumns(grid: any, currentColumns: CurrentColumn[]): Column[];
    /**
     * Get the Columns (and their state: visibility/position) that are currently applied in the grid
     * @return current columns
     */
    getCurrentColumns(): CurrentColumn[];
    /**
     * Get the Filters (and their state, columnId, searchTerm(s)) that are currently applied in the grid
     * @return current filters
     */
    getCurrentFilters(): CurrentFilter[] | null;
    /**
     * Get current Pagination (and it's state, pageNumber, pageSize) that are currently applied in the grid
     * @return current pagination state
     */
    getCurrentPagination(): CurrentPagination | null;
    /**
     * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid
     * @return current sorters
     */
    getCurrentRowSelections(requestRefreshFilteredRow?: boolean): CurrentRowSelection | null;
    /**
     * Get the current Sorters (and their state, columnId, direction) that are currently applied in the grid
     * @return current sorters
     */
    getCurrentSorters(): CurrentSorter[] | null;
    /** Check whether the row selection needs to be preserved */
    needToPreserveRowSelection(): boolean;
    resetColumns(columnDefinitions?: Column[]): void;
    /** if we use Row Selection or the Checkbox Selector, we need to reset any selection */
    resetRowSelectionWhenRequired(): void;
    /**
     * Subscribe to all necessary SlickGrid or Service Events that deals with a Grid change,
     * when triggered, we will publish a Grid State Event with current Grid State
     */
    subscribeToAllGridChanges(grid: any): void;
    /**
     * Bind a SlickGrid Extension Event to a Grid State change event
     * @param extension name
     * @param grid
     */
    private bindExtensionAddonEventToGridStateChange;
    /**
     * Bind a Grid Event (of Column changes) to a Grid State change event
     * @param event name
     * @param grid
     */
    private bindSlickGridColumnChangeEventToGridStateChange;
    /**
     * Bind a Grid Event of Row Selection change to a Grid State change event
     * For the row selection, we can't just use the getSelectedRows() since this will only return the visible rows shown in the UI which is not enough.
     * The process is much more complex, what we have to do instead is the following
     * 1. when changing a row selection, we'll add the new selection if it's not yet in the global array of selected IDs
     * 2. when deleting a row selection, we'll remove the selection from our global array of selected IDs (unless it came from a page change)
     * 3. if we use Pagination and we change page, we'll keep track with a flag (this flag will be used to skip any deletion when we're changing page)
     * 4. after the Page or DataView is changed or updated, we'll do an extra (and delayed) check to make sure that what we have in our global array of selected IDs is displayed on screen
     */
    private bindSlickGridRowSelectionToGridStateChange;
    /** Check wether the grid has the Row Selection enabled */
    private hasRowSelectionEnabled;
    private reEvaluateRowSelectionAfterFilterChange;
    /** When a Filter is triggered or when user request it, we will refresh the filtered selection array and return it */
    private refreshFilteredRowSelections;
}
