{"version":3,"file":"grid-odata.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/grid-odata.service.d.ts"],"sourcesContent":["import { BackendService, Column, ColumnFilters, ColumnSort, CurrentFilter, CurrentPagination, CurrentSorter, FilterChangedArgs, OdataOption, Pagination, PaginationChangedArgs, SortChangedArgs } from './../models/index';\r\nimport { OdataQueryBuilderService } from './odataQueryBuilder.service';\r\nexport declare class GridOdataService implements BackendService {\r\n    private _currentFilters;\r\n    private _currentPagination;\r\n    private _currentSorters;\r\n    private _columnDefinitions;\r\n    private _grid;\r\n    private _odataService;\r\n    options: Partial<OdataOption>;\r\n    pagination: Pagination | undefined;\r\n    defaultOptions: OdataOption;\r\n    /** Getter for the Column Definitions */\r\n    readonly columnDefinitions: Column[];\r\n    /** Getter for the Odata Service */\r\n    readonly odataService: OdataQueryBuilderService;\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    constructor();\r\n    init(serviceOptions: Partial<OdataOption>, pagination?: Pagination, grid?: any): void;\r\n    buildQuery(): string;\r\n    clearFilters(): void;\r\n    clearSorters(): void;\r\n    updateOptions(serviceOptions?: Partial<OdataOption>): void;\r\n    removeColumnFilter(fieldName: string): void;\r\n    /** Get the Filters that are currently used by the grid */\r\n    getCurrentFilters(): CurrentFilter[];\r\n    /** Get the Pagination that is currently used by the grid */\r\n    getCurrentPagination(): CurrentPagination;\r\n    /** Get the Sorters that are currently used by the grid */\r\n    getCurrentSorters(): CurrentSorter[];\r\n    /**\r\n     * Mapper for mathematical operators (ex.: <= is \"le\", > is \"gt\")\r\n     * @param string operator\r\n     * @returns string map\r\n     */\r\n    mapOdataOperator(operator: string): string;\r\n    resetPaginationOptions(): void;\r\n    saveColumnFilter(fieldName: string, value: string, terms?: any[]): void;\r\n    processOnFilterChanged(event: Event, args: FilterChangedArgs): string;\r\n    processOnPaginationChanged(event: Event, args: PaginationChangedArgs): string;\r\n    processOnSortChanged(event: Event, args: SortChangedArgs): string;\r\n    /**\r\n     * loop through all columns to inspect filters & update backend service filters\r\n     * @param columnFilters\r\n     */\r\n    updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically?: boolean): void;\r\n    /**\r\n     * Update the pagination component with it's new page number and size\r\n     * @param newPage\r\n     * @param pageSize\r\n     */\r\n    updatePagination(newPage: number, pageSize: number): void;\r\n    /**\r\n     * loop through all columns to inspect sorters & update backend service orderBy\r\n     * @param columnFilters\r\n     */\r\n    updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]): string;\r\n    /**\r\n     * Cast provided filters (could be in multiple format) into an array of ColumnFilter\r\n     * @param columnFilters\r\n     */\r\n    private castFilterToColumnFilters;\r\n    private odataQueryVersionWrapper;\r\n    /**\r\n     * Filter by a search date, the searchTerms might be a single value or range of dates (2 searchTerms OR 1 string separated by 2 dots \"date1..date2\")\r\n     * Also depending on the OData version number, the output will be different, previous version must wrap dates with DateTime\r\n     * - version 2-3:: Finish gt DateTime'2019-08-12T00:00:00Z'\r\n     * - version 4:: Finish gt 2019-08-12T00:00:00Z\r\n     */\r\n    private filterBySearchDate;\r\n    /**\r\n     * Filter by a range of searchTerms (2 searchTerms OR 1 string separated by 2 dots \"value1..value2\")\r\n     */\r\n    private filterBySearchTermRange;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyEA;"}