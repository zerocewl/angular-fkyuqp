import { BackendService, Column, ColumnFilters, ColumnSort, CurrentFilter, CurrentPagination, CurrentSorter, FilterChangedArgs, OdataOption, Pagination, PaginationChangedArgs, SortChangedArgs } from './../models/index';
import { OdataQueryBuilderService } from './odataQueryBuilder.service';
import * as ɵngcc0 from '@angular/core';
export declare class GridOdataService implements BackendService {
    private _currentFilters;
    private _currentPagination;
    private _currentSorters;
    private _columnDefinitions;
    private _grid;
    private _odataService;
    options: Partial<OdataOption>;
    pagination: Pagination | undefined;
    defaultOptions: OdataOption;
    /** Getter for the Column Definitions */
    readonly columnDefinitions: Column[];
    /** Getter for the Odata Service */
    readonly odataService: OdataQueryBuilderService;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    constructor();
    init(serviceOptions: Partial<OdataOption>, pagination?: Pagination, grid?: any): void;
    buildQuery(): string;
    clearFilters(): void;
    clearSorters(): void;
    updateOptions(serviceOptions?: Partial<OdataOption>): void;
    removeColumnFilter(fieldName: string): void;
    /** Get the Filters that are currently used by the grid */
    getCurrentFilters(): CurrentFilter[];
    /** Get the Pagination that is currently used by the grid */
    getCurrentPagination(): CurrentPagination;
    /** Get the Sorters that are currently used by the grid */
    getCurrentSorters(): CurrentSorter[];
    /**
     * Mapper for mathematical operators (ex.: <= is "le", > is "gt")
     * @param string operator
     * @returns string map
     */
    mapOdataOperator(operator: string): string;
    resetPaginationOptions(): void;
    saveColumnFilter(fieldName: string, value: string, terms?: any[]): void;
    processOnFilterChanged(event: Event, args: FilterChangedArgs): string;
    processOnPaginationChanged(event: Event, args: PaginationChangedArgs): string;
    processOnSortChanged(event: Event, args: SortChangedArgs): string;
    /**
     * loop through all columns to inspect filters & update backend service filters
     * @param columnFilters
     */
    updateFilters(columnFilters: ColumnFilters | CurrentFilter[], isUpdatedByPresetOrDynamically?: boolean): void;
    /**
     * Update the pagination component with it's new page number and size
     * @param newPage
     * @param pageSize
     */
    updatePagination(newPage: number, pageSize: number): void;
    /**
     * loop through all columns to inspect sorters & update backend service orderBy
     * @param columnFilters
     */
    updateSorters(sortColumns?: ColumnSort[], presetSorters?: CurrentSorter[]): string;
    /**
     * Cast provided filters (could be in multiple format) into an array of ColumnFilter
     * @param columnFilters
     */
    private castFilterToColumnFilters;
    private odataQueryVersionWrapper;
    /**
     * Filter by a search date, the searchTerms might be a single value or range of dates (2 searchTerms OR 1 string separated by 2 dots "date1..date2")
     * Also depending on the OData version number, the output will be different, previous version must wrap dates with DateTime
     * - version 2-3:: Finish gt DateTime'2019-08-12T00:00:00Z'
     * - version 4:: Finish gt 2019-08-12T00:00:00Z
     */
    private filterBySearchDate;
    /**
     * Filter by a range of searchTerms (2 searchTerms OR 1 string separated by 2 dots "value1..value2")
     */
    private filterBySearchTermRange;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<GridOdataService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<GridOdataService>;
}

//# sourceMappingURL=grid-odata.service.d.ts.map