import { GridOption } from './../models/index';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export interface GridDimension {
    height?: number;
    width?: number;
    heightWithPagination?: number;
}
export declare class ResizerService {
    private _fixedHeight;
    private _fixedWidth;
    private _grid;
    private _lastDimensions;
    private _timer;
    private _resizePaused;
    onGridAfterResize: Subject<GridDimension>;
    onGridBeforeResize: Subject<Event>;
    /** Getter for the Grid Options pulled through the Grid Object */
    private readonly _gridOptions;
    private readonly _gridUid;
    init(grid: any, fixedDimensions?: GridDimension): void;
    /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space
     * Options: we could also provide a % factor to resize on each height/width independently
     */
    bindAutoResizeDataGrid(newSizes?: GridDimension): any;
    /**
     * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation
     * object gridOptions
     */
    calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null;
    /**
     * Dispose function when element is destroyed
     */
    dispose(): void;
    /**
     * For some reason this only seems to happen in Chrome and is sometime miscalculated by SlickGrid measureSrollbar() method
     * When that happens we will compensate and resize the Grid Viewport to avoid seeing horizontal scrollbar
     * Most of the time it happens, it's a tiny offset calculation of usually 3px (enough to show scrollbar)
     * GitHub issue reference: https://github.com/6pac/SlickGrid/issues/275
     */
    compensateHorizontalScroll(grid: any, gridOptions: GridOption): void;
    /**
     * Return the last resize dimensions used by the service
     * @return last dimensions
     */
    getLastResizeDimensions(): GridDimension;
    /** Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to. */
    pauseResizer(isResizePaused: boolean): void;
    /** Resize the datagrid to fit the browser height & width */
    resizeGrid(delay?: number, newSizes?: GridDimension): Promise<GridDimension>;
    resizeGridCallback(newSizes: GridDimension): GridDimension;
    resizeGridWithDimensions(newSizes?: GridDimension): GridDimension;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<ResizerService>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<ResizerService>;
}

//# sourceMappingURL=resizer.service.d.ts.map