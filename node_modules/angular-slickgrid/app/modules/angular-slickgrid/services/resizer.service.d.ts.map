{"version":3,"file":"resizer.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/resizer.service.d.ts"],"sourcesContent":["import { GridOption } from './../models/index';\r\nimport { Subject } from 'rxjs';\r\nexport interface GridDimension {\r\n    height?: number;\r\n    width?: number;\r\n    heightWithPagination?: number;\r\n}\r\nexport declare class ResizerService {\r\n    private _fixedHeight;\r\n    private _fixedWidth;\r\n    private _grid;\r\n    private _lastDimensions;\r\n    private _timer;\r\n    private _resizePaused;\r\n    onGridAfterResize: Subject<GridDimension>;\r\n    onGridBeforeResize: Subject<Event>;\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    private readonly _gridUid;\r\n    init(grid: any, fixedDimensions?: GridDimension): void;\r\n    /** Bind an auto resize trigger on the datagrid, if that is enable then it will resize itself to the available space\r\n     * Options: we could also provide a % factor to resize on each height/width independently\r\n     */\r\n    bindAutoResizeDataGrid(newSizes?: GridDimension): any;\r\n    /**\r\n     * Calculate the datagrid new height/width from the available space, also consider that a % factor might be applied to calculation\r\n     * object gridOptions\r\n     */\r\n    calculateGridNewDimensions(gridOptions: GridOption): GridDimension | null;\r\n    /**\r\n     * Dispose function when element is destroyed\r\n     */\r\n    dispose(): void;\r\n    /**\r\n     * For some reason this only seems to happen in Chrome and is sometime miscalculated by SlickGrid measureSrollbar() method\r\n     * When that happens we will compensate and resize the Grid Viewport to avoid seeing horizontal scrollbar\r\n     * Most of the time it happens, it's a tiny offset calculation of usually 3px (enough to show scrollbar)\r\n     * GitHub issue reference: https://github.com/6pac/SlickGrid/issues/275\r\n     */\r\n    compensateHorizontalScroll(grid: any, gridOptions: GridOption): void;\r\n    /**\r\n     * Return the last resize dimensions used by the service\r\n     * @return last dimensions\r\n     */\r\n    getLastResizeDimensions(): GridDimension;\r\n    /** Provide the possibility to pause the resizer for some time, until user decides to re-enabled it later if he wish to. */\r\n    pauseResizer(isResizePaused: boolean): void;\r\n    /** Resize the datagrid to fit the browser height & width */\r\n    resizeGrid(delay?: number, newSizes?: GridDimension): Promise<GridDimension>;\r\n    resizeGridCallback(newSizes: GridDimension): GridDimension;\r\n    resizeGridWithDimensions(newSizes?: GridDimension): GridDimension;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA;"}