{"version":3,"file":"sort.service.d.ts","sources":["/home/subham/Documents/Projects/NodeJS/Angular9/SlickGrid/node_modules/angular-slickgrid/app/modules/angular-slickgrid/services/sort.service.d.ts"],"sourcesContent":["import { Subject } from 'rxjs';\r\nimport { ColumnSort, CurrentSorter, EmitterType, SlickEventHandler } from './../models/index';\r\nexport declare class SortService {\r\n    private _currentLocalSorters;\r\n    private _eventHandler;\r\n    private _dataView;\r\n    private _grid;\r\n    private _isBackendGrid;\r\n    private httpCancelRequests$;\r\n    onSortChanged: Subject<CurrentSorter[]>;\r\n    onSortCleared: Subject<boolean>;\r\n    constructor();\r\n    /** Getter of the SlickGrid Event Handler */\r\n    readonly eventHandler: SlickEventHandler;\r\n    /** Getter for the Grid Options pulled through the Grid Object */\r\n    private readonly _gridOptions;\r\n    /** Getter for the Column Definitions pulled through the Grid Object */\r\n    private readonly _columnDefinitions;\r\n    /**\r\n     * Bind a backend sort (single/multi) hook to the grid\r\n     * @param grid SlickGrid Grid object\r\n     * @param dataView SlickGrid DataView object\r\n     */\r\n    bindBackendOnSort(grid: any, dataView: any): void;\r\n    /**\r\n     * Bind a local sort (single/multi) hook to the grid\r\n     * @param grid SlickGrid Grid object\r\n     * @param gridOptions Grid Options object\r\n     * @param dataView\r\n     */\r\n    bindLocalOnSort(grid: any, dataView: any): void;\r\n    clearSorting(triggerQueryEvent?: boolean): void;\r\n    dispose(): void;\r\n    /**\r\n     * A simple function that is binded to the subscriber and emit a change when the sort is called.\r\n     * Other services, like Pagination, can then subscribe to it.\r\n     * @param sender\r\n     */\r\n    emitSortChanged(sender: EmitterType, currentLocalSorters?: CurrentSorter[]): void;\r\n    getCurrentLocalSorters(): CurrentSorter[];\r\n    /**\r\n     * Get current column sorts,\r\n     * If a column is passed as an argument, that will be exclusion so we won't add this column to our output array since it is already in the array.\r\n     * The usage of this method is that we want to know the sort prior to calling the next sorting command\r\n     */\r\n    getCurrentColumnSorts(excludedColumnId?: string): any;\r\n    /** Load defined Sorting (sorters) into the grid */\r\n    loadGridSorters(sorters: CurrentSorter[]): ColumnSort[];\r\n    onBackendSortChanged(event: Event, args: {\r\n        multiColumnSort?: boolean;\r\n        grid: any;\r\n        sortCols: ColumnSort[];\r\n        clearSortTriggered?: boolean;\r\n    }): void;\r\n    onLocalSortChanged(grid: any, dataView: any, sortColumns: ColumnSort[], forceReSort?: boolean): void;\r\n    sortComparer(sortColumns: ColumnSort[], dataRow1: any, dataRow2: any): number;\r\n    /**\r\n     * Update Sorting (sorters) dynamically just by providing an array of sorter(s).\r\n     * You can also choose emit (default) a Sort Changed event that will be picked by the Grid State Service.\r\n     *\r\n     * Also for backend service only, you can choose to trigger a backend query (default) or not if you wish to do it later,\r\n     * this could be useful when using updateFilters & updateSorting and you wish to only send the backend query once.\r\n     * @param sorters array\r\n     * @param triggerEvent defaults to True, do we want to emit a sort changed event?\r\n     * @param triggerBackendQuery defaults to True, which will query the backend.\r\n     */\r\n    updateSorting(sorters: CurrentSorter[], emitChangedEvent?: boolean, triggerBackendQuery?: boolean): void;\r\n}\r\n"],"names":[],"mappings":"AAAA;;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiEA;"}