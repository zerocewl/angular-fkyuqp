import * as tslib_1 from "tslib";
import { Injectable, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Constants } from '../constants';
import { EmitterType, ExtensionName, } from '../models/index';
import { FilterService } from '../services/filter.service';
import { SortService } from '../services/sort.service';
import { SharedService } from '../services/shared.service';
import { ExtensionUtility } from './extensionUtility';
let HeaderMenuExtension = class HeaderMenuExtension {
    constructor(extensionUtility, filterService, sharedService, sortService, translate) {
        this.extensionUtility = extensionUtility;
        this.filterService = filterService;
        this.sharedService = sharedService;
        this.sortService = sortService;
        this.translate = translate;
        this._eventHandler = new Slick.EventHandler();
    }
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    /**
     * Create the Header Menu and expose all the available hooks that user can subscribe (onCommand, onBeforeMenuShow, ...)
     * @param grid
     * @param dataView
     * @param columnDefinitions
     */
    register() {
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate && (!this.translate || !this.translate.instant)) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // get locales provided by user in forRoot or else use default English locales via the Constants
            this._locales = this.sharedService.gridOptions && this.sharedService.gridOptions.locales || Constants.locales;
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.headerMenu);
            this.sharedService.gridOptions.headerMenu = Object.assign({}, this.getDefaultHeaderMenuOptions(), this.sharedService.gridOptions.headerMenu);
            if (this.sharedService.gridOptions.enableHeaderMenu) {
                this.sharedService.gridOptions.headerMenu = this.addHeaderMenuCustomCommands(this.sharedService.gridOptions, this.sharedService.columnDefinitions);
            }
            this._addon = new Slick.Plugins.HeaderMenu(this.sharedService.gridOptions.headerMenu);
            this.sharedService.grid.registerPlugin(this._addon);
            // hook all events
            if (this.sharedService.grid && this.sharedService.gridOptions.headerMenu) {
                if (this.sharedService.gridOptions.headerMenu.onExtensionRegistered) {
                    this.sharedService.gridOptions.headerMenu.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onCommand, (e, args) => {
                    this.executeHeaderMenuInternalCommands(e, args);
                    if (this.sharedService.gridOptions.headerMenu && typeof this.sharedService.gridOptions.headerMenu.onCommand === 'function') {
                        this.sharedService.gridOptions.headerMenu.onCommand(e, args);
                    }
                });
                if (this.sharedService.gridOptions.headerMenu && typeof this.sharedService.gridOptions.headerMenu.onBeforeMenuShow === 'function') {
                    this._eventHandler.subscribe(this._addon.onBeforeMenuShow, (e, args) => {
                        this.sharedService.gridOptions.headerMenu.onBeforeMenuShow(e, args);
                    });
                }
                if (this.sharedService.gridOptions.headerMenu && typeof this.sharedService.gridOptions.headerMenu.onAfterMenuShow === 'function') {
                    this._eventHandler.subscribe(this._addon.onAfterMenuShow, (e, args) => {
                        this.sharedService.gridOptions.headerMenu.onAfterMenuShow(e, args);
                    });
                }
            }
            return this._addon;
        }
        return null;
    }
    /**
     * Create Header Menu with Custom Commands if user has enabled Header Menu
     * @param options
     * @param columnDefinitions
     * @return header menu
     */
    addHeaderMenuCustomCommands(options, columnDefinitions) {
        const headerMenuOptions = options.headerMenu || {};
        if (columnDefinitions && Array.isArray(columnDefinitions) && options.enableHeaderMenu) {
            columnDefinitions.forEach((columnDef) => {
                if (columnDef && !columnDef.excludeFromHeaderMenu) {
                    if (!columnDef.header || !columnDef.header.menu) {
                        columnDef.header = {
                            menu: {
                                items: []
                            }
                        };
                    }
                    const columnHeaderMenuItems = columnDef && columnDef.header && columnDef.header.menu && columnDef.header.menu.items || [];
                    // Sorting Commands
                    if (options.enableSorting && columnDef.sortable && headerMenuOptions && !headerMenuOptions.hideSortCommands) {
                        if (columnHeaderMenuItems.filter((item) => item.hasOwnProperty('command') && item.command === 'sort-asc').length === 0) {
                            columnHeaderMenuItems.push({
                                iconCssClass: headerMenuOptions.iconSortAscCommand || 'fa fa-sort-asc',
                                title: options.enableTranslate ? this.translate.instant('SORT_ASCENDING') : this._locales && this._locales.TEXT_SORT_ASCENDING,
                                command: 'sort-asc',
                                positionOrder: 50
                            });
                        }
                        if (columnHeaderMenuItems.filter((item) => item.hasOwnProperty('command') && item.command === 'sort-desc').length === 0) {
                            columnHeaderMenuItems.push({
                                iconCssClass: headerMenuOptions.iconSortDescCommand || 'fa fa-sort-desc',
                                title: options.enableTranslate ? this.translate.instant('SORT_DESCENDING') : this._locales && this._locales.TEXT_SORT_DESCENDING,
                                command: 'sort-desc',
                                positionOrder: 51
                            });
                        }
                        // add a divider (separator) between the top sort commands and the other clear commands
                        if (columnHeaderMenuItems.filter((item) => item.hasOwnProperty('command') && item.positionOrder === 52).length === 0) {
                            columnHeaderMenuItems.push({ divider: true, command: '', positionOrder: 52 });
                        }
                        if (!headerMenuOptions.hideClearSortCommand && columnHeaderMenuItems.filter((item) => item.hasOwnProperty('command') && item.command === 'clear-sort').length === 0) {
                            columnHeaderMenuItems.push({
                                iconCssClass: headerMenuOptions.iconClearSortCommand || 'fa fa-unsorted',
                                title: options.enableTranslate ? this.translate.instant('REMOVE_SORT') : this._locales && this._locales.TEXT_REMOVE_SORT,
                                command: 'clear-sort',
                                positionOrder: 54
                            });
                        }
                    }
                    // Filtering Commands
                    if (options.enableFiltering && columnDef.filterable && headerMenuOptions && !headerMenuOptions.hideFilterCommands) {
                        if (!headerMenuOptions.hideClearFilterCommand && columnHeaderMenuItems.filter((item) => item.hasOwnProperty('command') && item.command === 'clear-filter').length === 0) {
                            columnHeaderMenuItems.push({
                                iconCssClass: headerMenuOptions.iconClearFilterCommand || 'fa fa-filter',
                                title: options.enableTranslate ? this.translate.instant('REMOVE_FILTER') : this._locales && this._locales.TEXT_REMOVE_FILTER,
                                command: 'clear-filter',
                                positionOrder: 53
                            });
                        }
                    }
                    // Hide Column Command
                    if (headerMenuOptions && !headerMenuOptions.hideColumnHideCommand && columnHeaderMenuItems.filter((item) => item.hasOwnProperty('command') && item.command === 'hide').length === 0) {
                        columnHeaderMenuItems.push({
                            iconCssClass: headerMenuOptions.iconColumnHideCommand || 'fa fa-times',
                            title: options.enableTranslate ? this.translate.instant('HIDE_COLUMN') : this._locales && this._locales.TEXT_HIDE_COLUMN,
                            command: 'hide',
                            positionOrder: 55
                        });
                    }
                    this.extensionUtility.translateItems(columnHeaderMenuItems, 'titleKey', 'title');
                    this.extensionUtility.sortItems(columnHeaderMenuItems, 'positionOrder');
                }
            });
        }
        return headerMenuOptions;
    }
    /** Hide a column from the grid */
    hideColumn(column) {
        if (this.sharedService.grid && this.sharedService.grid.getColumns && this.sharedService.grid.setColumns && this.sharedService.grid.getColumnIndex) {
            const columnIndex = this.sharedService.grid.getColumnIndex(column.id);
            const currentColumns = this.sharedService.grid.getColumns();
            const visibleColumns = this.extensionUtility.arrayRemoveItemByIndex(currentColumns, columnIndex);
            this.sharedService.visibleColumns = visibleColumns;
            this.sharedService.grid.setColumns(visibleColumns);
            this.sharedService.onColumnsChanged.next(visibleColumns);
        }
    }
    /**
     * Translate the Header Menu titles, we need to loop through all column definition to re-translate them
     */
    translateHeaderMenu() {
        if (this.sharedService.gridOptions && this.sharedService.gridOptions.headerMenu) {
            this.resetHeaderMenuTranslations(this.sharedService.visibleColumns);
        }
    }
    // --
    // private functions
    // ------------------
    /** @return default Header Menu options */
    getDefaultHeaderMenuOptions() {
        return {
            autoAlignOffset: 12,
            minWidth: 140,
            hideColumnHideCommand: false,
            hideSortCommands: false,
            title: ''
        };
    }
    /**
     * Reset all the internal Menu options which have text to translate
     * @param header menu object
     */
    resetHeaderMenuTranslations(columnDefinitions) {
        columnDefinitions.forEach((columnDef) => {
            if (columnDef && columnDef.header && columnDef.header && columnDef.header.menu && columnDef.header.menu.items) {
                if (!columnDef.excludeFromHeaderMenu) {
                    const columnHeaderMenuItems = columnDef.header.menu.items || [];
                    columnHeaderMenuItems.forEach((item) => {
                        if (item.hasOwnProperty('command')) {
                            switch (item.command) {
                                case 'clear-filter':
                                    item.title = this.translate.instant('REMOVE_FILTER') || this._locales && this._locales.TEXT_REMOVE_FILTER;
                                    break;
                                case 'clear-sort':
                                    item.title = this.translate.instant('REMOVE_SORT') || this._locales && this._locales.TEXT_REMOVE_SORT;
                                    break;
                                case 'sort-asc':
                                    item.title = this.translate.instant('SORT_ASCENDING') || this._locales && this._locales.TEXT_SORT_ASCENDING;
                                    break;
                                case 'sort-desc':
                                    item.title = this.translate.instant('SORT_DESCENDING') || this._locales && this._locales.TEXT_SORT_DESCENDING;
                                    break;
                                case 'hide':
                                    item.title = this.translate.instant('HIDE_COLUMN') || this._locales && this._locales.TEXT_HIDE_COLUMN;
                                    break;
                            }
                        }
                        // re-translate if there's a "titleKey"
                        if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableTranslate) {
                            this.extensionUtility.translateItems(columnHeaderMenuItems, 'titleKey', 'title');
                        }
                    });
                }
            }
        });
    }
    /** Clear the Filter on the current column (if it's actually filtered) */
    clearColumnFilter(event, args) {
        if (args && args.column) {
            this.filterService.clearFilterByColumnId(event, args.column.id);
        }
    }
    /** Clear the Sort on the current column (if it's actually sorted) */
    clearColumnSort(event, args) {
        if (args && args.column && this.sharedService) {
            // get current sorted columns, prior to calling the new column sort
            const allSortedCols = this.sortService.getCurrentColumnSorts();
            const sortedColsWithoutCurrent = this.sortService.getCurrentColumnSorts(args.column.id + '');
            if (Array.isArray(allSortedCols) && Array.isArray(sortedColsWithoutCurrent) && allSortedCols.length !== sortedColsWithoutCurrent.length) {
                if (this.sharedService.gridOptions && this.sharedService.gridOptions.backendServiceApi) {
                    this.sortService.onBackendSortChanged(event, { multiColumnSort: true, sortCols: sortedColsWithoutCurrent, grid: this.sharedService.grid });
                }
                else if (this.sharedService.dataView) {
                    this.sortService.onLocalSortChanged(this.sharedService.grid, this.sharedService.dataView, sortedColsWithoutCurrent, true);
                }
                else {
                    // when using customDataView, we will simply send it as a onSort event with notify
                    const isMultiSort = this.sharedService.gridOptions && this.sharedService.gridOptions.multiColumnSort || false;
                    const sortOutput = isMultiSort ? sortedColsWithoutCurrent : sortedColsWithoutCurrent[0];
                    args.grid.onSort.notify(sortOutput);
                }
                // update the this.sharedService.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI
                const updatedSortColumns = sortedColsWithoutCurrent.map((col) => {
                    return {
                        columnId: col && col.sortCol && col.sortCol.id,
                        sortAsc: col && col.sortAsc,
                        sortCol: col && col.sortCol,
                    };
                });
                this.sharedService.grid.setSortColumns(updatedSortColumns); // add sort icon in UI
            }
        }
    }
    /** Execute the Header Menu Commands that was triggered by the onCommand subscribe */
    executeHeaderMenuInternalCommands(event, args) {
        if (args && args.command) {
            switch (args.command) {
                case 'hide':
                    this.hideColumn(args.column);
                    if (this.sharedService.gridOptions && this.sharedService.gridOptions.enableAutoSizeColumns) {
                        this.sharedService.grid.autosizeColumns();
                    }
                    break;
                case 'clear-filter':
                    this.clearColumnFilter(event, args);
                    break;
                case 'clear-sort':
                    this.clearColumnSort(event, args);
                    break;
                case 'sort-asc':
                case 'sort-desc':
                    const isSortingAsc = (args.command === 'sort-asc');
                    this.sortColumn(event, args, isSortingAsc);
                    break;
                default:
                    break;
            }
        }
    }
    /** Sort the current column */
    sortColumn(event, args, isSortingAsc = true) {
        if (args && args.column) {
            // get previously sorted columns
            const sortedColsWithoutCurrent = this.sortService.getCurrentColumnSorts(args.column.id + '');
            let emitterType;
            // add to the column array, the column sorted by the header menu
            sortedColsWithoutCurrent.push({ sortCol: args.column, sortAsc: isSortingAsc });
            if (this.sharedService.gridOptions.backendServiceApi) {
                this.sortService.onBackendSortChanged(event, { multiColumnSort: true, sortCols: sortedColsWithoutCurrent, grid: this.sharedService.grid });
                emitterType = EmitterType.remote;
            }
            else if (this.sharedService.dataView) {
                this.sortService.onLocalSortChanged(this.sharedService.grid, this.sharedService.dataView, sortedColsWithoutCurrent);
                emitterType = EmitterType.local;
            }
            else {
                // when using customDataView, we will simply send it as a onSort event with notify
                const isMultiSort = this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.multiColumnSort || false;
                const sortOutput = isMultiSort ? sortedColsWithoutCurrent : sortedColsWithoutCurrent[0];
                args.grid.onSort.notify(sortOutput);
            }
            // update the this.sharedService.gridObj sortColumns array which will at the same add the visual sort icon(s) on the UI
            const newSortColumns = sortedColsWithoutCurrent.map((col) => {
                return {
                    columnId: col && col.sortCol && col.sortCol.id,
                    sortAsc: col && col.sortAsc,
                    sortCol: col && col.sortCol,
                };
            });
            // add sort icon in UI
            this.sharedService.grid.setSortColumns(newSortColumns);
            // if we have an emitter type set, we will emit a sort changed
            // for the Grid State Service to see the change.
            // We also need to pass current sorters changed to the emitSortChanged method
            if (emitterType) {
                const currentLocalSorters = [];
                newSortColumns.forEach((sortCol) => {
                    currentLocalSorters.push({
                        columnId: sortCol.columnId + '',
                        direction: sortCol.sortAsc ? 'ASC' : 'DESC'
                    });
                });
                this.sortService.emitSortChanged(emitterType, currentLocalSorters);
            }
        }
    }
};
HeaderMenuExtension = tslib_1.__decorate([
    Injectable(),
    tslib_1.__param(4, Optional()),
    tslib_1.__metadata("design:paramtypes", [ExtensionUtility,
        FilterService,
        SharedService,
        SortService,
        TranslateService])
], HeaderMenuExtension);
export { HeaderMenuExtension };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGVhZGVyTWVudUV4dGVuc2lvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZXh0ZW5zaW9ucy9oZWFkZXJNZW51RXh0ZW5zaW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFJTCxXQUFXLEVBRVgsYUFBYSxHQU9kLE1BQU0saUJBQWlCLENBQUM7QUFDekIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzNELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFDM0QsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFNdEQsSUFBYSxtQkFBbUIsR0FBaEMsTUFBYSxtQkFBbUI7SUFLOUIsWUFDVSxnQkFBa0MsRUFDbEMsYUFBNEIsRUFDNUIsYUFBNEIsRUFDNUIsV0FBd0IsRUFDWixTQUEyQjtRQUp2QyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQWtCO1FBQ2xDLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGtCQUFhLEdBQWIsYUFBYSxDQUFlO1FBQzVCLGdCQUFXLEdBQVgsV0FBVyxDQUFhO1FBQ1osY0FBUyxHQUFULFNBQVMsQ0FBa0I7UUFFL0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLEtBQUssQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUNoRCxDQUFDO0lBRUQsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFD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QWMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtvQkFDakMsbUJBQW1CLENBQUMsSUFBSSxDQUFDO3dCQUN2QixRQUFRLEVBQUUsT0FBTyxDQUFDLFFBQVEsR0FBRyxFQUFFO3dCQUMvQixTQUFTLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxNQUFNO3FCQUM1QyxDQUFDLENBQUM7Z0JBQ0wsQ0FBQyxDQUFDLENBQUM7Z0JBQ0gsSUFBSSxDQUFDLFdBQVcsQ0FBQyxlQUFlLENBQUMsV0FBVyxFQUFFLG1CQUFtQixDQUFDLENBQUM7YUFDcEU7U0FDRjtJQUNILENBQUM7Q0FDRixDQUFBO0FBMVdZLG1CQUFtQjtJQUQvQixVQUFVLEVBQUU7SUFXUixtQkFBQSxRQUFRLEVBQUUsQ0FBQTs2Q0FKZSxnQkFBZ0I7UUFDbkIsYUFBYTtRQUNiLGFBQWE7UUFDZixXQUFXO1FBQ0QsZ0JBQWdCO0dBVnRDLG1CQUFtQixDQTBXL0I7U0ExV1ksbUJBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgT3B0aW9uYWwgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgVHJhbnNsYXRlU2VydmljZSB9IGZyb20gJ0BuZ3gtdHJhbnNsYXRlL2NvcmUnO1xyXG5pbXBvcnQgeyBDb25zdGFudHMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xyXG5pbXBvcnQge1xyXG4gIENvbHVtbixcclxuICBDb2x1bW5Tb3J0LFxyXG4gIEN1cnJlbnRTb3J0ZXIsXHJcbiAgRW1pdHRlclR5cGUsXHJcbiAgRXh0ZW5zaW9uLFxyXG4gIEV4dGVuc2lvbk5hbWUsXHJcbiAgR3JpZE9wdGlvbixcclxuICBIZWFkZXJNZW51LFxyXG4gIExvY2FsZSxcclxuICBNZW51Q29tbWFuZEl0ZW0sXHJcbiAgTWVudUNvbW1hbmRJdGVtQ2FsbGJhY2tBcmdzLFxyXG4gIFNsaWNrRXZlbnRIYW5kbGVyLFxyXG59IGZyb20gJy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IEZpbHRlclNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9maWx0ZXIuc2VydmljZSc7XHJcbmltcG9ydCB7IFNvcnRTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvc29ydC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgU2hhcmVkU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3NoYXJlZC5zZXJ2aWNlJztcclxuaW1wb3J0IHsgRXh0ZW5zaW9uVXRpbGl0eSB9IGZyb20gJy4vZXh0ZW5zaW9uVXRpbGl0eSc7XHJcblxyXG4vLyB1c2luZyBleHRlcm5hbCBub24tdHlwZWQganMgbGlicmFyaWVzXHJcbmRlY2xhcmUgdmFyIFNsaWNrOiBhbnk7XHJcblxyXG5ASW5qZWN0YWJsZSgpXHJcbmV4cG9ydCBjbGFzcyBIZWFkZXJNZW51RXh0ZW5zaW9uIGltcGxlbWVudHMgRXh0ZW5zaW9uIHtcclxuICBwcml2YXRlIF9hZGRvbjogYW55O1xyXG4gIHByaXZhdGUgX2V2ZW50SGFuZGxlcjogU2xpY2tFdmVudEhhbmRsZXI7XHJcbiAgcHJpdmF0ZSBfbG9jYWxlczogTG9jYWxlO1xyXG5cclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgZXh0ZW5zaW9uVXRpbGl0eTogRXh0ZW5zaW9uVXRpbGl0eSxcclxuICAgIHByaXZhdGUgZmlsdGVyU2VydmljZTogRmlsdGVyU2VydmljZSxcclxuICAgIHByaXZhdGUgc2hhcmVkU2VydmljZTogU2hhcmVkU2VydmljZSxcclxuICAgIHByaXZhdGUgc29ydFNlcnZpY2U6IFNvcnRTZXJ2aWNlLFxyXG4gICAgQE9wdGlvbmFsKCkgcHJpdmF0ZSB0cmFuc2xhdGU6IFRyYW5zbGF0ZVNlcnZpY2UsXHJcbiAgKSB7XHJcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIgPSBuZXcgU2xpY2suRXZlbnRIYW5kbGVyKCk7XHJcbiAgfVxyXG5cclxuICBnZXQgZXZlbnRIYW5kbGVyKCk6IFNsaWNrRXZlbnRIYW5kbGVyIHtcclxuICAgIHJldHVybiB0aGlzLl9ldmVudEhhbmRsZXI7XHJcbiAgfVxyXG5cclxuICBkaXNwb3NlKCkge1xyXG4gICAgLy8gdW5zdWJzY3JpYmUgYWxsIFNsaWNrR3JpZCBldmVudHNcclxuICAgIHRoaXMuX2V2ZW50SGFuZGxlci51bnN1YnNjcmliZUFsbCgpO1xyXG4gICAgaWYgKHRoaXMuX2FkZG9uICYmIHRoaXMuX2FkZG9uLmRlc3Ryb3kpIHtcclxuICAgICAgdGhpcy5fYWRkb24uZGVzdHJveSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqIEdldCB0aGUgaW5zdGFuY2Ugb2YgdGhlIFNsaWNrR3JpZCBhZGRvbiAoY29udHJvbCBvciBwbHVnaW4pLiAqL1xyXG4gIGdldEFkZG9uSW5zdGFuY2UoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fYWRkb247XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGUgdGhlIEhlYWRlciBNZW51IGFuZCBleHBvc2UgYWxsIHRoZSBhdmFpbGFibGUgaG9va3MgdGhhdCB1c2VyIGNhbiBzdWJzY3JpYmUgKG9uQ29tbWFuZCwgb25CZWZvcmVNZW51U2hvdywgLi4uKVxyXG4gICAqIEBwYXJhbSBncmlkXHJcbiAgICogQHBhcmFtIGRhdGFWaWV3XHJcbiAgICogQHBhcmFtIGNvbHVtbkRlZmluaXRpb25zXHJcbiAgICovXHJcbiAgcmVnaXN0ZXIoKTogYW55IHtcclxuICAgIGlmICh0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmVuYWJsZVRyYW5zbGF0ZSAmJiAoIXRoaXMudHJhbnNsYXRlIHx8ICF0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KSkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1tBbmd1bGFyLVNsaWNrZ3JpZF0gcmVxdWlyZXMgXCJuZ3gtdHJhbnNsYXRlXCIgdG8gYmUgaW5zdGFsbGVkIGFuZCBjb25maWd1cmVkIHdoZW4gdGhlIGdyaWQgb3B0aW9uIFwiZW5hYmxlVHJhbnNsYXRlXCIgaXMgZW5hYmxlZC4nKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucykge1xyXG4gICAgICAvLyBnZXQgbG9jYWxlcyBwcm92aWRlZCBieSB1c2VyIGluIGZvclJvb3Qgb3IgZWxzZSB1c2UgZGVmYXVsdCBFbmdsaXNoIGxvY2FsZXMgdmlhIHRoZSBDb25zdGFudHNcclxuICAgICAgdGhpcy5fbG9jYWxlcyA9IHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucyAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMubG9jYWxlcyB8fCBDb25zdGFudHMubG9jYWxlcztcclxuXHJcbiAgICAgIC8vIGR5bmFtaWNhbGx5IGltcG9ydCB0aGUgU2xpY2tHcmlkIHBsdWdpbiAoYWRkb24pIHdpdGggUmVxdWlyZUpTXHJcbiAgICAgIHRoaXMuZXh0ZW5zaW9uVXRpbGl0eS5sb2FkRXh0ZW5zaW9uRHluYW1pY2FsbHkoRXh0ZW5zaW9uTmFtZS5oZWFkZXJNZW51KTtcclxuICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUgPSB7IC4uLnRoaXMuZ2V0RGVmYXVsdEhlYWRlck1lbnVPcHRpb25zKCksIC4uLnRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51IH07XHJcbiAgICAgIGlmICh0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMuZW5hYmxlSGVhZGVyTWVudSkge1xyXG4gICAgICAgIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51ID0gdGhpcy5hZGRIZWFkZXJNZW51Q3VzdG9tQ29tbWFuZHModGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLCB0aGlzLnNoYXJlZFNlcnZpY2UuY29sdW1uRGVmaW5pdGlvbnMpO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLl9hZGRvbiA9IG5ldyBTbGljay5QbHVnaW5zLkhlYWRlck1lbnUodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUpO1xyXG4gICAgICB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZC5yZWdpc3RlclBsdWdpbih0aGlzLl9hZGRvbik7XHJcblxyXG4gICAgICAvLyBob29rIGFsbCBldmVudHNcclxuICAgICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51KSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51Lm9uRXh0ZW5zaW9uUmVnaXN0ZXJlZCkge1xyXG4gICAgICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUub25FeHRlbnNpb25SZWdpc3RlcmVkKHRoaXMuX2FkZG9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyLnN1YnNjcmliZSh0aGlzLl9hZGRvbi5vbkNvbW1hbmQsIChlOiBhbnksIGFyZ3M6IE1lbnVDb21tYW5kSXRlbUNhbGxiYWNrQXJncykgPT4ge1xyXG4gICAgICAgICAgdGhpcy5leGVjdXRlSGVhZGVyTWVudUludGVybmFsQ29tbWFuZHMoZSwgYXJncyk7XHJcbiAgICAgICAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUgJiYgdHlwZW9mIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51Lm9uQ29tbWFuZCA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgICB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMuaGVhZGVyTWVudS5vbkNvbW1hbmQoZSwgYXJncyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51ICYmIHR5cGVvZiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMuaGVhZGVyTWVudS5vbkJlZm9yZU1lbnVTaG93ID09PSAnZnVuY3Rpb24nKSB7XHJcbiAgICAgICAgICB0aGlzLl9ldmVudEhhbmRsZXIuc3Vic2NyaWJlKHRoaXMuX2FkZG9uLm9uQmVmb3JlTWVudVNob3csIChlOiBFdmVudCwgYXJnczogeyBncmlkOiBhbnk7IGNvbHVtbjogQ29sdW1uOyBtZW51OiBhbnk7IH0pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUub25CZWZvcmVNZW51U2hvdyhlLCBhcmdzKTtcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUgJiYgdHlwZW9mIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5oZWFkZXJNZW51Lm9uQWZ0ZXJNZW51U2hvdyA9PT0gJ2Z1bmN0aW9uJykge1xyXG4gICAgICAgICAgdGhpcy5fZXZlbnRIYW5kbGVyLnN1YnNjcmliZSh0aGlzLl9hZGRvbi5vbkFmdGVyTWVudVNob3csIChlOiBFdmVudCwgYXJnczogeyBncmlkOiBhbnk7IGNvbHVtbjogQ29sdW1uOyBtZW51OiBhbnk7IH0pID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmhlYWRlck1lbnUub25BZnRlck1lbnVTaG93KGUsIGFyZ3MpO1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiB0aGlzLl9hZGRvbjtcclxuICAgIH1cclxuICAgIHJldHVybiBudWxsO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIEhlYWRlciBNZW51IHdpdGggQ3VzdG9tIENvbW1hbmRzIGlmIHVzZXIgaGFzIGVuYWJsZWQgSGVhZGVyIE1lbnVcclxuICAgKiBAcGFyYW0gb3B0aW9uc1xyXG4gICAqIEBwYXJhbSBjb2x1bW5EZWZpbml0aW9uc1xyXG4gICAqIEByZXR1cm4gaGVhZGVyIG1lbnVcclxuICAgKi9cclxuICBwcml2YXRlIGFkZEhlYWRlck1lbnVDdXN0b21Db21tYW5kcyhvcHRpb25zOiBHcmlkT3B0aW9uLCBjb2x1bW5EZWZpbml0aW9uczogQ29sdW1uW10pOiBIZWFkZXJNZW51IHtcclxuICAgIGNvbnN0IGhlYWRlck1lbnVPcHRpb25zID0gb3B0aW9ucy5oZWFkZXJNZW51IHx8IHt9O1xyXG5cclxuICAgIGlmIChjb2x1bW5EZWZpbml0aW9ucyAmJiBBcnJheS5pc0FycmF5KGNvbHVtbkRlZmluaXRpb25zKSAmJiBvcHRpb25zLmVuYWJsZUhlYWRlck1lbnUpIHtcclxuICAgICAgY29sdW1uRGVmaW5pdGlvbnMuZm9yRWFjaCgoY29sdW1uRGVmOiBDb2x1bW4pID0+IHtcclxuICAgICAgICBpZiAoY29sdW1uRGVmICYmICFjb2x1bW5EZWYuZXhjbHVkZUZyb21IZWFkZXJNZW51KSB7XHJcbiAgICAgICAgICBpZiAoIWNvbHVtbkRlZi5oZWFkZXIgfHwgIWNvbHVtbkRlZi5oZWFkZXIubWVudSkge1xyXG4gICAgICAgICAgICBjb2x1bW5EZWYuaGVhZGVyID0ge1xyXG4gICAgICAgICAgICAgIG1lbnU6IHtcclxuICAgICAgICAgICAgICAgIGl0ZW1zOiBbXVxyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICBjb25zdCBjb2x1bW5IZWFkZXJNZW51SXRlbXM6IEFycmF5PE1lbnVDb21tYW5kSXRlbSB8ICdkaXZpZGVyJz4gPSBjb2x1bW5EZWYgJiYgY29sdW1uRGVmLmhlYWRlciAmJiBjb2x1bW5EZWYuaGVhZGVyLm1lbnUgJiYgY29sdW1uRGVmLmhlYWRlci5tZW51Lml0ZW1zIHx8IFtdO1xyXG5cclxuICAgICAgICAgIC8vIFNvcnRpbmcgQ29tbWFuZHNcclxuICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZVNvcnRpbmcgJiYgY29sdW1uRGVmLnNvcnRhYmxlICYmIGhlYWRlck1lbnVPcHRpb25zICYmICFoZWFkZXJNZW51T3B0aW9ucy5oaWRlU29ydENvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgIGlmIChjb2x1bW5IZWFkZXJNZW51SXRlbXMuZmlsdGVyKChpdGVtOiBNZW51Q29tbWFuZEl0ZW0pID0+IGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbW1hbmQnKSAmJiBpdGVtLmNvbW1hbmQgPT09ICdzb3J0LWFzYycpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIGNvbHVtbkhlYWRlck1lbnVJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGljb25Dc3NDbGFzczogaGVhZGVyTWVudU9wdGlvbnMuaWNvblNvcnRBc2NDb21tYW5kIHx8ICdmYSBmYS1zb3J0LWFzYycsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogb3B0aW9ucy5lbmFibGVUcmFuc2xhdGUgPyB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdTT1JUX0FTQ0VORElORycpIDogdGhpcy5fbG9jYWxlcyAmJiB0aGlzLl9sb2NhbGVzLlRFWFRfU09SVF9BU0NFTkRJTkcsXHJcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAnc29ydC1hc2MnLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb25PcmRlcjogNTBcclxuICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoY29sdW1uSGVhZGVyTWVudUl0ZW1zLmZpbHRlcigoaXRlbTogTWVudUNvbW1hbmRJdGVtKSA9PiBpdGVtLmhhc093blByb3BlcnR5KCdjb21tYW5kJykgJiYgaXRlbS5jb21tYW5kID09PSAnc29ydC1kZXNjJykubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgY29sdW1uSGVhZGVyTWVudUl0ZW1zLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgaWNvbkNzc0NsYXNzOiBoZWFkZXJNZW51T3B0aW9ucy5pY29uU29ydERlc2NDb21tYW5kIHx8ICdmYSBmYS1zb3J0LWRlc2MnLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IG9wdGlvbnMuZW5hYmxlVHJhbnNsYXRlID8gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnU09SVF9ERVNDRU5ESU5HJykgOiB0aGlzLl9sb2NhbGVzICYmIHRoaXMuX2xvY2FsZXMuVEVYVF9TT1JUX0RFU0NFTkRJTkcsXHJcbiAgICAgICAgICAgICAgICBjb21tYW5kOiAnc29ydC1kZXNjJyxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uT3JkZXI6IDUxXHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vIGFkZCBhIGRpdmlkZXIgKHNlcGFyYXRvcikgYmV0d2VlbiB0aGUgdG9wIHNvcnQgY29tbWFuZHMgYW5kIHRoZSBvdGhlciBjbGVhciBjb21tYW5kc1xyXG4gICAgICAgICAgICBpZiAoY29sdW1uSGVhZGVyTWVudUl0ZW1zLmZpbHRlcigoaXRlbTogTWVudUNvbW1hbmRJdGVtKSA9PiBpdGVtLmhhc093blByb3BlcnR5KCdjb21tYW5kJykgJiYgaXRlbS5wb3NpdGlvbk9yZGVyID09PSA1MikubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgY29sdW1uSGVhZGVyTWVudUl0ZW1zLnB1c2goeyBkaXZpZGVyOiB0cnVlLCBjb21tYW5kOiAnJywgcG9zaXRpb25PcmRlcjogNTIgfSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICghaGVhZGVyTWVudU9wdGlvbnMuaGlkZUNsZWFyU29ydENvbW1hbmQgJiYgY29sdW1uSGVhZGVyTWVudUl0ZW1zLmZpbHRlcigoaXRlbTogTWVudUNvbW1hbmRJdGVtKSA9PiBpdGVtLmhhc093blByb3BlcnR5KCdjb21tYW5kJykgJiYgaXRlbS5jb21tYW5kID09PSAnY2xlYXItc29ydCcpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgIGNvbHVtbkhlYWRlck1lbnVJdGVtcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGljb25Dc3NDbGFzczogaGVhZGVyTWVudU9wdGlvbnMuaWNvbkNsZWFyU29ydENvbW1hbmQgfHwgJ2ZhIGZhLXVuc29ydGVkJyxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBvcHRpb25zLmVuYWJsZVRyYW5zbGF0ZSA/IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1JFTU9WRV9TT1JUJykgOiB0aGlzLl9sb2NhbGVzICYmIHRoaXMuX2xvY2FsZXMuVEVYVF9SRU1PVkVfU09SVCxcclxuICAgICAgICAgICAgICAgIGNvbW1hbmQ6ICdjbGVhci1zb3J0JyxcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uT3JkZXI6IDU0XHJcbiAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAvLyBGaWx0ZXJpbmcgQ29tbWFuZHNcclxuICAgICAgICAgIGlmIChvcHRpb25zLmVuYWJsZUZpbHRlcmluZyAmJiBjb2x1bW5EZWYuZmlsdGVyYWJsZSAmJiBoZWFkZXJNZW51T3B0aW9ucyAmJiAhaGVhZGVyTWVudU9wdGlvbnMuaGlkZUZpbHRlckNvbW1hbmRzKSB7XHJcbiAgICAgICAgICAgIGlmICghaGVhZGVyTWVudU9wdGlvbnMuaGlkZUNsZWFyRmlsdGVyQ29tbWFuZCAmJiBjb2x1bW5IZWFkZXJNZW51SXRlbXMuZmlsdGVyKChpdGVtOiBNZW51Q29tbWFuZEl0ZW0pID0+IGl0ZW0uaGFzT3duUHJvcGVydHkoJ2NvbW1hbmQnKSAmJiBpdGVtLmNvbW1hbmQgPT09ICdjbGVhci1maWx0ZXInKS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICBjb2x1bW5IZWFkZXJNZW51SXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBpY29uQ3NzQ2xhc3M6IGhlYWRlck1lbnVPcHRpb25zLmljb25DbGVhckZpbHRlckNvbW1hbmQgfHwgJ2ZhIGZhLWZpbHRlcicsXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogb3B0aW9ucy5lbmFibGVUcmFuc2xhdGUgPyB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdSRU1PVkVfRklMVEVSJykgOiB0aGlzLl9sb2NhbGVzICYmIHRoaXMuX2xvY2FsZXMuVEVYVF9SRU1PVkVfRklMVEVSLFxyXG4gICAgICAgICAgICAgICAgY29tbWFuZDogJ2NsZWFyLWZpbHRlcicsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbk9yZGVyOiA1M1xyXG4gICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgLy8gSGlkZSBDb2x1bW4gQ29tbWFuZFxyXG4gICAgICAgICAgaWYgKGhlYWRlck1lbnVPcHRpb25zICYmICFoZWFkZXJNZW51T3B0aW9ucy5oaWRlQ29sdW1uSGlkZUNvbW1hbmQgJiYgY29sdW1uSGVhZGVyTWVudUl0ZW1zLmZpbHRlcigoaXRlbTogTWVudUNvbW1hbmRJdGVtKSA9PiBpdGVtLmhhc093blByb3BlcnR5KCdjb21tYW5kJykgJiYgaXRlbS5jb21tYW5kID09PSAnaGlkZScpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICBjb2x1bW5IZWFkZXJNZW51SXRlbXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgaWNvbkNzc0NsYXNzOiBoZWFkZXJNZW51T3B0aW9ucy5pY29uQ29sdW1uSGlkZUNvbW1hbmQgfHwgJ2ZhIGZhLXRpbWVzJyxcclxuICAgICAgICAgICAgICB0aXRsZTogb3B0aW9ucy5lbmFibGVUcmFuc2xhdGUgPyB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdISURFX0NPTFVNTicpIDogdGhpcy5fbG9jYWxlcyAmJiB0aGlzLl9sb2NhbGVzLlRFWFRfSElERV9DT0xVTU4sXHJcbiAgICAgICAgICAgICAgY29tbWFuZDogJ2hpZGUnLFxyXG4gICAgICAgICAgICAgIHBvc2l0aW9uT3JkZXI6IDU1XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgfVxyXG5cclxuICAgICAgICAgIHRoaXMuZXh0ZW5zaW9uVXRpbGl0eS50cmFuc2xhdGVJdGVtcyhjb2x1bW5IZWFkZXJNZW51SXRlbXMsICd0aXRsZUtleScsICd0aXRsZScpO1xyXG4gICAgICAgICAgdGhpcy5leHRlbnNpb25VdGlsaXR5LnNvcnRJdGVtcyhjb2x1bW5IZWFkZXJNZW51SXRlbXMsICdwb3NpdGlvbk9yZGVyJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBoZWFkZXJNZW51T3B0aW9ucztcclxuICB9XHJcblxyXG4gIC8qKiBIaWRlIGEgY29sdW1uIGZyb20gdGhlIGdyaWQgKi9cclxuICBoaWRlQ29sdW1uKGNvbHVtbjogQ29sdW1uKSB7XHJcbiAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQuZ2V0Q29sdW1ucyAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZC5zZXRDb2x1bW5zICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLmdldENvbHVtbkluZGV4KSB7XHJcbiAgICAgIGNvbnN0IGNvbHVtbkluZGV4ID0gdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQuZ2V0Q29sdW1uSW5kZXgoY29sdW1uLmlkKTtcclxuICAgICAgY29uc3QgY3VycmVudENvbHVtbnMgPSB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZC5nZXRDb2x1bW5zKCkgYXMgQ29sdW1uW107XHJcbiAgICAgIGNvbnN0IHZpc2libGVDb2x1bW5zID0gdGhpcy5leHRlbnNpb25VdGlsaXR5LmFycmF5UmVtb3ZlSXRlbUJ5SW5kZXgoY3VycmVudENvbHVtbnMsIGNvbHVtbkluZGV4KTtcclxuICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLnZpc2libGVDb2x1bW5zID0gdmlzaWJsZUNvbHVtbnM7XHJcbiAgICAgIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLnNldENvbHVtbnModmlzaWJsZUNvbHVtbnMpO1xyXG4gICAgICB0aGlzLnNoYXJlZFNlcnZpY2Uub25Db2x1bW5zQ2hhbmdlZC5uZXh0KHZpc2libGVDb2x1bW5zKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRyYW5zbGF0ZSB0aGUgSGVhZGVyIE1lbnUgdGl0bGVzLCB3ZSBuZWVkIHRvIGxvb3AgdGhyb3VnaCBhbGwgY29sdW1uIGRlZmluaXRpb24gdG8gcmUtdHJhbnNsYXRlIHRoZW1cclxuICAgKi9cclxuICB0cmFuc2xhdGVIZWFkZXJNZW51KCkge1xyXG4gICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucyAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMuaGVhZGVyTWVudSkge1xyXG4gICAgICB0aGlzLnJlc2V0SGVhZGVyTWVudVRyYW5zbGF0aW9ucyh0aGlzLnNoYXJlZFNlcnZpY2UudmlzaWJsZUNvbHVtbnMpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gLS1cclxuICAvLyBwcml2YXRlIGZ1bmN0aW9uc1xyXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICAvKiogQHJldHVybiBkZWZhdWx0IEhlYWRlciBNZW51IG9wdGlvbnMgKi9cclxuICBwcml2YXRlIGdldERlZmF1bHRIZWFkZXJNZW51T3B0aW9ucygpOiBIZWFkZXJNZW51IHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIGF1dG9BbGlnbk9mZnNldDogMTIsXHJcbiAgICAgIG1pbldpZHRoOiAxNDAsXHJcbiAgICAgIGhpZGVDb2x1bW5IaWRlQ29tbWFuZDogZmFsc2UsXHJcbiAgICAgIGhpZGVTb3J0Q29tbWFuZHM6IGZhbHNlLFxyXG4gICAgICB0aXRsZTogJydcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCBhbGwgdGhlIGludGVybmFsIE1lbnUgb3B0aW9ucyB3aGljaCBoYXZlIHRleHQgdG8gdHJhbnNsYXRlXHJcbiAgICogQHBhcmFtIGhlYWRlciBtZW51IG9iamVjdFxyXG4gICAqL1xyXG4gIHByaXZhdGUgcmVzZXRIZWFkZXJNZW51VHJhbnNsYXRpb25zKGNvbHVtbkRlZmluaXRpb25zOiBDb2x1bW5bXSkge1xyXG4gICAgY29sdW1uRGVmaW5pdGlvbnMuZm9yRWFjaCgoY29sdW1uRGVmOiBDb2x1bW4pID0+IHtcclxuICAgICAgaWYgKGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYuaGVhZGVyICYmIGNvbHVtbkRlZi5oZWFkZXIgJiYgY29sdW1uRGVmLmhlYWRlci5tZW51ICYmIGNvbHVtbkRlZi5oZWFkZXIubWVudS5pdGVtcykge1xyXG4gICAgICAgIGlmICghY29sdW1uRGVmLmV4Y2x1ZGVGcm9tSGVhZGVyTWVudSkge1xyXG4gICAgICAgICAgY29uc3QgY29sdW1uSGVhZGVyTWVudUl0ZW1zOiBBcnJheTxNZW51Q29tbWFuZEl0ZW0gfCAnZGl2aWRlcic+ID0gY29sdW1uRGVmLmhlYWRlci5tZW51Lml0ZW1zIHx8IFtdO1xyXG4gICAgICAgICAgY29sdW1uSGVhZGVyTWVudUl0ZW1zLmZvckVhY2goKGl0ZW06IE1lbnVDb21tYW5kSXRlbSkgPT4ge1xyXG4gICAgICAgICAgICBpZiAoaXRlbS5oYXNPd25Qcm9wZXJ0eSgnY29tbWFuZCcpKSB7XHJcbiAgICAgICAgICAgICAgc3dpdGNoIChpdGVtLmNvbW1hbmQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2NsZWFyLWZpbHRlcic6XHJcbiAgICAgICAgICAgICAgICAgIGl0ZW0udGl0bGUgPSB0aGlzLnRyYW5zbGF0ZS5pbnN0YW50KCdSRU1PVkVfRklMVEVSJykgfHwgdGhpcy5fbG9jYWxlcyAmJiB0aGlzLl9sb2NhbGVzLlRFWFRfUkVNT1ZFX0ZJTFRFUjtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjbGVhci1zb3J0JzpcclxuICAgICAgICAgICAgICAgICAgaXRlbS50aXRsZSA9IHRoaXMudHJhbnNsYXRlLmluc3RhbnQoJ1JFTU9WRV9TT1JUJykgfHwgdGhpcy5fbG9jYWxlcyAmJiB0aGlzLl9sb2NhbGVzLlRFWFRfUkVNT1ZFX1NPUlQ7XHJcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnc29ydC1hc2MnOlxyXG4gICAgICAgICAgICAgICAgICBpdGVtLnRpdGxlID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnU09SVF9BU0NFTkRJTkcnKSB8fCB0aGlzLl9sb2NhbGVzICYmIHRoaXMuX2xvY2FsZXMuVEVYVF9TT1JUX0FTQ0VORElORztcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdzb3J0LWRlc2MnOlxyXG4gICAgICAgICAgICAgICAgICBpdGVtLnRpdGxlID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnU09SVF9ERVNDRU5ESU5HJykgfHwgdGhpcy5fbG9jYWxlcyAmJiB0aGlzLl9sb2NhbGVzLlRFWFRfU09SVF9ERVNDRU5ESU5HO1xyXG4gICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ2hpZGUnOlxyXG4gICAgICAgICAgICAgICAgICBpdGVtLnRpdGxlID0gdGhpcy50cmFuc2xhdGUuaW5zdGFudCgnSElERV9DT0xVTU4nKSB8fCB0aGlzLl9sb2NhbGVzICYmIHRoaXMuX2xvY2FsZXMuVEVYVF9ISURFX0NPTFVNTjtcclxuICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyByZS10cmFuc2xhdGUgaWYgdGhlcmUncyBhIFwidGl0bGVLZXlcIlxyXG4gICAgICAgICAgICBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5lbmFibGVUcmFuc2xhdGUpIHtcclxuICAgICAgICAgICAgICB0aGlzLmV4dGVuc2lvblV0aWxpdHkudHJhbnNsYXRlSXRlbXMoY29sdW1uSGVhZGVyTWVudUl0ZW1zLCAndGl0bGVLZXknLCAndGl0bGUnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIC8qKiBDbGVhciB0aGUgRmlsdGVyIG9uIHRoZSBjdXJyZW50IGNvbHVtbiAoaWYgaXQncyBhY3R1YWxseSBmaWx0ZXJlZCkgKi9cclxuICBwcml2YXRlIGNsZWFyQ29sdW1uRmlsdGVyKGV2ZW50OiBFdmVudCwgYXJnczogTWVudUNvbW1hbmRJdGVtQ2FsbGJhY2tBcmdzKSB7XHJcbiAgICBpZiAoYXJncyAmJiBhcmdzLmNvbHVtbikge1xyXG4gICAgICB0aGlzLmZpbHRlclNlcnZpY2UuY2xlYXJGaWx0ZXJCeUNvbHVtbklkKGV2ZW50LCBhcmdzLmNvbHVtbi5pZCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogQ2xlYXIgdGhlIFNvcnQgb24gdGhlIGN1cnJlbnQgY29sdW1uIChpZiBpdCdzIGFjdHVhbGx5IHNvcnRlZCkgKi9cclxuICBwcml2YXRlIGNsZWFyQ29sdW1uU29ydChldmVudDogRXZlbnQsIGFyZ3M6IE1lbnVDb21tYW5kSXRlbUNhbGxiYWNrQXJncykge1xyXG4gICAgaWYgKGFyZ3MgJiYgYXJncy5jb2x1bW4gJiYgdGhpcy5zaGFyZWRTZXJ2aWNlKSB7XHJcbiAgICAgIC8vIGdldCBjdXJyZW50IHNvcnRlZCBjb2x1bW5zLCBwcmlvciB0byBjYWxsaW5nIHRoZSBuZXcgY29sdW1uIHNvcnRcclxuICAgICAgY29uc3QgYWxsU29ydGVkQ29sczogQ29sdW1uU29ydFtdID0gdGhpcy5zb3J0U2VydmljZS5nZXRDdXJyZW50Q29sdW1uU29ydHMoKTtcclxuICAgICAgY29uc3Qgc29ydGVkQ29sc1dpdGhvdXRDdXJyZW50OiBDb2x1bW5Tb3J0W10gPSB0aGlzLnNvcnRTZXJ2aWNlLmdldEN1cnJlbnRDb2x1bW5Tb3J0cyhhcmdzLmNvbHVtbi5pZCArICcnKTtcclxuXHJcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGFsbFNvcnRlZENvbHMpICYmIEFycmF5LmlzQXJyYXkoc29ydGVkQ29sc1dpdGhvdXRDdXJyZW50KSAmJiBhbGxTb3J0ZWRDb2xzLmxlbmd0aCAhPT0gc29ydGVkQ29sc1dpdGhvdXRDdXJyZW50Lmxlbmd0aCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLmJhY2tlbmRTZXJ2aWNlQXBpKSB7XHJcbiAgICAgICAgICB0aGlzLnNvcnRTZXJ2aWNlLm9uQmFja2VuZFNvcnRDaGFuZ2VkKGV2ZW50LCB7IG11bHRpQ29sdW1uU29ydDogdHJ1ZSwgc29ydENvbHM6IHNvcnRlZENvbHNXaXRob3V0Q3VycmVudCwgZ3JpZDogdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQgfSk7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLnNoYXJlZFNlcnZpY2UuZGF0YVZpZXcpIHtcclxuICAgICAgICAgIHRoaXMuc29ydFNlcnZpY2Uub25Mb2NhbFNvcnRDaGFuZ2VkKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLCB0aGlzLnNoYXJlZFNlcnZpY2UuZGF0YVZpZXcsIHNvcnRlZENvbHNXaXRob3V0Q3VycmVudCwgdHJ1ZSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIC8vIHdoZW4gdXNpbmcgY3VzdG9tRGF0YVZpZXcsIHdlIHdpbGwgc2ltcGx5IHNlbmQgaXQgYXMgYSBvblNvcnQgZXZlbnQgd2l0aCBub3RpZnlcclxuICAgICAgICAgIGNvbnN0IGlzTXVsdGlTb3J0ID0gdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zICYmIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucy5tdWx0aUNvbHVtblNvcnQgfHwgZmFsc2U7XHJcbiAgICAgICAgICBjb25zdCBzb3J0T3V0cHV0ID0gaXNNdWx0aVNvcnQgPyBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnQgOiBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnRbMF07XHJcbiAgICAgICAgICBhcmdzLmdyaWQub25Tb3J0Lm5vdGlmeShzb3J0T3V0cHV0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSB0aGUgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPYmogc29ydENvbHVtbnMgYXJyYXkgd2hpY2ggd2lsbCBhdCB0aGUgc2FtZSBhZGQgdGhlIHZpc3VhbCBzb3J0IGljb24ocykgb24gdGhlIFVJXHJcbiAgICAgICAgY29uc3QgdXBkYXRlZFNvcnRDb2x1bW5zOiBDb2x1bW5Tb3J0W10gPSBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnQubWFwKChjb2wpID0+IHtcclxuICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGNvbHVtbklkOiBjb2wgJiYgY29sLnNvcnRDb2wgJiYgY29sLnNvcnRDb2wuaWQsXHJcbiAgICAgICAgICAgIHNvcnRBc2M6IGNvbCAmJiBjb2wuc29ydEFzYyxcclxuICAgICAgICAgICAgc29ydENvbDogY29sICYmIGNvbC5zb3J0Q29sLFxyXG4gICAgICAgICAgfTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZC5zZXRTb3J0Q29sdW1ucyh1cGRhdGVkU29ydENvbHVtbnMpOyAvLyBhZGQgc29ydCBpY29uIGluIFVJXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBFeGVjdXRlIHRoZSBIZWFkZXIgTWVudSBDb21tYW5kcyB0aGF0IHdhcyB0cmlnZ2VyZWQgYnkgdGhlIG9uQ29tbWFuZCBzdWJzY3JpYmUgKi9cclxuICBwcml2YXRlIGV4ZWN1dGVIZWFkZXJNZW51SW50ZXJuYWxDb21tYW5kcyhldmVudDogRXZlbnQsIGFyZ3M6IE1lbnVDb21tYW5kSXRlbUNhbGxiYWNrQXJncykge1xyXG4gICAgaWYgKGFyZ3MgJiYgYXJncy5jb21tYW5kKSB7XHJcbiAgICAgIHN3aXRjaCAoYXJncy5jb21tYW5kKSB7XHJcbiAgICAgICAgY2FzZSAnaGlkZSc6XHJcbiAgICAgICAgICB0aGlzLmhpZGVDb2x1bW4oYXJncy5jb2x1bW4pO1xyXG4gICAgICAgICAgaWYgKHRoaXMuc2hhcmVkU2VydmljZS5ncmlkT3B0aW9ucyAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMuZW5hYmxlQXV0b1NpemVDb2x1bW5zKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2hhcmVkU2VydmljZS5ncmlkLmF1dG9zaXplQ29sdW1ucygpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY2xlYXItZmlsdGVyJzpcclxuICAgICAgICAgIHRoaXMuY2xlYXJDb2x1bW5GaWx0ZXIoZXZlbnQsIGFyZ3MpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgY2FzZSAnY2xlYXItc29ydCc6XHJcbiAgICAgICAgICB0aGlzLmNsZWFyQ29sdW1uU29ydChldmVudCwgYXJncyk7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICBjYXNlICdzb3J0LWFzYyc6XHJcbiAgICAgICAgY2FzZSAnc29ydC1kZXNjJzpcclxuICAgICAgICAgIGNvbnN0IGlzU29ydGluZ0FzYyA9IChhcmdzLmNvbW1hbmQgPT09ICdzb3J0LWFzYycpO1xyXG4gICAgICAgICAgdGhpcy5zb3J0Q29sdW1uKGV2ZW50LCBhcmdzLCBpc1NvcnRpbmdBc2MpO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKiogU29ydCB0aGUgY3VycmVudCBjb2x1bW4gKi9cclxuICBwcml2YXRlIHNvcnRDb2x1bW4oZXZlbnQ6IEV2ZW50LCBhcmdzOiBNZW51Q29tbWFuZEl0ZW1DYWxsYmFja0FyZ3MsIGlzU29ydGluZ0FzYyA9IHRydWUpIHtcclxuICAgIGlmIChhcmdzICYmIGFyZ3MuY29sdW1uKSB7XHJcbiAgICAgIC8vIGdldCBwcmV2aW91c2x5IHNvcnRlZCBjb2x1bW5zXHJcbiAgICAgIGNvbnN0IHNvcnRlZENvbHNXaXRob3V0Q3VycmVudDogQ29sdW1uU29ydFtdID0gdGhpcy5zb3J0U2VydmljZS5nZXRDdXJyZW50Q29sdW1uU29ydHMoYXJncy5jb2x1bW4uaWQgKyAnJyk7XHJcblxyXG4gICAgICBsZXQgZW1pdHRlclR5cGU6IEVtaXR0ZXJUeXBlO1xyXG5cclxuICAgICAgLy8gYWRkIHRvIHRoZSBjb2x1bW4gYXJyYXksIHRoZSBjb2x1bW4gc29ydGVkIGJ5IHRoZSBoZWFkZXIgbWVudVxyXG4gICAgICBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnQucHVzaCh7IHNvcnRDb2w6IGFyZ3MuY29sdW1uLCBzb3J0QXNjOiBpc1NvcnRpbmdBc2MgfSk7XHJcbiAgICAgIGlmICh0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMuYmFja2VuZFNlcnZpY2VBcGkpIHtcclxuICAgICAgICB0aGlzLnNvcnRTZXJ2aWNlLm9uQmFja2VuZFNvcnRDaGFuZ2VkKGV2ZW50LCB7IG11bHRpQ29sdW1uU29ydDogdHJ1ZSwgc29ydENvbHM6IHNvcnRlZENvbHNXaXRob3V0Q3VycmVudCwgZ3JpZDogdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQgfSk7XHJcbiAgICAgICAgZW1pdHRlclR5cGUgPSBFbWl0dGVyVHlwZS5yZW1vdGU7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5zaGFyZWRTZXJ2aWNlLmRhdGFWaWV3KSB7XHJcbiAgICAgICAgdGhpcy5zb3J0U2VydmljZS5vbkxvY2FsU29ydENoYW5nZWQodGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQsIHRoaXMuc2hhcmVkU2VydmljZS5kYXRhVmlldywgc29ydGVkQ29sc1dpdGhvdXRDdXJyZW50KTtcclxuICAgICAgICBlbWl0dGVyVHlwZSA9IEVtaXR0ZXJUeXBlLmxvY2FsO1xyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIC8vIHdoZW4gdXNpbmcgY3VzdG9tRGF0YVZpZXcsIHdlIHdpbGwgc2ltcGx5IHNlbmQgaXQgYXMgYSBvblNvcnQgZXZlbnQgd2l0aCBub3RpZnlcclxuICAgICAgICBjb25zdCBpc011bHRpU29ydCA9IHRoaXMuc2hhcmVkU2VydmljZSAmJiB0aGlzLnNoYXJlZFNlcnZpY2UuZ3JpZE9wdGlvbnMgJiYgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPcHRpb25zLm11bHRpQ29sdW1uU29ydCB8fCBmYWxzZTtcclxuICAgICAgICBjb25zdCBzb3J0T3V0cHV0ID0gaXNNdWx0aVNvcnQgPyBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnQgOiBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnRbMF07XHJcbiAgICAgICAgYXJncy5ncmlkLm9uU29ydC5ub3RpZnkoc29ydE91dHB1dCk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIHVwZGF0ZSB0aGUgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWRPYmogc29ydENvbHVtbnMgYXJyYXkgd2hpY2ggd2lsbCBhdCB0aGUgc2FtZSBhZGQgdGhlIHZpc3VhbCBzb3J0IGljb24ocykgb24gdGhlIFVJXHJcbiAgICAgIGNvbnN0IG5ld1NvcnRDb2x1bW5zOiBDb2x1bW5Tb3J0W10gPSBzb3J0ZWRDb2xzV2l0aG91dEN1cnJlbnQubWFwKChjb2wpID0+IHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgY29sdW1uSWQ6IGNvbCAmJiBjb2wuc29ydENvbCAmJiBjb2wuc29ydENvbC5pZCxcclxuICAgICAgICAgIHNvcnRBc2M6IGNvbCAmJiBjb2wuc29ydEFzYyxcclxuICAgICAgICAgIHNvcnRDb2w6IGNvbCAmJiBjb2wuc29ydENvbCxcclxuICAgICAgICB9O1xyXG4gICAgICB9KTtcclxuXHJcbiAgICAgIC8vIGFkZCBzb3J0IGljb24gaW4gVUlcclxuICAgICAgdGhpcy5zaGFyZWRTZXJ2aWNlLmdyaWQuc2V0U29ydENvbHVtbnMobmV3U29ydENvbHVtbnMpO1xyXG5cclxuICAgICAgLy8gaWYgd2UgaGF2ZSBhbiBlbWl0dGVyIHR5cGUgc2V0LCB3ZSB3aWxsIGVtaXQgYSBzb3J0IGNoYW5nZWRcclxuICAgICAgLy8gZm9yIHRoZSBHcmlkIFN0YXRlIFNlcnZpY2UgdG8gc2VlIHRoZSBjaGFuZ2UuXHJcbiAgICAgIC8vIFdlIGFsc28gbmVlZCB0byBwYXNzIGN1cnJlbnQgc29ydGVycyBjaGFuZ2VkIHRvIHRoZSBlbWl0U29ydENoYW5nZWQgbWV0aG9kXHJcbiAgICAgIGlmIChlbWl0dGVyVHlwZSkge1xyXG4gICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhbFNvcnRlcnM6IEN1cnJlbnRTb3J0ZXJbXSA9IFtdO1xyXG4gICAgICAgIG5ld1NvcnRDb2x1bW5zLmZvckVhY2goKHNvcnRDb2wpID0+IHtcclxuICAgICAgICAgIGN1cnJlbnRMb2NhbFNvcnRlcnMucHVzaCh7XHJcbiAgICAgICAgICAgIGNvbHVtbklkOiBzb3J0Q29sLmNvbHVtbklkICsgJycsXHJcbiAgICAgICAgICAgIGRpcmVjdGlvbjogc29ydENvbC5zb3J0QXNjID8gJ0FTQycgOiAnREVTQydcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc29ydFNlcnZpY2UuZW1pdFNvcnRDaGFuZ2VkKGVtaXR0ZXJUeXBlLCBjdXJyZW50TG9jYWxTb3J0ZXJzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=