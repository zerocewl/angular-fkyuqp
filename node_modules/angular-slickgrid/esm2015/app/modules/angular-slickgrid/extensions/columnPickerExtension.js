import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ExtensionName } from '../models/index';
import { ExtensionUtility } from './extensionUtility';
import { SharedService } from '../services/shared.service';
let ColumnPickerExtension = class ColumnPickerExtension {
    constructor(extensionUtility, sharedService) {
        this.extensionUtility = extensionUtility;
        this.sharedService = sharedService;
        this._eventHandler = new Slick.EventHandler();
    }
    get eventHandler() {
        return this._eventHandler;
    }
    dispose() {
        // unsubscribe all SlickGrid events
        this._eventHandler.unsubscribeAll();
        if (this._addon && this._addon.destroy) {
            this._addon.destroy();
        }
    }
    /** Get the instance of the SlickGrid addon (control or plugin). */
    getAddonInstance() {
        return this._addon;
    }
    register() {
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // dynamically import the SlickGrid plugin (addon) with RequireJS
            this.extensionUtility.loadExtensionDynamically(ExtensionName.columnPicker);
            // localization support for the picker
            const columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'columnPicker');
            const forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'columnPicker');
            const syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');
            this.sharedService.gridOptions.columnPicker = this.sharedService.gridOptions.columnPicker || {};
            this.sharedService.gridOptions.columnPicker.columnTitle = this.sharedService.gridOptions.columnPicker.columnTitle || columnTitle;
            this.sharedService.gridOptions.columnPicker.forceFitTitle = this.sharedService.gridOptions.columnPicker.forceFitTitle || forceFitTitle;
            this.sharedService.gridOptions.columnPicker.syncResizeTitle = this.sharedService.gridOptions.columnPicker.syncResizeTitle || syncResizeTitle;
            this._addon = new Slick.Controls.ColumnPicker(this.sharedService.allColumns, this.sharedService.grid, this.sharedService.gridOptions);
            if (this.sharedService.grid && this.sharedService.gridOptions.enableColumnPicker) {
                if (this.sharedService.gridOptions.columnPicker.onExtensionRegistered) {
                    this.sharedService.gridOptions.columnPicker.onExtensionRegistered(this._addon);
                }
                this._eventHandler.subscribe(this._addon.onColumnsChanged, (e, args) => {
                    if (this.sharedService.gridOptions.columnPicker && typeof this.sharedService.gridOptions.columnPicker.onColumnsChanged === 'function') {
                        this.sharedService.gridOptions.columnPicker.onColumnsChanged(e, args);
                    }
                    if (args && Array.isArray(args.columns) && args.columns.length > this.sharedService.visibleColumns.length) {
                        this.sharedService.visibleColumns = args.columns;
                    }
                });
            }
            return this._addon;
        }
        return null;
    }
    /** Translate the Column Picker headers and also the last 2 checkboxes */
    translateColumnPicker() {
        if (this.sharedService && this.sharedService.grid && this.sharedService.gridOptions) {
            // update the properties by pointers, that is the only way to get Column Picker Control to see the new values
            if (this.sharedService.gridOptions.columnPicker) {
                this.emptyColumnPickerTitles();
                this.sharedService.gridOptions.columnPicker.columnTitle = this.extensionUtility.getPickerTitleOutputString('columnTitle', 'columnPicker');
                this.sharedService.gridOptions.columnPicker.forceFitTitle = this.extensionUtility.getPickerTitleOutputString('forceFitTitle', 'columnPicker');
                this.sharedService.gridOptions.columnPicker.syncResizeTitle = this.extensionUtility.getPickerTitleOutputString('syncResizeTitle', 'columnPicker');
            }
            // translate all columns (including hidden columns)
            // eventually deprecate the "headerKey" and use only the "nameKey"
            this.extensionUtility.translateItems(this.sharedService.allColumns, 'headerKey', 'name');
            this.extensionUtility.translateItems(this.sharedService.allColumns, 'nameKey', 'name');
            // update the Titles of each sections (command, customTitle, ...)
            if (this._addon && this._addon.updateAllTitles) {
                this._addon.updateAllTitles(this.sharedService.gridOptions.columnPicker);
            }
        }
    }
    emptyColumnPickerTitles() {
        if (this.sharedService && this.sharedService.gridOptions && this.sharedService.gridOptions.columnPicker) {
            this.sharedService.gridOptions.columnPicker.columnTitle = '';
            this.sharedService.gridOptions.columnPicker.forceFitTitle = '';
            this.sharedService.gridOptions.columnPicker.syncResizeTitle = '';
        }
    }
};
ColumnPickerExtension = tslib_1.__decorate([
    Injectable(),
    tslib_1.__metadata("design:paramtypes", [ExtensionUtility, SharedService])
], ColumnPickerExtension);
export { ColumnPickerExtension };
//# sourceMappingURL=data:application/json;base64,