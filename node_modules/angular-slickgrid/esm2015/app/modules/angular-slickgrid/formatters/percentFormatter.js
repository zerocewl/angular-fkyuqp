import { formatNumber } from './../services/utilities';
import { getValueFromParamsOrFormatterOptions } from './formatterUtilities';
export const percentFormatter = (row, cell, value, columnDef, dataContext, grid) => {
    const isNumber = (value === null || value === undefined || value === '') ? false : !isNaN(+value);
    const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (isNumber) {
        const percentValue = value * 100;
        return formatNumber(percentValue, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '%', decimalSeparator, thousandSeparator);
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGVyY2VudEZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9wZXJjZW50Rm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBYyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTLEVBQVUsRUFBRTtJQUMzSSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRyxNQUFNLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLE1BQU0sVUFBVSxHQUFHLG9DQUFvQyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsTUFBTSxnQkFBZ0IsR0FBRyxvQ0FBb0MsQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hHLE1BQU0saUJBQWlCLEdBQUcsb0NBQW9DLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RyxNQUFNLG9DQUFvQyxHQUFHLG9DQUFvQyxDQUFDLHNDQUFzQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEosSUFBSSxRQUFRLEVBQUU7UUFDWixNQUFNLFlBQVksR0FBRyxLQUFLLEdBQUcsR0FBRyxDQUFDO1FBQ2pDLE9BQU8sWUFBWSxDQUFDLFlBQVksRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLG9DQUFvQyxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztLQUMvSTtJQUNELE9BQU8sS0FBSyxDQUFDO0FBQ2YsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29sdW1uIH0gZnJvbSAnLi8uLi9tb2RlbHMvY29sdW1uLmludGVyZmFjZSc7XHJcbmltcG9ydCB7IEZvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2Zvcm1hdHRlci5pbnRlcmZhY2UnO1xyXG5pbXBvcnQgeyBmb3JtYXROdW1iZXIgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucyB9IGZyb20gJy4vZm9ybWF0dGVyVXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBwZXJjZW50Rm9ybWF0dGVyOiBGb3JtYXR0ZXIgPSAocm93OiBudW1iZXIsIGNlbGw6IG51bWJlciwgdmFsdWU6IGFueSwgY29sdW1uRGVmOiBDb2x1bW4sIGRhdGFDb250ZXh0OiBhbnksIGdyaWQ6IGFueSk6IHN0cmluZyA9PiB7XHJcbiAgY29uc3QgaXNOdW1iZXIgPSAodmFsdWUgPT09IG51bGwgfHwgdmFsdWUgPT09IHVuZGVmaW5lZCB8fCB2YWx1ZSA9PT0gJycpID8gZmFsc2UgOiAhaXNOYU4oK3ZhbHVlKTtcclxuICBjb25zdCBtaW5EZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdtaW5EZWNpbWFsJywgY29sdW1uRGVmLCBncmlkKTtcclxuICBjb25zdCBtYXhEZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdtYXhEZWNpbWFsJywgY29sdW1uRGVmLCBncmlkKTtcclxuICBjb25zdCBkZWNpbWFsU2VwYXJhdG9yID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdkZWNpbWFsU2VwYXJhdG9yJywgY29sdW1uRGVmLCBncmlkLCAnLicpO1xyXG4gIGNvbnN0IHRob3VzYW5kU2VwYXJhdG9yID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCd0aG91c2FuZFNlcGFyYXRvcicsIGNvbHVtbkRlZiwgZ3JpZCwgJycpO1xyXG4gIGNvbnN0IGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzJywgY29sdW1uRGVmLCBncmlkLCBmYWxzZSk7XHJcblxyXG4gIGlmIChpc051bWJlcikge1xyXG4gICAgY29uc3QgcGVyY2VudFZhbHVlID0gdmFsdWUgKiAxMDA7XHJcbiAgICByZXR1cm4gZm9ybWF0TnVtYmVyKHBlcmNlbnRWYWx1ZSwgbWluRGVjaW1hbCwgbWF4RGVjaW1hbCwgZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzLCAnJywgJyUnLCBkZWNpbWFsU2VwYXJhdG9yLCB0aG91c2FuZFNlcGFyYXRvcik7XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZTtcclxufTtcclxuIl19