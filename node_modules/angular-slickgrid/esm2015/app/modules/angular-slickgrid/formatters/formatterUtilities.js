import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import * as moment_ from 'moment-mini';
const moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
/**
 * Find the option value from the following (in order of execution)
 * 1- Column Definition "params"
 * 2- Grid Options "formatterOptions"
 * 3- nothing found, return default value provided
 */
export function getValueFromParamsOrFormatterOptions(optionName, columnDef, grid, defaultValue) {
    const gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
    const params = columnDef && columnDef.params;
    if (params && params.hasOwnProperty(optionName)) {
        return params[optionName];
    }
    else if (gridOptions.formatterOptions && gridOptions.formatterOptions.hasOwnProperty(optionName)) {
        return gridOptions.formatterOptions[optionName];
    }
    return defaultValue;
}
/** From a FieldType, return the associated date Formatter */
export function getAssociatedDateFormatter(fieldType, defaultSeparator) {
    const defaultDateFormat = mapMomentDateFormatWithFieldType(fieldType);
    return (row, cell, value, columnDef, dataContext, grid) => {
        const gridOptions = ((grid && typeof grid.getOptions === 'function') ? grid.getOptions() : {});
        const customSeparator = gridOptions && gridOptions.formatterOptions && gridOptions.formatterOptions.dateSeparator || defaultSeparator;
        const isDateValid = moment(value, defaultDateFormat, false).isValid();
        let outputDate = (value && isDateValid) ? moment(value).format(defaultDateFormat) : value;
        // user can customize the separator through the "formatterOptions"
        // if that is the case we need to replace the default "/" to the new separator
        if (outputDate && customSeparator !== defaultSeparator) {
            const regex = new RegExp(defaultSeparator, 'ig'); // find separator globally
            outputDate = outputDate.replace(regex, customSeparator);
        }
        return outputDate;
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWF0dGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9mb3JtYXR0ZXJzL2Zvcm1hdHRlclV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsZ0NBQWdDLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN6RSxPQUFPLEtBQUssT0FBTyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxzSEFBc0g7QUFFOUk7Ozs7O0dBS0c7QUFDSCxNQUFNLFVBQVUsb0NBQW9DLENBQUMsVUFBa0IsRUFBRSxTQUFpQixFQUFFLElBQVMsRUFBRSxZQUFrQjtJQUN2SCxNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQWUsQ0FBQztJQUM3RyxNQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUU3QyxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxFQUFFO1FBQy9DLE9BQU8sTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0tBQzNCO1NBQU0sSUFBSSxXQUFXLENBQUMsZ0JBQWdCLElBQUksV0FBVyxDQUFDLGdCQUFnQixDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsRUFBRTtRQUNsRyxPQUFPLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNqRDtJQUNELE9BQU8sWUFBWSxDQUFDO0FBQ3RCLENBQUM7QUFFRCw2REFBNkQ7QUFDN0QsTUFBTSxVQUFVLDBCQUEwQixDQUFDLFNBQW9CLEVBQUUsZ0JBQXdCO0lBQ3ZGLE1BQU0saUJBQWlCLEdBQUcsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFdEUsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTLEVBQUUsRUFBRTtRQUMvRixNQUFNLFdBQVcsR0FBRyxDQUFDLENBQUMsSUFBSSxJQUFJLE9BQU8sSUFBSSxDQUFDLFVBQVUsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQWUsQ0FBQztRQUM3RyxNQUFNLGVBQWUsR0FBRyxXQUFXLElBQUksV0FBVyxDQUFDLGdCQUFnQixJQUFJLFdBQVcsQ0FBQyxnQkFBZ0IsQ0FBQyxhQUFhLElBQUksZ0JBQWdCLENBQUM7UUFFdEksTUFBTSxXQUFXLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxpQkFBaUIsRUFBRSxLQUFLLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUN0RSxJQUFJLFVBQVUsR0FBRyxDQUFDLEtBQUssSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFFMUYsa0VBQWtFO1FBQ2xFLDhFQUE4RTtRQUM5RSxJQUFJLFVBQVUsSUFBSSxlQUFlLEtBQUssZ0JBQWdCLEVBQUU7WUFDdEQsTUFBTSxLQUFLLEdBQUcsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQywwQkFBMEI7WUFDNUUsVUFBVSxHQUFHLFVBQVUsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLGVBQWUsQ0FBQyxDQUFDO1NBQ3pEO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQyxDQUFDO0FBQ0osQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgRmllbGRUeXBlLCBGb3JtYXR0ZXIsIEdyaWRPcHRpb24gfSBmcm9tICcuLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCAqIGFzIG1vbWVudF8gZnJvbSAnbW9tZW50LW1pbmknO1xyXG5jb25zdCBtb21lbnQgPSBtb21lbnRfOyAvLyBwYXRjaCB0byBmaXggcm9sbHVwIFwibW9tZW50IGhhcyBubyBkZWZhdWx0IGV4cG9ydFwiIGlzc3VlLCBkb2N1bWVudCBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9yb2xsdXAvcm9sbHVwL2lzc3Vlcy82NzBcclxuXHJcbi8qKlxyXG4gKiBGaW5kIHRoZSBvcHRpb24gdmFsdWUgZnJvbSB0aGUgZm9sbG93aW5nIChpbiBvcmRlciBvZiBleGVjdXRpb24pXHJcbiAqIDEtIENvbHVtbiBEZWZpbml0aW9uIFwicGFyYW1zXCJcclxuICogMi0gR3JpZCBPcHRpb25zIFwiZm9ybWF0dGVyT3B0aW9uc1wiXHJcbiAqIDMtIG5vdGhpbmcgZm91bmQsIHJldHVybiBkZWZhdWx0IHZhbHVlIHByb3ZpZGVkXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKG9wdGlvbk5hbWU6IHN0cmluZywgY29sdW1uRGVmOiBDb2x1bW4sIGdyaWQ6IGFueSwgZGVmYXVsdFZhbHVlPzogYW55KSB7XHJcbiAgY29uc3QgZ3JpZE9wdGlvbnMgPSAoKGdyaWQgJiYgdHlwZW9mIGdyaWQuZ2V0T3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykgPyBncmlkLmdldE9wdGlvbnMoKSA6IHt9KSBhcyBHcmlkT3B0aW9uO1xyXG4gIGNvbnN0IHBhcmFtcyA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYucGFyYW1zO1xyXG5cclxuICBpZiAocGFyYW1zICYmIHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShvcHRpb25OYW1lKSkge1xyXG4gICAgcmV0dXJuIHBhcmFtc1tvcHRpb25OYW1lXTtcclxuICB9IGVsc2UgaWYgKGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnMgJiYgZ3JpZE9wdGlvbnMuZm9ybWF0dGVyT3B0aW9ucy5oYXNPd25Qcm9wZXJ0eShvcHRpb25OYW1lKSkge1xyXG4gICAgcmV0dXJuIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnNbb3B0aW9uTmFtZV07XHJcbiAgfVxyXG4gIHJldHVybiBkZWZhdWx0VmFsdWU7XHJcbn1cclxuXHJcbi8qKiBGcm9tIGEgRmllbGRUeXBlLCByZXR1cm4gdGhlIGFzc29jaWF0ZWQgZGF0ZSBGb3JtYXR0ZXIgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGdldEFzc29jaWF0ZWREYXRlRm9ybWF0dGVyKGZpZWxkVHlwZTogRmllbGRUeXBlLCBkZWZhdWx0U2VwYXJhdG9yOiBzdHJpbmcpOiBGb3JtYXR0ZXIge1xyXG4gIGNvbnN0IGRlZmF1bHREYXRlRm9ybWF0ID0gbWFwTW9tZW50RGF0ZUZvcm1hdFdpdGhGaWVsZFR5cGUoZmllbGRUeXBlKTtcclxuXHJcbiAgcmV0dXJuIChyb3c6IG51bWJlciwgY2VsbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZGF0YUNvbnRleHQ6IGFueSwgZ3JpZDogYW55KSA9PiB7XHJcbiAgICBjb25zdCBncmlkT3B0aW9ucyA9ICgoZ3JpZCAmJiB0eXBlb2YgZ3JpZC5nZXRPcHRpb25zID09PSAnZnVuY3Rpb24nKSA/IGdyaWQuZ2V0T3B0aW9ucygpIDoge30pIGFzIEdyaWRPcHRpb247XHJcbiAgICBjb25zdCBjdXN0b21TZXBhcmF0b3IgPSBncmlkT3B0aW9ucyAmJiBncmlkT3B0aW9ucy5mb3JtYXR0ZXJPcHRpb25zICYmIGdyaWRPcHRpb25zLmZvcm1hdHRlck9wdGlvbnMuZGF0ZVNlcGFyYXRvciB8fCBkZWZhdWx0U2VwYXJhdG9yO1xyXG5cclxuICAgIGNvbnN0IGlzRGF0ZVZhbGlkID0gbW9tZW50KHZhbHVlLCBkZWZhdWx0RGF0ZUZvcm1hdCwgZmFsc2UpLmlzVmFsaWQoKTtcclxuICAgIGxldCBvdXRwdXREYXRlID0gKHZhbHVlICYmIGlzRGF0ZVZhbGlkKSA/IG1vbWVudCh2YWx1ZSkuZm9ybWF0KGRlZmF1bHREYXRlRm9ybWF0KSA6IHZhbHVlO1xyXG5cclxuICAgIC8vIHVzZXIgY2FuIGN1c3RvbWl6ZSB0aGUgc2VwYXJhdG9yIHRocm91Z2ggdGhlIFwiZm9ybWF0dGVyT3B0aW9uc1wiXHJcbiAgICAvLyBpZiB0aGF0IGlzIHRoZSBjYXNlIHdlIG5lZWQgdG8gcmVwbGFjZSB0aGUgZGVmYXVsdCBcIi9cIiB0byB0aGUgbmV3IHNlcGFyYXRvclxyXG4gICAgaWYgKG91dHB1dERhdGUgJiYgY3VzdG9tU2VwYXJhdG9yICE9PSBkZWZhdWx0U2VwYXJhdG9yKSB7XHJcbiAgICAgIGNvbnN0IHJlZ2V4ID0gbmV3IFJlZ0V4cChkZWZhdWx0U2VwYXJhdG9yLCAnaWcnKTsgLy8gZmluZCBzZXBhcmF0b3IgZ2xvYmFsbHlcclxuICAgICAgb3V0cHV0RGF0ZSA9IG91dHB1dERhdGUucmVwbGFjZShyZWdleCwgY3VzdG9tU2VwYXJhdG9yKTtcclxuICAgIH1cclxuXHJcbiAgICByZXR1cm4gb3V0cHV0RGF0ZTtcclxuICB9O1xyXG59XHJcbiJdfQ==