import { arrayToCsvFormatter } from './arrayToCsvFormatter';
import { findOrDefault } from '../services/utilities';
/**
 * A formatter to show the label property value of an editor collection
 */
export const collectionEditorFormatter = (row, cell, value, columnDef, dataContext) => {
    if (!value || !columnDef || !columnDef.internalColumnEditor || !columnDef.internalColumnEditor.collection
        || !columnDef.internalColumnEditor.collection.length) {
        return value;
    }
    const { internalColumnEditor, internalColumnEditor: { collection } } = columnDef;
    const labelName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.label : 'label';
    const valueName = (internalColumnEditor.customStructure) ? internalColumnEditor.customStructure.value : 'value';
    if (Array.isArray(value)) {
        if (collection.every(x => typeof x === 'string')) {
            return arrayToCsvFormatter(row, cell, value.map((v) => findOrDefault(collection, (c) => c === v)), columnDef, dataContext);
        }
        else {
            return arrayToCsvFormatter(row, cell, value.map((v) => findOrDefault(collection, (c) => c[valueName] === v)[labelName]), columnDef, dataContext);
        }
    }
    return findOrDefault(collection, (c) => c[valueName] === value)[labelName] || '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbkVkaXRvckZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9jb2xsZWN0aW9uRWRpdG9yRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTVELE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RDs7R0FFRztBQUNILE1BQU0sQ0FBQyxNQUFNLHlCQUF5QixHQUFjLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxLQUFVLEVBQUUsU0FBaUIsRUFBRSxXQUFnQixFQUFFLEVBQUU7SUFDakksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsQ0FBQyxVQUFVO1dBQ3BHLENBQUMsU0FBUyxDQUFDLG9CQUFvQixDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7UUFDdEQsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELE1BQU0sRUFBRSxvQkFBb0IsRUFBRSxvQkFBb0IsRUFBRSxFQUFFLFVBQVUsRUFBRSxFQUFFLEdBQUcsU0FBUyxDQUFDO0lBQ2pGLE1BQU0sU0FBUyxHQUFHLENBQUMsb0JBQW9CLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQztJQUNoSCxNQUFNLFNBQVMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxvQkFBb0IsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7SUFFaEgsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxLQUFLLFFBQVEsQ0FBQyxFQUFFO1lBQ2hELE9BQU8sbUJBQW1CLENBQUMsR0FBRyxFQUM1QixJQUFJLEVBQ0osS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsYUFBYSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQU0sRUFBRSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQ3JFLFNBQVMsRUFDVCxXQUFXLENBQUMsQ0FBQztTQUNoQjthQUFNO1lBQ0wsT0FBTyxtQkFBbUIsQ0FBQyxHQUFHLEVBQzVCLElBQUksRUFDSixLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsVUFBVSxFQUFFLENBQUMsQ0FBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsRUFDM0YsU0FBUyxFQUNULFdBQVcsQ0FBQyxDQUFDO1NBQ2hCO0tBQ0Y7SUFFRCxPQUFPLGFBQWEsQ0FBQyxVQUFVLEVBQUUsQ0FBQyxDQUFNLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsS0FBSyxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxFQUFFLENBQUM7QUFDeEYsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJyYXlUb0NzdkZvcm1hdHRlciB9IGZyb20gJy4vYXJyYXlUb0NzdkZvcm1hdHRlcic7XHJcbmltcG9ydCB7IENvbHVtbiwgRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBmaW5kT3JEZWZhdWx0IH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuXHJcbi8qKlxyXG4gKiBBIGZvcm1hdHRlciB0byBzaG93IHRoZSBsYWJlbCBwcm9wZXJ0eSB2YWx1ZSBvZiBhbiBlZGl0b3IgY29sbGVjdGlvblxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IGNvbGxlY3Rpb25FZGl0b3JGb3JtYXR0ZXI6IEZvcm1hdHRlciA9IChyb3c6IG51bWJlciwgY2VsbDogbnVtYmVyLCB2YWx1ZTogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZGF0YUNvbnRleHQ6IGFueSkgPT4ge1xyXG4gIGlmICghdmFsdWUgfHwgIWNvbHVtbkRlZiB8fCAhY29sdW1uRGVmLmludGVybmFsQ29sdW1uRWRpdG9yIHx8ICFjb2x1bW5EZWYuaW50ZXJuYWxDb2x1bW5FZGl0b3IuY29sbGVjdGlvblxyXG4gICAgfHwgIWNvbHVtbkRlZi5pbnRlcm5hbENvbHVtbkVkaXRvci5jb2xsZWN0aW9uLmxlbmd0aCkge1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgeyBpbnRlcm5hbENvbHVtbkVkaXRvciwgaW50ZXJuYWxDb2x1bW5FZGl0b3I6IHsgY29sbGVjdGlvbiB9IH0gPSBjb2x1bW5EZWY7XHJcbiAgY29uc3QgbGFiZWxOYW1lID0gKGludGVybmFsQ29sdW1uRWRpdG9yLmN1c3RvbVN0cnVjdHVyZSkgPyBpbnRlcm5hbENvbHVtbkVkaXRvci5jdXN0b21TdHJ1Y3R1cmUubGFiZWwgOiAnbGFiZWwnO1xyXG4gIGNvbnN0IHZhbHVlTmFtZSA9IChpbnRlcm5hbENvbHVtbkVkaXRvci5jdXN0b21TdHJ1Y3R1cmUpID8gaW50ZXJuYWxDb2x1bW5FZGl0b3IuY3VzdG9tU3RydWN0dXJlLnZhbHVlIDogJ3ZhbHVlJztcclxuXHJcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICBpZiAoY29sbGVjdGlvbi5ldmVyeSh4ID0+IHR5cGVvZiB4ID09PSAnc3RyaW5nJykpIHtcclxuICAgICAgcmV0dXJuIGFycmF5VG9Dc3ZGb3JtYXR0ZXIocm93LFxyXG4gICAgICAgIGNlbGwsXHJcbiAgICAgICAgdmFsdWUubWFwKCh2OiBhbnkpID0+IGZpbmRPckRlZmF1bHQoY29sbGVjdGlvbiwgKGM6IGFueSkgPT4gYyA9PT0gdikpLFxyXG4gICAgICAgIGNvbHVtbkRlZixcclxuICAgICAgICBkYXRhQ29udGV4dCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gYXJyYXlUb0NzdkZvcm1hdHRlcihyb3csXHJcbiAgICAgICAgY2VsbCxcclxuICAgICAgICB2YWx1ZS5tYXAoKHY6IGFueSkgPT4gZmluZE9yRGVmYXVsdChjb2xsZWN0aW9uLCAoYzogYW55KSA9PiBjW3ZhbHVlTmFtZV0gPT09IHYpW2xhYmVsTmFtZV0pLFxyXG4gICAgICAgIGNvbHVtbkRlZixcclxuICAgICAgICBkYXRhQ29udGV4dCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICByZXR1cm4gZmluZE9yRGVmYXVsdChjb2xsZWN0aW9uLCAoYzogYW55KSA9PiBjW3ZhbHVlTmFtZV0gPT09IHZhbHVlKVtsYWJlbE5hbWVdIHx8ICcnO1xyXG59O1xyXG4iXX0=