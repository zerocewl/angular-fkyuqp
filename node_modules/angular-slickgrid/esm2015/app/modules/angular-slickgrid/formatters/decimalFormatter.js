import { formatNumber } from './../services/utilities';
import { getValueFromParamsOrFormatterOptions } from './formatterUtilities';
export const decimalFormatter = (row, cell, value, columnDef, dataContext, grid) => {
    const isNumber = (value === null || value === undefined || value === '') ? false : !isNaN(+value);
    const params = columnDef.params || {};
    let minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);
    let maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 2);
    const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    // @deprecated: decimalPlaces, minDecimalPlaces, maxDecimalPlaces
    // add these extra checks to support previous way of passing the decimal count
    if ((params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces)) {
        console.warn('[Angular-Slickgrid] please consider using "minDecimal" (instead of "minDecimalPlaces" or "decimalPlaces").');
        minDecimal = (params.minDecimalPlaces !== null && params.minDecimalPlaces) || (params.decimalPlaces !== null && params.decimalPlaces);
    }
    if (params.maxDecimalPlaces !== null && params.maxDecimalPlaces) {
        console.warn('[Angular-Slickgrid] please consider using "maxDecimal" (instead of "maxDecimalPlaces").');
        maxDecimal = (params.maxDecimalPlaces !== null && params.maxDecimalPlaces);
    }
    if (isNumber) {
        return formatNumber(value, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '', '', decimalSeparator, thousandSeparator);
    }
    return value;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjaW1hbEZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZm9ybWF0dGVycy9kZWNpbWFsRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN2RCxPQUFPLEVBQUUsb0NBQW9DLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUU1RSxNQUFNLENBQUMsTUFBTSxnQkFBZ0IsR0FBYyxDQUFDLEdBQVcsRUFBRSxJQUFZLEVBQUUsS0FBVSxFQUFFLFNBQWlCLEVBQUUsV0FBZ0IsRUFBRSxJQUFTLEVBQUUsRUFBRTtJQUNuSSxNQUFNLFFBQVEsR0FBRyxDQUFDLEtBQUssS0FBSyxJQUFJLElBQUksS0FBSyxLQUFLLFNBQVMsSUFBSSxLQUFLLEtBQUssRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNsRyxNQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztJQUN0QyxJQUFJLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RixJQUFJLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN4RixNQUFNLGdCQUFnQixHQUFHLG9DQUFvQyxDQUFDLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDeEcsTUFBTSxpQkFBaUIsR0FBRyxvQ0FBb0MsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLE1BQU0sb0NBQW9DLEdBQUcsb0NBQW9DLENBQUMsc0NBQXNDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVsSixpRUFBaUU7SUFDakUsOEVBQThFO0lBQzlFLElBQUksQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1FBQzVILE9BQU8sQ0FBQyxJQUFJLENBQUMsNEdBQTRHLENBQUMsQ0FBQztRQUMzSCxVQUFVLEdBQUcsQ0FBQyxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLGFBQWEsS0FBSyxJQUFJLElBQUksTUFBTSxDQUFDLGFBQWEsQ0FBQyxDQUFDO0tBQ3ZJO0lBQ0QsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLEtBQUssSUFBSSxJQUFJLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtRQUMvRCxPQUFPLENBQUMsSUFBSSxDQUFDLHlGQUF5RixDQUFDLENBQUM7UUFDeEcsVUFBVSxHQUFHLENBQUMsTUFBTSxDQUFDLGdCQUFnQixLQUFLLElBQUksSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUM1RTtJQUVELElBQUksUUFBUSxFQUFFO1FBQ1osT0FBTyxZQUFZLENBQUMsS0FBSyxFQUFFLFVBQVUsRUFBRSxVQUFVLEVBQUUsb0NBQW9DLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsQ0FBQyxDQUFDO0tBQ3ZJO0lBQ0QsT0FBTyxLQUFLLENBQUM7QUFDZixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEZvcm1hdHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgZm9ybWF0TnVtYmVyIH0gZnJvbSAnLi8uLi9zZXJ2aWNlcy91dGlsaXRpZXMnO1xyXG5pbXBvcnQgeyBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMgfSBmcm9tICcuL2Zvcm1hdHRlclV0aWxpdGllcyc7XHJcblxyXG5leHBvcnQgY29uc3QgZGVjaW1hbEZvcm1hdHRlcjogRm9ybWF0dGVyID0gKHJvdzogbnVtYmVyLCBjZWxsOiBudW1iZXIsIHZhbHVlOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBkYXRhQ29udGV4dDogYW55LCBncmlkOiBhbnkpID0+IHtcclxuICBjb25zdCBpc051bWJlciA9ICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbHVlID09PSAnJykgPyBmYWxzZSA6ICFpc05hTigrdmFsdWUpO1xyXG4gIGNvbnN0IHBhcmFtcyA9IGNvbHVtbkRlZi5wYXJhbXMgfHwge307XHJcbiAgbGV0IG1pbkRlY2ltYWwgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ21pbkRlY2ltYWwnLCBjb2x1bW5EZWYsIGdyaWQsIDIpO1xyXG4gIGxldCBtYXhEZWNpbWFsID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdtYXhEZWNpbWFsJywgY29sdW1uRGVmLCBncmlkLCAyKTtcclxuICBjb25zdCBkZWNpbWFsU2VwYXJhdG9yID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCdkZWNpbWFsU2VwYXJhdG9yJywgY29sdW1uRGVmLCBncmlkLCAnLicpO1xyXG4gIGNvbnN0IHRob3VzYW5kU2VwYXJhdG9yID0gZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zKCd0aG91c2FuZFNlcGFyYXRvcicsIGNvbHVtbkRlZiwgZ3JpZCwgJycpO1xyXG4gIGNvbnN0IGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcyA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnZGlzcGxheU5lZ2F0aXZlTnVtYmVyV2l0aFBhcmVudGhlc2VzJywgY29sdW1uRGVmLCBncmlkLCBmYWxzZSk7XHJcblxyXG4gIC8vIEBkZXByZWNhdGVkOiBkZWNpbWFsUGxhY2VzLCBtaW5EZWNpbWFsUGxhY2VzLCBtYXhEZWNpbWFsUGxhY2VzXHJcbiAgLy8gYWRkIHRoZXNlIGV4dHJhIGNoZWNrcyB0byBzdXBwb3J0IHByZXZpb3VzIHdheSBvZiBwYXNzaW5nIHRoZSBkZWNpbWFsIGNvdW50XHJcbiAgaWYgKChwYXJhbXMubWluRGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMubWluRGVjaW1hbFBsYWNlcykgfHwgKHBhcmFtcy5kZWNpbWFsUGxhY2VzICE9PSBudWxsICYmIHBhcmFtcy5kZWNpbWFsUGxhY2VzKSkge1xyXG4gICAgY29uc29sZS53YXJuKCdbQW5ndWxhci1TbGlja2dyaWRdIHBsZWFzZSBjb25zaWRlciB1c2luZyBcIm1pbkRlY2ltYWxcIiAoaW5zdGVhZCBvZiBcIm1pbkRlY2ltYWxQbGFjZXNcIiBvciBcImRlY2ltYWxQbGFjZXNcIikuJyk7XHJcbiAgICBtaW5EZWNpbWFsID0gKHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzICE9PSBudWxsICYmIHBhcmFtcy5taW5EZWNpbWFsUGxhY2VzKSB8fCAocGFyYW1zLmRlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLmRlY2ltYWxQbGFjZXMpO1xyXG4gIH1cclxuICBpZiAocGFyYW1zLm1heERlY2ltYWxQbGFjZXMgIT09IG51bGwgJiYgcGFyYW1zLm1heERlY2ltYWxQbGFjZXMpIHtcclxuICAgIGNvbnNvbGUud2FybignW0FuZ3VsYXItU2xpY2tncmlkXSBwbGVhc2UgY29uc2lkZXIgdXNpbmcgXCJtYXhEZWNpbWFsXCIgKGluc3RlYWQgb2YgXCJtYXhEZWNpbWFsUGxhY2VzXCIpLicpO1xyXG4gICAgbWF4RGVjaW1hbCA9IChwYXJhbXMubWF4RGVjaW1hbFBsYWNlcyAhPT0gbnVsbCAmJiBwYXJhbXMubWF4RGVjaW1hbFBsYWNlcyk7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNOdW1iZXIpIHtcclxuICAgIHJldHVybiBmb3JtYXROdW1iZXIodmFsdWUsIG1pbkRlY2ltYWwsIG1heERlY2ltYWwsIGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcywgJycsICcnLCBkZWNpbWFsU2VwYXJhdG9yLCB0aG91c2FuZFNlcGFyYXRvcik7XHJcbiAgfVxyXG4gIHJldHVybiB2YWx1ZTtcclxufTtcclxuXHJcbiJdfQ==