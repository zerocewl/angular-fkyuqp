import * as tslib_1 from "tslib";
import { Component, Input, Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { Constants } from '../constants';
import { PaginationService } from '../services/pagination.service';
import { unsubscribeAllObservables } from '../services/utilities';
let SlickPaginationComponent = class SlickPaginationComponent {
    /** Constructor */
    constructor(paginationService, translate) {
        this.paginationService = paginationService;
        this.translate = translate;
        this.subscriptions = [];
        this._enableTranslate = false;
        // text translations (handled by ngx-translate or by custom locale)
        this.textItemsPerPage = 'items per page';
        this.textItems = 'items';
        this.textOf = 'of';
        this.textPage = 'Page';
    }
    get availablePageSizes() {
        return this.paginationService.availablePageSizes;
    }
    get dataFrom() {
        return this.paginationService.dataFrom;
    }
    get dataTo() {
        return this.paginationService.dataTo;
    }
    get itemsPerPage() {
        return this.paginationService.itemsPerPage;
    }
    get pageCount() {
        return this.paginationService.pageCount;
    }
    get pageNumber() {
        return this.paginationService.pageNumber;
    }
    set pageNumber(page) {
        // the setter has to be declared but we won't use it, instead we will use the "changeToCurrentPage()" to only update the value after ENTER keydown event
    }
    get totalItems() {
        return this.paginationService.totalItems;
    }
    ngOnDestroy() {
        this.dispose();
    }
    ngOnInit() {
        const gridOptions = this.gridOptions || {};
        this._enableTranslate = gridOptions && gridOptions.enableTranslate || false;
        this._locales = gridOptions && gridOptions.locales || Constants.locales;
        if (this._enableTranslate && !this.translate) {
            throw new Error('[Angular-Slickgrid] requires "ngx-translate" to be installed and configured when the grid option "enableTranslate" is enabled.');
        }
        this.translateAllUiTexts(this._locales);
        // translate all the text using ngx-translate or custom locales
        if (this._enableTranslate && this.translate && this.translate.onLangChange) {
            this.subscriptions.push(this.translate.onLangChange.subscribe(() => this.translateAllUiTexts(this._locales)));
        }
    }
    changeToFirstPage(event) {
        this.paginationService.goToFirstPage(event);
    }
    changeToLastPage(event) {
        this.paginationService.goToLastPage(event);
    }
    changeToNextPage(event) {
        this.paginationService.goToNextPage(event);
    }
    changeToPreviousPage(event) {
        this.paginationService.goToPreviousPage(event);
    }
    changeToCurrentPage(event) {
        let pageNumber = 1;
        if (event && event.currentTarget && event.currentTarget.value) {
            pageNumber = +(event.currentTarget.value);
        }
        this.paginationService.goToPageNumber(pageNumber, event);
    }
    changeItemPerPage(event) {
        let itemsPerPage = 1;
        if (event && event.currentTarget && event.currentTarget.value) {
            itemsPerPage = +(event.currentTarget.value);
        }
        this.paginationService.changeItemPerPage(itemsPerPage, event);
    }
    dispose() {
        this.paginationService.dispose();
        // also unsubscribe all Angular Subscriptions
        this.subscriptions = unsubscribeAllObservables(this.subscriptions);
    }
    // --
    // private functions
    // --------------------
    /** Translate all the texts shown in the UI, use ngx-translate service when available or custom locales when service is null */
    translateAllUiTexts(locales) {
        if (this._enableTranslate && this.translate && this.translate.instant && this.translate.currentLang) {
            this.textItemsPerPage = this.translate.instant('ITEMS_PER_PAGE');
            this.textItems = this.translate.instant('ITEMS');
            this.textOf = this.translate.instant('OF');
            this.textPage = this.translate.instant('PAGE');
        }
        else if (locales) {
            this.textItemsPerPage = locales.TEXT_ITEMS_PER_PAGE || 'TEXT_ITEMS_PER_PAGE';
            this.textItems = locales.TEXT_ITEMS || 'TEXT_ITEMS';
            this.textOf = locales.TEXT_OF || 'TEXT_OF';
            this.textPage = locales.TEXT_PAGE || 'TEXT_PAGE';
        }
    }
};
tslib_1.__decorate([
    Input(),
    tslib_1.__metadata("design:type", Object)
], SlickPaginationComponent.prototype, "gridOptions", void 0);
SlickPaginationComponent = tslib_1.__decorate([
    Component({
        selector: 'slick-pagination',
        template: "<div class=\"slick-pagination\">\r\n  <div class=\"slick-pagination-nav\">\r\n    <nav aria-label=\"Page navigation\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" [ngClass]=\"(pageNumber === 1 || totalItems === 0) ? 'disabled' : ''\">\r\n          <a class=\"page-link icon-seek-first fa fa-angle-double-left\" aria-label=\"First\"\r\n            (click)=\"changeToFirstPage($event)\">\r\n          </a>\r\n        </li>\r\n        <li class=\"page-item\" [ngClass]=\"(pageNumber === 1 || totalItems === 0) ? 'disabled' : ''\">\r\n          <a class=\"page-link icon-seek-prev fa fa-angle-left\" aria-label=\"Previous\"\r\n            (click)=\"changeToPreviousPage($event)\">\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n\r\n    <div class=\"slick-page-number\">\r\n      <span>{{textPage}}</span>\r\n      <input type=\"text\" class=\"form-control\" data-test=\"page-number-input\" [value]=\"pageNumber\" size=\"1\"\r\n        [readOnly]=\"totalItems === 0\" (change)=\"changeToCurrentPage($event)\">\r\n      <span>{{textOf}}</span><span data-test=\"page-count\"> {{pageCount}}</span>\r\n    </div>\r\n\r\n    <nav aria-label=\"Page navigation\">\r\n      <ul class=\"pagination\">\r\n        <li class=\"page-item\" [ngClass]=\"(pageNumber === pageCount || totalItems === 0) ? 'disabled' : ''\">\r\n          <a class=\"page-link icon-seek-next text-center fa fa-lg fa-angle-right\" aria-label=\"Next\"\r\n            (click)=\"changeToNextPage($event)\">\r\n          </a>\r\n        </li>\r\n        <li class=\"page-item\" [ngClass]=\"(pageNumber === pageCount || totalItems === 0) ? 'disabled' : ''\">\r\n          <a class=\"page-link icon-seek-end fa fa-lg fa-angle-double-right\" aria-label=\"Last\"\r\n            (click)=\"changeToLastPage($event)\">\r\n          </a>\r\n        </li>\r\n      </ul>\r\n    </nav>\r\n  </div>\r\n  <span class=\"slick-pagination-settings\">\r\n    <select id=\"items-per-page-label\" [value]=\"itemsPerPage\" (change)=\"changeItemPerPage($event)\">\r\n      <option value=\"{{pageSize}}\" *ngFor=\"let pageSize of availablePageSizes\">{{pageSize}}</option>\r\n    </select>\r\n    <span>{{textItemsPerPage}}</span>,\r\n    <span class=\"slick-pagination-count\">\r\n      <span *ngIf=\"totalItems\">\r\n        <span class=\"page-info-from-to\">\r\n          <span data-test=\"item-from\">{{dataFrom}}</span>-<span data-test=\"item-to\">{{dataTo}}</span>\r\n          {{textOf}}\r\n        </span>\r\n      </span>\r\n      <span class=\"page-info-total-items\">\r\n        <span data-test=\"total-items\">{{totalItems}}</span> {{textItems}}\r\n      </span>\r\n    </span>\r\n  </span>\r\n</div>\r\n"
    }),
    tslib_1.__param(1, Optional()),
    tslib_1.__metadata("design:paramtypes", [PaginationService, TranslateService])
], SlickPaginationComponent);
export { SlickPaginationComponent };
//# sourceMappingURL=data:application/json;base64,