import { AutoCompleteFilter } from './autoCompleteFilter';
import { CompoundDateFilter } from './compoundDateFilter';
import { CompoundInputFilter } from './compoundInputFilter';
import { CompoundInputNumberFilter } from './compoundInputNumberFilter';
import { CompoundInputPasswordFilter } from './compoundInputPasswordFilter';
import { CompoundSliderFilter } from './compoundSliderFilter';
import { InputFilter } from './inputFilter';
import { InputMaskFilter } from './inputMaskFilter';
import { InputNumberFilter } from './inputNumberFilter';
import { InputPasswordFilter } from './inputPasswordFilter';
import { MultipleSelectFilter } from './multipleSelectFilter';
import { NativeSelectFilter } from './nativeSelectFilter';
import { DateRangeFilter } from './dateRangeFilter';
import { SingleSelectFilter } from './singleSelectFilter';
import { SliderFilter } from './sliderFilter';
import { SliderRangeFilter } from './sliderRangeFilter';
export const Filters = {
    /** AutoComplete Filter (using jQuery UI autocomplete feature) */
    autoComplete: AutoCompleteFilter,
    /** Compound Date Filter (compound of Operator + Date picker) */
    compoundDate: CompoundDateFilter,
    /** Alias to compoundInputText to Compound Input Filter (compound of Operator + Input Text) */
    compoundInput: CompoundInputFilter,
    /** Compound Input Number Filter (compound of Operator + Input of type Number) */
    compoundInputNumber: CompoundInputNumberFilter,
    /** Compound Input Password Filter (compound of Operator + Input of type Password, also note that only the text shown in the UI will be masked, filter query is still plain text) */
    compoundInputPassword: CompoundInputPasswordFilter,
    /** Compound Input Text Filter (compound of Operator + Input Text) */
    compoundInputText: CompoundInputFilter,
    /** Compound Slider Filter (compound of Operator + Slider) */
    compoundSlider: CompoundSliderFilter,
    /** Range Date Filter (uses the Flactpickr Date picker with range option) */
    dateRange: DateRangeFilter,
    /** Alias to inputText, input type text filter */
    input: InputFilter,
    /**
     * Input Filter of type text that will be formatted with a mask output
     * e.g.: column: { filter: { model: Filters.inputMask }, params: { mask: '(000) 000-0000' }}
     */
    inputMask: InputMaskFilter,
    /** Input Filter of type Number */
    inputNumber: InputNumberFilter,
    /** Input Filter of type Password (note that only the text shown in the UI will be masked, filter query is still plain text) */
    inputPassword: InputPasswordFilter,
    /** Default Filter, input type text filter */
    inputText: InputFilter,
    /** Multiple Select filter, which uses 3rd party lib "multiple-select.js" */
    multipleSelect: MultipleSelectFilter,
    /** Select filter, which uses native DOM element select */
    select: NativeSelectFilter,
    /** Single Select filter, which uses 3rd party lib "multiple-select.js" */
    singleSelect: SingleSelectFilter,
    /** Slider Filter (only 1 value) */
    slider: SliderFilter,
    /** Slider Range Filter, uses jQuery UI Range Slider (2 values, lowest/highest search range) */
    sliderRange: SliderRangeFilter,
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL2ZpbHRlcnMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDeEUsT0FBTyxFQUFFLDJCQUEyQixFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDNUUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUM1QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEQsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDNUQsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDOUQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDMUQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQ3BELE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQzFELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUM5QyxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxPQUFPLEdBQUc7SUFDckIsaUVBQWlFO0lBQ2pFLFlBQVksRUFBRSxrQkFBa0I7SUFFaEMsZ0VBQWdFO0lBQ2hFLFlBQVksRUFBRSxrQkFBa0I7SUFFaEMsOEZBQThGO0lBQzlGLGFBQWEsRUFBRSxtQkFBbUI7SUFFbEMsaUZBQWlGO0lBQ2pGLG1CQUFtQixFQUFFLHlCQUF5QjtJQUU5QyxvTEFBb0w7SUFDcEwscUJBQXFCLEVBQUUsMkJBQTJCO0lBRWxELHFFQUFxRTtJQUNyRSxpQkFBaUIsRUFBRSxtQkFBbUI7SUFFdEMsNkRBQTZEO0lBQzdELGNBQWMsRUFBRSxvQkFBb0I7SUFFcEMsNEVBQTRFO0lBQzVFLFNBQVMsRUFBRSxlQUFlO0lBRTFCLGlEQUFpRDtJQUNqRCxLQUFLLEVBQUUsV0FBVztJQUVsQjs7O09BR0c7SUFDSCxTQUFTLEVBQUUsZUFBZTtJQUUxQixrQ0FBa0M7SUFDbEMsV0FBVyxFQUFFLGlCQUFpQjtJQUU5QiwrSEFBK0g7SUFDL0gsYUFBYSxFQUFFLG1CQUFtQjtJQUVsQyw2Q0FBNkM7SUFDN0MsU0FBUyxFQUFFLFdBQVc7SUFFdEIsNEVBQTRFO0lBQzVFLGNBQWMsRUFBRSxvQkFBb0I7SUFFcEMsMERBQTBEO0lBQzFELE1BQU0sRUFBRSxrQkFBa0I7SUFFMUIsMEVBQTBFO0lBQzFFLFlBQVksRUFBRSxrQkFBa0I7SUFFaEMsbUNBQW1DO0lBQ25DLE1BQU0sRUFBRSxZQUFZO0lBRXBCLCtGQUErRjtJQUMvRixXQUFXLEVBQUUsaUJBQWlCO0NBQy9CLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEZpbHRlciB9IGZyb20gJy4vLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgQXV0b0NvbXBsZXRlRmlsdGVyIH0gZnJvbSAnLi9hdXRvQ29tcGxldGVGaWx0ZXInO1xyXG5pbXBvcnQgeyBDb21wb3VuZERhdGVGaWx0ZXIgfSBmcm9tICcuL2NvbXBvdW5kRGF0ZUZpbHRlcic7XHJcbmltcG9ydCB7IENvbXBvdW5kSW5wdXRGaWx0ZXIgfSBmcm9tICcuL2NvbXBvdW5kSW5wdXRGaWx0ZXInO1xyXG5pbXBvcnQgeyBDb21wb3VuZElucHV0TnVtYmVyRmlsdGVyIH0gZnJvbSAnLi9jb21wb3VuZElucHV0TnVtYmVyRmlsdGVyJztcclxuaW1wb3J0IHsgQ29tcG91bmRJbnB1dFBhc3N3b3JkRmlsdGVyIH0gZnJvbSAnLi9jb21wb3VuZElucHV0UGFzc3dvcmRGaWx0ZXInO1xyXG5pbXBvcnQgeyBDb21wb3VuZFNsaWRlckZpbHRlciB9IGZyb20gJy4vY29tcG91bmRTbGlkZXJGaWx0ZXInO1xyXG5pbXBvcnQgeyBJbnB1dEZpbHRlciB9IGZyb20gJy4vaW5wdXRGaWx0ZXInO1xyXG5pbXBvcnQgeyBJbnB1dE1hc2tGaWx0ZXIgfSBmcm9tICcuL2lucHV0TWFza0ZpbHRlcic7XHJcbmltcG9ydCB7IElucHV0TnVtYmVyRmlsdGVyIH0gZnJvbSAnLi9pbnB1dE51bWJlckZpbHRlcic7XHJcbmltcG9ydCB7IElucHV0UGFzc3dvcmRGaWx0ZXIgfSBmcm9tICcuL2lucHV0UGFzc3dvcmRGaWx0ZXInO1xyXG5pbXBvcnQgeyBNdWx0aXBsZVNlbGVjdEZpbHRlciB9IGZyb20gJy4vbXVsdGlwbGVTZWxlY3RGaWx0ZXInO1xyXG5pbXBvcnQgeyBOYXRpdmVTZWxlY3RGaWx0ZXIgfSBmcm9tICcuL25hdGl2ZVNlbGVjdEZpbHRlcic7XHJcbmltcG9ydCB7IERhdGVSYW5nZUZpbHRlciB9IGZyb20gJy4vZGF0ZVJhbmdlRmlsdGVyJztcclxuaW1wb3J0IHsgU2luZ2xlU2VsZWN0RmlsdGVyIH0gZnJvbSAnLi9zaW5nbGVTZWxlY3RGaWx0ZXInO1xyXG5pbXBvcnQgeyBTbGlkZXJGaWx0ZXIgfSBmcm9tICcuL3NsaWRlckZpbHRlcic7XHJcbmltcG9ydCB7IFNsaWRlclJhbmdlRmlsdGVyIH0gZnJvbSAnLi9zbGlkZXJSYW5nZUZpbHRlcic7XHJcblxyXG5leHBvcnQgY29uc3QgRmlsdGVycyA9IHtcclxuICAvKiogQXV0b0NvbXBsZXRlIEZpbHRlciAodXNpbmcgalF1ZXJ5IFVJIGF1dG9jb21wbGV0ZSBmZWF0dXJlKSAqL1xyXG4gIGF1dG9Db21wbGV0ZTogQXV0b0NvbXBsZXRlRmlsdGVyLFxyXG5cclxuICAvKiogQ29tcG91bmQgRGF0ZSBGaWx0ZXIgKGNvbXBvdW5kIG9mIE9wZXJhdG9yICsgRGF0ZSBwaWNrZXIpICovXHJcbiAgY29tcG91bmREYXRlOiBDb21wb3VuZERhdGVGaWx0ZXIsXHJcblxyXG4gIC8qKiBBbGlhcyB0byBjb21wb3VuZElucHV0VGV4dCB0byBDb21wb3VuZCBJbnB1dCBGaWx0ZXIgKGNvbXBvdW5kIG9mIE9wZXJhdG9yICsgSW5wdXQgVGV4dCkgKi9cclxuICBjb21wb3VuZElucHV0OiBDb21wb3VuZElucHV0RmlsdGVyLFxyXG5cclxuICAvKiogQ29tcG91bmQgSW5wdXQgTnVtYmVyIEZpbHRlciAoY29tcG91bmQgb2YgT3BlcmF0b3IgKyBJbnB1dCBvZiB0eXBlIE51bWJlcikgKi9cclxuICBjb21wb3VuZElucHV0TnVtYmVyOiBDb21wb3VuZElucHV0TnVtYmVyRmlsdGVyLFxyXG5cclxuICAvKiogQ29tcG91bmQgSW5wdXQgUGFzc3dvcmQgRmlsdGVyIChjb21wb3VuZCBvZiBPcGVyYXRvciArIElucHV0IG9mIHR5cGUgUGFzc3dvcmQsIGFsc28gbm90ZSB0aGF0IG9ubHkgdGhlIHRleHQgc2hvd24gaW4gdGhlIFVJIHdpbGwgYmUgbWFza2VkLCBmaWx0ZXIgcXVlcnkgaXMgc3RpbGwgcGxhaW4gdGV4dCkgKi9cclxuICBjb21wb3VuZElucHV0UGFzc3dvcmQ6IENvbXBvdW5kSW5wdXRQYXNzd29yZEZpbHRlcixcclxuXHJcbiAgLyoqIENvbXBvdW5kIElucHV0IFRleHQgRmlsdGVyIChjb21wb3VuZCBvZiBPcGVyYXRvciArIElucHV0IFRleHQpICovXHJcbiAgY29tcG91bmRJbnB1dFRleHQ6IENvbXBvdW5kSW5wdXRGaWx0ZXIsXHJcblxyXG4gIC8qKiBDb21wb3VuZCBTbGlkZXIgRmlsdGVyIChjb21wb3VuZCBvZiBPcGVyYXRvciArIFNsaWRlcikgKi9cclxuICBjb21wb3VuZFNsaWRlcjogQ29tcG91bmRTbGlkZXJGaWx0ZXIsXHJcblxyXG4gIC8qKiBSYW5nZSBEYXRlIEZpbHRlciAodXNlcyB0aGUgRmxhY3RwaWNrciBEYXRlIHBpY2tlciB3aXRoIHJhbmdlIG9wdGlvbikgKi9cclxuICBkYXRlUmFuZ2U6IERhdGVSYW5nZUZpbHRlcixcclxuXHJcbiAgLyoqIEFsaWFzIHRvIGlucHV0VGV4dCwgaW5wdXQgdHlwZSB0ZXh0IGZpbHRlciAqL1xyXG4gIGlucHV0OiBJbnB1dEZpbHRlcixcclxuXHJcbiAgLyoqXHJcbiAgICogSW5wdXQgRmlsdGVyIG9mIHR5cGUgdGV4dCB0aGF0IHdpbGwgYmUgZm9ybWF0dGVkIHdpdGggYSBtYXNrIG91dHB1dFxyXG4gICAqIGUuZy46IGNvbHVtbjogeyBmaWx0ZXI6IHsgbW9kZWw6IEZpbHRlcnMuaW5wdXRNYXNrIH0sIHBhcmFtczogeyBtYXNrOiAnKDAwMCkgMDAwLTAwMDAnIH19XHJcbiAgICovXHJcbiAgaW5wdXRNYXNrOiBJbnB1dE1hc2tGaWx0ZXIsXHJcblxyXG4gIC8qKiBJbnB1dCBGaWx0ZXIgb2YgdHlwZSBOdW1iZXIgKi9cclxuICBpbnB1dE51bWJlcjogSW5wdXROdW1iZXJGaWx0ZXIsXHJcblxyXG4gIC8qKiBJbnB1dCBGaWx0ZXIgb2YgdHlwZSBQYXNzd29yZCAobm90ZSB0aGF0IG9ubHkgdGhlIHRleHQgc2hvd24gaW4gdGhlIFVJIHdpbGwgYmUgbWFza2VkLCBmaWx0ZXIgcXVlcnkgaXMgc3RpbGwgcGxhaW4gdGV4dCkgKi9cclxuICBpbnB1dFBhc3N3b3JkOiBJbnB1dFBhc3N3b3JkRmlsdGVyLFxyXG5cclxuICAvKiogRGVmYXVsdCBGaWx0ZXIsIGlucHV0IHR5cGUgdGV4dCBmaWx0ZXIgKi9cclxuICBpbnB1dFRleHQ6IElucHV0RmlsdGVyLFxyXG5cclxuICAvKiogTXVsdGlwbGUgU2VsZWN0IGZpbHRlciwgd2hpY2ggdXNlcyAzcmQgcGFydHkgbGliIFwibXVsdGlwbGUtc2VsZWN0LmpzXCIgKi9cclxuICBtdWx0aXBsZVNlbGVjdDogTXVsdGlwbGVTZWxlY3RGaWx0ZXIsXHJcblxyXG4gIC8qKiBTZWxlY3QgZmlsdGVyLCB3aGljaCB1c2VzIG5hdGl2ZSBET00gZWxlbWVudCBzZWxlY3QgKi9cclxuICBzZWxlY3Q6IE5hdGl2ZVNlbGVjdEZpbHRlcixcclxuXHJcbiAgLyoqIFNpbmdsZSBTZWxlY3QgZmlsdGVyLCB3aGljaCB1c2VzIDNyZCBwYXJ0eSBsaWIgXCJtdWx0aXBsZS1zZWxlY3QuanNcIiAqL1xyXG4gIHNpbmdsZVNlbGVjdDogU2luZ2xlU2VsZWN0RmlsdGVyLFxyXG5cclxuICAvKiogU2xpZGVyIEZpbHRlciAob25seSAxIHZhbHVlKSAqL1xyXG4gIHNsaWRlcjogU2xpZGVyRmlsdGVyLFxyXG5cclxuICAvKiogU2xpZGVyIFJhbmdlIEZpbHRlciwgdXNlcyBqUXVlcnkgVUkgUmFuZ2UgU2xpZGVyICgyIHZhbHVlcywgbG93ZXN0L2hpZ2hlc3Qgc2VhcmNoIHJhbmdlKSAqL1xyXG4gIHNsaWRlclJhbmdlOiBTbGlkZXJSYW5nZUZpbHRlcixcclxufTtcclxuIl19