import * as tslib_1 from "tslib";
import { Optional } from '@angular/core';
import { TranslateService } from '@ngx-translate/core';
import { mapFlatpickrDateFormatWithFieldType, mapMomentDateFormatWithFieldType } from '../services/utilities';
import { FieldType, OperatorType, } from '../models/index';
import Flatpickr from 'flatpickr';
import * as moment_ from 'moment-mini';
const moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
require('flatpickr');
let DateRangeFilter = class DateRangeFilter {
    constructor(translate) {
        this.translate = translate;
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
    /** Getter for the Grid Options pulled through the Grid Object */
    get gridOptions() {
        return (this.grid && this.grid.getOptions) ? this.grid.getOptions() : {};
    }
    /** Getter for the Column Filter */
    get columnFilter() {
        return this.columnDef && this.columnDef.filter || {};
    }
    /** Getter for the Current Dates selected */
    get currentDates() {
        return this._currentDates;
    }
    /** Getter to know what would be the default operator when none is specified */
    get defaultOperator() {
        return this.gridOptions.defaultFilterRangeOperator || OperatorType.rangeExclusive;
    }
    /** Getter for the Flatpickr Options */
    get flatpickrOptions() {
        return this._flatpickrOptions || {};
    }
    /** Getter of the Operator to use when doing the filter comparing */
    get operator() {
        return this.columnFilter && this.columnFilter.operator || this.defaultOperator;
    }
    /** Setter for the filter operator */
    set operator(operator) {
        if (this.columnFilter) {
            this.columnFilter.operator = operator;
        }
    }
    /**
     * Initialize the Filter
     */
    init(args) {
        if (!args) {
            throw new Error('[Angular-SlickGrid] A filter must always have an "init()" with valid arguments.');
        }
        this.grid = args.grid;
        this.callback = args.callback;
        this.columnDef = args.columnDef;
        this.searchTerms = (args.hasOwnProperty('searchTerms') ? args.searchTerms : []) || [];
        // step 1, create the DOM Element of the filter which contain the compound Operator+Input
        this.$filterElm = this.createDomElement(this.searchTerms);
        // step 3, subscribe to the keyup event and run the callback when that happens
        // also add/remove "filled" class for styling purposes
        this.$filterInputElm.keyup((e) => {
            this.onTriggerEvent(e);
        });
    }
    /**
     * Clear the filter value
     */
    clear(shouldTriggerQuery = true) {
        if (this.flatInstance) {
            this._clearFilterTriggered = true;
            this._shouldTriggerQuery = shouldTriggerQuery;
            this.searchTerms = [];
            this.flatInstance.clear();
        }
    }
    /**
     * destroy the filter
     */
    destroy() {
        if (this.$filterElm) {
            this.$filterElm.off('keyup').remove();
        }
        if (this.flatInstance && typeof this.flatInstance.destroy === 'function') {
            this.flatInstance.destroy();
        }
    }
    hide() {
        if (this.flatInstance && typeof this.flatInstance.close === 'function') {
            this.flatInstance.close();
        }
    }
    show() {
        if (this.flatInstance && typeof this.flatInstance.open === 'function') {
            this.flatInstance.open();
        }
    }
    /**
     * Set value(s) on the DOM element
     * @params searchTerms
     */
    setValues(searchTerms, operator) {
        let pickerValues = [];
        // get the picker values, if it's a string with the "..", we'll do the split else we'll use the array of search terms
        if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && searchTerms[0].indexOf('..') > 0) {
            pickerValues = (typeof searchTerms === 'string') ? [searchTerms] : searchTerms[0].split('..');
        }
        else if (Array.isArray(searchTerms)) {
            pickerValues = searchTerms;
        }
        if (this.flatInstance && searchTerms) {
            this._currentDates = pickerValues;
            this.flatInstance.setDate(pickerValues);
        }
        // set the operator when defined
        this.operator = operator || this.defaultOperator;
    }
    //
    // private functions
    // ------------------
    buildDatePickerInput(searchTerms) {
        const columnId = this.columnDef && this.columnDef.id;
        const inputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);
        const outputFormat = mapFlatpickrDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateUtc);
        const userFilterOptions = (this.columnFilter && this.columnFilter.filterOptions || {});
        // get current locale, if user defined a custom locale just use or get it the Translate Service if it exist else just use English
        let currentLocale = (userFilterOptions && userFilterOptions.locale) || (this.translate && this.translate.currentLang) || this.gridOptions.locale || 'en';
        if (currentLocale.length > 2) {
            currentLocale = currentLocale.substring(0, 2);
        }
        let pickerValues = [];
        // get the picker values, if it's a string with the "..", we'll do the split else we'll use the array of search terms
        if (typeof searchTerms === 'string' || (Array.isArray(searchTerms) && typeof searchTerms[0] === 'string') && searchTerms[0].indexOf('..') > 0) {
            pickerValues = (typeof searchTerms === 'string') ? [searchTerms] : searchTerms[0].split('..');
        }
        else if (Array.isArray(searchTerms)) {
            pickerValues = searchTerms;
        }
        // if we are preloading searchTerms, we'll keep them for reference
        if (pickerValues) {
            this._currentDates = pickerValues;
            const outFormat = mapMomentDateFormatWithFieldType(this.columnDef.type || FieldType.dateIso);
            this._currentDateStrings = pickerValues.map(date => moment(date).format(outFormat));
        }
        const pickerOptions = {
            defaultDate: pickerValues || '',
            altInput: true,
            altFormat: outputFormat,
            dateFormat: inputFormat,
            mode: 'range',
            wrap: true,
            closeOnSelect: true,
            locale: (currentLocale !== 'en') ? this.loadFlatpickrLocale(currentLocale) : 'en',
            onChange: (selectedDates, dateStr, instance) => {
                if (Array.isArray(selectedDates)) {
                    this._currentDates = selectedDates;
                    const outFormat = mapMomentDateFormatWithFieldType(this.columnDef.outputType || this.columnDef.type || FieldType.dateIso);
                    this._currentDateStrings = selectedDates.map(date => moment(date).format(outFormat));
                    this._currentValue = this._currentDateStrings.join('..');
                }
                // when using the time picker, we can simulate a keyup event to avoid multiple backend request
                // since backend request are only executed after user start typing, changing the time should be treated the same way
                const newEvent = pickerOptions.enableTime ? new CustomEvent('keyup') : undefined;
                this.onTriggerEvent(newEvent);
            }
        };
        // add the time picker when format is UTC (Z) or has the 'h' (meaning hours)
        if (outputFormat && (outputFormat === 'Z' || outputFormat.toLowerCase().includes('h'))) {
            pickerOptions.enableTime = true;
        }
        // merge options with optional user's custom options
        this._flatpickrOptions = Object.assign({}, pickerOptions, userFilterOptions);
        let placeholder = (this.gridOptions) ? (this.gridOptions.defaultFilterPlaceholder || '') : '';
        if (this.columnFilter && this.columnFilter.placeholder) {
            placeholder = this.columnFilter.placeholder;
        }
        const $filterInputElm = $(`<div class="flatpickr search-filter filter-${columnId}"><input type="text" class="form-control" data-input placeholder="${placeholder}"></div>`);
        this.flatInstance = ($filterInputElm[0] && typeof $filterInputElm[0].flatpickr === 'function') ? $filterInputElm[0].flatpickr(this._flatpickrOptions) : Flatpickr($filterInputElm, this._flatpickrOptions);
        return $filterInputElm;
    }
    /**
     * Create the DOM element
     * @params searchTerms
     */
    createDomElement(searchTerms) {
        const fieldId = this.columnDef && this.columnDef.id;
        const $headerElm = this.grid.getHeaderRowColumn(fieldId);
        $($headerElm).empty();
        // create the DOM Select dropdown for the Operator
        this.$filterInputElm = this.buildDatePickerInput(searchTerms);
        /* the DOM element final structure will be
          <div class=flatpickr>
            <input type="text" class="form-control" data-input>
          </div>
        */
        // create the DOM element & add an ID and filter class
        this.$filterInputElm.data('columnId', fieldId);
        // if there's a search term, we will add the "filled" class for styling purposes
        if (Array.isArray(searchTerms) && searchTerms.length > 0 && searchTerms[0] !== '') {
            this.$filterInputElm.addClass('filled');
            this._currentDates = searchTerms;
            this._currentValue = searchTerms[0];
        }
        // append the new DOM element to the header row
        if (this.$filterInputElm && typeof this.$filterInputElm.appendTo === 'function') {
            this.$filterInputElm.appendTo($headerElm);
        }
        return this.$filterInputElm;
    }
    /** Load a different set of locales for Flatpickr to be localized */
    loadFlatpickrLocale(language) {
        let locales = 'en';
        try {
            if (language !== 'en') {
                // change locale if needed, Flatpickr reference: https://chmln.github.io/flatpickr/localization/
                const localeDefault = require(`flatpickr/dist/l10n/${language}.js`).default;
                locales = (localeDefault && localeDefault[language]) ? localeDefault[language] : 'en';
            }
        }
        catch (e) {
            console.warn(`[Angular-Slickgrid - DateRange Filter] It seems that "${language}" is not a locale supported by Flatpickr, we will use "en" instead. `
                + `To avoid seeing this message, you can specifically set "filter: { filterOptions: { locale: 'en' } }" in your column definition.`);
            return 'en';
        }
        return locales;
    }
    onTriggerEvent(e) {
        if (this._clearFilterTriggered) {
            this.callback(e, { columnDef: this.columnDef, clearFilterTriggered: this._clearFilterTriggered, shouldTriggerQuery: this._shouldTriggerQuery });
            this.$filterElm.removeClass('filled');
        }
        else {
            (this._currentDateStrings) ? this.$filterElm.addClass('filled') : this.$filterElm.removeClass('filled');
            this.callback(e, { columnDef: this.columnDef, searchTerms: (this._currentDateStrings ? this._currentDateStrings : [this._currentValue]), operator: this.operator || '', shouldTriggerQuery: this._shouldTriggerQuery });
        }
        // reset both flags for next use
        this._clearFilterTriggered = false;
        this._shouldTriggerQuery = true;
    }
};
DateRangeFilter = tslib_1.__decorate([
    tslib_1.__param(0, Optional()),
    tslib_1.__metadata("design:paramtypes", [TranslateService])
], DateRangeFilter);
export { DateRangeFilter };
//# sourceMappingURL=data:application/json;base64,