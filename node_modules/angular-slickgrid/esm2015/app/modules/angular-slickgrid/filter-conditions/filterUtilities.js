/**
 * Compare 2 objects,
 * we will loop through all properties of the object to compare the entire content of both objects
 * Optionally we can compare by a property key, when that is provided we will compare the object content
 * @param o1
 * @param o2
 * @param compareKey optional
 * @return boolean are objects equals?
 */
export function compareObjects(o1, o2, compareKey) {
    // if user provided an object compare key then compare directly both objects by that key
    if (compareKey && (o1.hasOwnProperty(compareKey) || o2.hasOwnProperty(compareKey))) {
        return o1[compareKey] === o2 || o1 === o2[compareKey] || o1[compareKey] === o2[compareKey];
    }
    // loop through all object properties to compare the full content of the object
    // we'll return false as soon as a difference is detected
    for (const p in o1) {
        if (o1.hasOwnProperty(p)) {
            if (o1[p] !== o2[p]) {
                return false;
            }
        }
    }
    return true;
}
export const testFilterCondition = (operator, value1, value2) => {
    switch (operator) {
        case '<':
        case 'LT': return (value1 < value2);
        case '<=':
        case 'LE': return (value1 <= value2);
        case '>':
        case 'GT': return (value1 > value2);
        case '>=':
        case 'GE': return (value1 >= value2);
        case '!=':
        case '<>':
        case 'NE': return (value1 !== value2);
        case '=':
        case '==':
        case 'EQ': return (value1 === value2);
        case 'IN': return ((value2 && value2.indexOf) ? (value2.indexOf(value1) > -1) : false);
        case 'NIN':
        case 'NOT_IN':
            return ((value2 && value2.includes) ? (!value2.includes(value1)) : false);
        case 'IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return ((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);
            }
            return false;
        case 'NIN_CONTAINS':
        case 'NOT_IN_CONTAINS':
            if (value2 && Array.isArray(value2) && value2.findIndex) {
                return !((value2.findIndex((val) => value1.indexOf(val) > -1)) > -1);
            }
            return false;
    }
    return true;
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9maWx0ZXItY29uZGl0aW9ucy9maWx0ZXJVdGlsaXRpZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUE7Ozs7Ozs7O0dBUUc7QUFDSCxNQUFNLFVBQVUsY0FBYyxDQUFDLEVBQU8sRUFBRSxFQUFPLEVBQUUsVUFBbUI7SUFDbEUsd0ZBQXdGO0lBQ3hGLElBQUksVUFBVSxJQUFJLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEVBQUU7UUFDbEYsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUM1RjtJQUVELCtFQUErRTtJQUMvRSx5REFBeUQ7SUFDekQsS0FBSyxNQUFNLENBQUMsSUFBSSxFQUFFLEVBQUU7UUFDbEIsSUFBSSxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3hCLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxLQUFLLENBQUM7YUFDZDtTQUNGO0tBQ0Y7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLENBQUMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLFFBQXdCLEVBQUUsTUFBVyxFQUFFLE1BQVcsRUFBVyxFQUFFO0lBQ2pHLFFBQVEsUUFBUSxFQUFFO1FBQ2hCLEtBQUssR0FBRyxDQUFDO1FBQ1QsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssR0FBRyxDQUFDO1FBQ1QsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUMsQ0FBQyxPQUFPLENBQUMsTUFBTSxJQUFJLE1BQU0sQ0FBQyxDQUFDO1FBQ3JDLEtBQUssSUFBSSxDQUFDO1FBQ1YsS0FBSyxJQUFJLENBQUM7UUFDVixLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLEtBQUssTUFBTSxDQUFDLENBQUM7UUFDdEMsS0FBSyxHQUFHLENBQUM7UUFDVCxLQUFLLElBQUksQ0FBQztRQUNWLEtBQUssSUFBSSxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sS0FBSyxNQUFNLENBQUMsQ0FBQztRQUN0QyxLQUFLLElBQUksQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RixLQUFLLEtBQUssQ0FBQztRQUNYLEtBQUssUUFBUTtZQUNYLE9BQU8sQ0FBQyxDQUFDLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQzVFLEtBQUssYUFBYTtZQUNoQixJQUFJLE1BQU0sSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7Z0JBQ3ZELE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7YUFDckU7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNmLEtBQUssY0FBYyxDQUFDO1FBQ3BCLEtBQUssaUJBQWlCO1lBQ3BCLElBQUksTUFBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtnQkFDdkQsT0FBTyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsR0FBRyxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RFO1lBQ0QsT0FBTyxLQUFLLENBQUM7S0FDaEI7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9wZXJhdG9yU3RyaW5nIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlIDIgb2JqZWN0cyxcclxuICogd2Ugd2lsbCBsb29wIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgb2YgdGhlIG9iamVjdCB0byBjb21wYXJlIHRoZSBlbnRpcmUgY29udGVudCBvZiBib3RoIG9iamVjdHNcclxuICogT3B0aW9uYWxseSB3ZSBjYW4gY29tcGFyZSBieSBhIHByb3BlcnR5IGtleSwgd2hlbiB0aGF0IGlzIHByb3ZpZGVkIHdlIHdpbGwgY29tcGFyZSB0aGUgb2JqZWN0IGNvbnRlbnRcclxuICogQHBhcmFtIG8xXHJcbiAqIEBwYXJhbSBvMlxyXG4gKiBAcGFyYW0gY29tcGFyZUtleSBvcHRpb25hbFxyXG4gKiBAcmV0dXJuIGJvb2xlYW4gYXJlIG9iamVjdHMgZXF1YWxzP1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVPYmplY3RzKG8xOiBhbnksIG8yOiBhbnksIGNvbXBhcmVLZXk/OiBzdHJpbmcpOiBib29sZWFuIHtcclxuICAvLyBpZiB1c2VyIHByb3ZpZGVkIGFuIG9iamVjdCBjb21wYXJlIGtleSB0aGVuIGNvbXBhcmUgZGlyZWN0bHkgYm90aCBvYmplY3RzIGJ5IHRoYXQga2V5XHJcbiAgaWYgKGNvbXBhcmVLZXkgJiYgKG8xLmhhc093blByb3BlcnR5KGNvbXBhcmVLZXkpIHx8IG8yLmhhc093blByb3BlcnR5KGNvbXBhcmVLZXkpKSkge1xyXG4gICAgcmV0dXJuIG8xW2NvbXBhcmVLZXldID09PSBvMiB8fCBvMSA9PT0gbzJbY29tcGFyZUtleV0gfHwgbzFbY29tcGFyZUtleV0gPT09IG8yW2NvbXBhcmVLZXldO1xyXG4gIH1cclxuXHJcbiAgLy8gbG9vcCB0aHJvdWdoIGFsbCBvYmplY3QgcHJvcGVydGllcyB0byBjb21wYXJlIHRoZSBmdWxsIGNvbnRlbnQgb2YgdGhlIG9iamVjdFxyXG4gIC8vIHdlJ2xsIHJldHVybiBmYWxzZSBhcyBzb29uIGFzIGEgZGlmZmVyZW5jZSBpcyBkZXRlY3RlZFxyXG4gIGZvciAoY29uc3QgcCBpbiBvMSkge1xyXG4gICAgaWYgKG8xLmhhc093blByb3BlcnR5KHApKSB7XHJcbiAgICAgIGlmIChvMVtwXSAhPT0gbzJbcF0pIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIHRydWU7XHJcbn1cclxuXHJcbmV4cG9ydCBjb25zdCB0ZXN0RmlsdGVyQ29uZGl0aW9uID0gKG9wZXJhdG9yOiBPcGVyYXRvclN0cmluZywgdmFsdWUxOiBhbnksIHZhbHVlMjogYW55KTogYm9vbGVhbiA9PiB7XHJcbiAgc3dpdGNoIChvcGVyYXRvcikge1xyXG4gICAgY2FzZSAnPCc6XHJcbiAgICBjYXNlICdMVCc6IHJldHVybiAodmFsdWUxIDwgdmFsdWUyKTtcclxuICAgIGNhc2UgJzw9JzpcclxuICAgIGNhc2UgJ0xFJzogcmV0dXJuICh2YWx1ZTEgPD0gdmFsdWUyKTtcclxuICAgIGNhc2UgJz4nOlxyXG4gICAgY2FzZSAnR1QnOiByZXR1cm4gKHZhbHVlMSA+IHZhbHVlMik7XHJcbiAgICBjYXNlICc+PSc6XHJcbiAgICBjYXNlICdHRSc6IHJldHVybiAodmFsdWUxID49IHZhbHVlMik7XHJcbiAgICBjYXNlICchPSc6XHJcbiAgICBjYXNlICc8Pic6XHJcbiAgICBjYXNlICdORSc6IHJldHVybiAodmFsdWUxICE9PSB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnPSc6XHJcbiAgICBjYXNlICc9PSc6XHJcbiAgICBjYXNlICdFUSc6IHJldHVybiAodmFsdWUxID09PSB2YWx1ZTIpO1xyXG4gICAgY2FzZSAnSU4nOiByZXR1cm4gKCh2YWx1ZTIgJiYgdmFsdWUyLmluZGV4T2YpID8gKHZhbHVlMi5pbmRleE9mKHZhbHVlMSkgPiAtMSkgOiBmYWxzZSk7XHJcbiAgICBjYXNlICdOSU4nOlxyXG4gICAgY2FzZSAnTk9UX0lOJzpcclxuICAgICAgcmV0dXJuICgodmFsdWUyICYmIHZhbHVlMi5pbmNsdWRlcykgPyAoIXZhbHVlMi5pbmNsdWRlcyh2YWx1ZTEpKSA6IGZhbHNlKTtcclxuICAgIGNhc2UgJ0lOX0NPTlRBSU5TJzpcclxuICAgICAgaWYgKHZhbHVlMiAmJiBBcnJheS5pc0FycmF5KHZhbHVlMikgJiYgdmFsdWUyLmZpbmRJbmRleCkge1xyXG4gICAgICAgIHJldHVybiAoKHZhbHVlMi5maW5kSW5kZXgoKHZhbCkgPT4gdmFsdWUxLmluZGV4T2YodmFsKSA+IC0xKSkgPiAtMSk7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgY2FzZSAnTklOX0NPTlRBSU5TJzpcclxuICAgIGNhc2UgJ05PVF9JTl9DT05UQUlOUyc6XHJcbiAgICAgIGlmICh2YWx1ZTIgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZTIpICYmIHZhbHVlMi5maW5kSW5kZXgpIHtcclxuICAgICAgICByZXR1cm4gISgodmFsdWUyLmZpbmRJbmRleCgodmFsKSA9PiB2YWx1ZTEuaW5kZXhPZih2YWwpID4gLTEpKSA+IC0xKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgfVxyXG4gIHJldHVybiB0cnVlO1xyXG59O1xyXG4iXX0=