import { OperatorType } from '../models/index';
import { testFilterCondition } from './filterUtilities';
export const numberFilterCondition = (options) => {
    const cellValue = parseFloat(options.cellValue);
    const searchTerms = Array.isArray(options.searchTerms) && options.searchTerms || [0];
    let isRangeSearch = false;
    let searchValue1;
    let searchValue2;
    if (searchTerms.length === 2 || (typeof searchTerms[0] === 'string' && searchTerms[0].indexOf('..') > 0)) {
        isRangeSearch = true;
        const searchValues = (searchTerms.length === 2) ? searchTerms : searchTerms[0].split('..');
        searchValue1 = parseFloat(Array.isArray(searchValues) && searchValues[0] + '');
        searchValue2 = parseFloat(Array.isArray(searchValues) && searchValues[1] + '');
    }
    else {
        searchValue1 = parseFloat(searchTerms[0] + '');
    }
    if (!searchValue1 && !options.operator) {
        return true;
    }
    if (isRangeSearch) {
        const isInclusive = options.operator && options.operator === OperatorType.rangeInclusive;
        const resultCondition1 = testFilterCondition((isInclusive ? '>=' : '>'), cellValue, searchValue1);
        const resultCondition2 = testFilterCondition((isInclusive ? '<=' : '<'), cellValue, searchValue2);
        return (resultCondition1 && resultCondition2);
    }
    return testFilterCondition(options.operator || '==', cellValue, searchValue1);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibnVtYmVyRmlsdGVyQ29uZGl0aW9uLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9maWx0ZXItY29uZGl0aW9ucy9udW1iZXJGaWx0ZXJDb25kaXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUEwQyxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN2RixPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV4RCxNQUFNLENBQUMsTUFBTSxxQkFBcUIsR0FBb0IsQ0FBQyxPQUE4QixFQUFFLEVBQUU7SUFDdkYsTUFBTSxTQUFTLEdBQUcsVUFBVSxDQUFDLE9BQU8sQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUNoRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsSUFBSSxPQUFPLENBQUMsV0FBVyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFckYsSUFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDO0lBQzFCLElBQUksWUFBWSxDQUFDO0lBQ2pCLElBQUksWUFBWSxDQUFDO0lBRWpCLElBQUksV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLFdBQVcsQ0FBQyxDQUFDLENBQUMsS0FBSyxRQUFRLElBQUssV0FBVyxDQUFDLENBQUMsQ0FBWSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtRQUNwSCxhQUFhLEdBQUcsSUFBSSxDQUFDO1FBQ3JCLE1BQU0sWUFBWSxHQUFHLENBQUMsV0FBVyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBRSxXQUFXLENBQUMsQ0FBQyxDQUFZLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ3ZHLFlBQVksR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsSUFBSSxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDL0UsWUFBWSxHQUFHLFVBQVUsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQyxJQUFJLFlBQVksQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQztLQUNoRjtTQUFNO1FBQ0wsWUFBWSxHQUFHLFVBQVUsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7S0FDaEQ7SUFFRCxJQUFJLENBQUMsWUFBWSxJQUFJLENBQUMsT0FBTyxDQUFDLFFBQVEsRUFBRTtRQUN0QyxPQUFPLElBQUksQ0FBQztLQUNiO0lBRUQsSUFBSSxhQUFhLEVBQUU7UUFDakIsTUFBTSxXQUFXLEdBQUcsT0FBTyxDQUFDLFFBQVEsSUFBSSxPQUFPLENBQUMsUUFBUSxLQUFLLFlBQVksQ0FBQyxjQUFjLENBQUM7UUFDekYsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEcsTUFBTSxnQkFBZ0IsR0FBRyxtQkFBbUIsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRSxTQUFTLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFDbEcsT0FBTyxDQUFDLGdCQUFnQixJQUFJLGdCQUFnQixDQUFDLENBQUM7S0FDL0M7SUFDRCxPQUFPLG1CQUFtQixDQUFDLE9BQU8sQ0FBQyxRQUFRLElBQUksSUFBSSxFQUFFLFNBQVMsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUNoRixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJDb25kaXRpb24sIEZpbHRlckNvbmRpdGlvbk9wdGlvbiwgT3BlcmF0b3JUeXBlIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0IHsgdGVzdEZpbHRlckNvbmRpdGlvbiB9IGZyb20gJy4vZmlsdGVyVXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBudW1iZXJGaWx0ZXJDb25kaXRpb246IEZpbHRlckNvbmRpdGlvbiA9IChvcHRpb25zOiBGaWx0ZXJDb25kaXRpb25PcHRpb24pID0+IHtcclxuICBjb25zdCBjZWxsVmFsdWUgPSBwYXJzZUZsb2F0KG9wdGlvbnMuY2VsbFZhbHVlKTtcclxuICBjb25zdCBzZWFyY2hUZXJtcyA9IEFycmF5LmlzQXJyYXkob3B0aW9ucy5zZWFyY2hUZXJtcykgJiYgb3B0aW9ucy5zZWFyY2hUZXJtcyB8fCBbMF07XHJcblxyXG4gIGxldCBpc1JhbmdlU2VhcmNoID0gZmFsc2U7XHJcbiAgbGV0IHNlYXJjaFZhbHVlMTtcclxuICBsZXQgc2VhcmNoVmFsdWUyO1xyXG5cclxuICBpZiAoc2VhcmNoVGVybXMubGVuZ3RoID09PSAyIHx8ICh0eXBlb2Ygc2VhcmNoVGVybXNbMF0gPT09ICdzdHJpbmcnICYmIChzZWFyY2hUZXJtc1swXSBhcyBzdHJpbmcpLmluZGV4T2YoJy4uJykgPiAwKSkge1xyXG4gICAgaXNSYW5nZVNlYXJjaCA9IHRydWU7XHJcbiAgICBjb25zdCBzZWFyY2hWYWx1ZXMgPSAoc2VhcmNoVGVybXMubGVuZ3RoID09PSAyKSA/IHNlYXJjaFRlcm1zIDogKHNlYXJjaFRlcm1zWzBdIGFzIHN0cmluZykuc3BsaXQoJy4uJyk7XHJcbiAgICBzZWFyY2hWYWx1ZTEgPSBwYXJzZUZsb2F0KEFycmF5LmlzQXJyYXkoc2VhcmNoVmFsdWVzKSAmJiBzZWFyY2hWYWx1ZXNbMF0gKyAnJyk7XHJcbiAgICBzZWFyY2hWYWx1ZTIgPSBwYXJzZUZsb2F0KEFycmF5LmlzQXJyYXkoc2VhcmNoVmFsdWVzKSAmJiBzZWFyY2hWYWx1ZXNbMV0gKyAnJyk7XHJcbiAgfSBlbHNlIHtcclxuICAgIHNlYXJjaFZhbHVlMSA9IHBhcnNlRmxvYXQoc2VhcmNoVGVybXNbMF0gKyAnJyk7XHJcbiAgfVxyXG5cclxuICBpZiAoIXNlYXJjaFZhbHVlMSAmJiAhb3B0aW9ucy5vcGVyYXRvcikge1xyXG4gICAgcmV0dXJuIHRydWU7XHJcbiAgfVxyXG5cclxuICBpZiAoaXNSYW5nZVNlYXJjaCkge1xyXG4gICAgY29uc3QgaXNJbmNsdXNpdmUgPSBvcHRpb25zLm9wZXJhdG9yICYmIG9wdGlvbnMub3BlcmF0b3IgPT09IE9wZXJhdG9yVHlwZS5yYW5nZUluY2x1c2l2ZTtcclxuICAgIGNvbnN0IHJlc3VsdENvbmRpdGlvbjEgPSB0ZXN0RmlsdGVyQ29uZGl0aW9uKChpc0luY2x1c2l2ZSA/ICc+PScgOiAnPicpLCBjZWxsVmFsdWUsIHNlYXJjaFZhbHVlMSk7XHJcbiAgICBjb25zdCByZXN1bHRDb25kaXRpb24yID0gdGVzdEZpbHRlckNvbmRpdGlvbigoaXNJbmNsdXNpdmUgPyAnPD0nIDogJzwnKSwgY2VsbFZhbHVlLCBzZWFyY2hWYWx1ZTIpO1xyXG4gICAgcmV0dXJuIChyZXN1bHRDb25kaXRpb24xICYmIHJlc3VsdENvbmRpdGlvbjIpO1xyXG4gIH1cclxuICByZXR1cm4gdGVzdEZpbHRlckNvbmRpdGlvbihvcHRpb25zLm9wZXJhdG9yIHx8ICc9PScsIGNlbGxWYWx1ZSwgc2VhcmNoVmFsdWUxKTtcclxufTtcclxuIl19