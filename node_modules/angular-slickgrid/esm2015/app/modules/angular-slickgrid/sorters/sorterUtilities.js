import { FieldType } from './../models/index';
import { Sorters } from './index';
import { getAssociatedDateSorter } from './dateUtilities';
export function sortByFieldType(fieldType, value1, value2, sortDirection, sortColumn) {
    let sortResult = 0;
    switch (fieldType) {
        case FieldType.float:
        case FieldType.integer:
        case FieldType.number:
            sortResult = Sorters.numeric(value1, value2, sortDirection);
            break;
        case FieldType.date:
        case FieldType.dateIso:
        case FieldType.dateUtc:
        case FieldType.dateTime:
        case FieldType.dateTimeIso:
        case FieldType.dateTimeIsoAmPm:
        case FieldType.dateTimeIsoAM_PM:
        case FieldType.dateTimeShortIso:
        case FieldType.dateEuro:
        case FieldType.dateEuroShort:
        case FieldType.dateTimeShortEuro:
        case FieldType.dateTimeEuro:
        case FieldType.dateTimeEuroAmPm:
        case FieldType.dateTimeEuroAM_PM:
        case FieldType.dateTimeEuroShort:
        case FieldType.dateTimeEuroShortAmPm:
        case FieldType.dateTimeEuroShortAM_PM:
        case FieldType.dateUs:
        case FieldType.dateUsShort:
        case FieldType.dateTimeShortUs:
        case FieldType.dateTimeUs:
        case FieldType.dateTimeUsAmPm:
        case FieldType.dateTimeUsAM_PM:
        case FieldType.dateTimeUsShort:
        case FieldType.dateTimeUsShortAmPm:
        case FieldType.dateTimeUsShortAM_PM:
            sortResult = getAssociatedDateSorter(fieldType).call(this, value1, value2, sortDirection);
            break;
        case FieldType.object:
            sortResult = Sorters.objectString(value1, value2, sortDirection, sortColumn);
            break;
        default:
            sortResult = Sorters.string(value1, value2, sortDirection);
            break;
    }
    return sortResult;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ydGVyVXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1zbGlja2dyaWQvIiwic291cmNlcyI6WyJhcHAvbW9kdWxlcy9hbmd1bGFyLXNsaWNrZ3JpZC9zb3J0ZXJzL3NvcnRlclV0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQVUsU0FBUyxFQUErQixNQUFNLG1CQUFtQixDQUFDO0FBQ25GLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbEMsT0FBTyxFQUFFLHVCQUF1QixFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFMUQsTUFBTSxVQUFVLGVBQWUsQ0FBQyxTQUFvQixFQUFFLE1BQVcsRUFBRSxNQUFXLEVBQUUsYUFBMkMsRUFBRSxVQUFtQjtJQUM5SSxJQUFJLFVBQVUsR0FBRyxDQUFDLENBQUM7SUFFbkIsUUFBUSxTQUFTLEVBQUU7UUFDakIsS0FBSyxTQUFTLENBQUMsS0FBSyxDQUFDO1FBQ3JCLEtBQUssU0FBUyxDQUFDLE9BQU8sQ0FBQztRQUN2QixLQUFLLFNBQVMsQ0FBQyxNQUFNO1lBQ25CLFVBQVUsR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsYUFBYSxDQUFDLENBQUM7WUFDNUQsTUFBTTtRQUNSLEtBQUssU0FBUyxDQUFDLElBQUksQ0FBQztRQUNwQixLQUFLLFNBQVMsQ0FBQyxPQUFPLENBQUM7UUFDdkIsS0FBSyxTQUFTLENBQUMsT0FBTyxDQUFDO1FBQ3ZCLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUN4QixLQUFLLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDM0IsS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hDLEtBQUssU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hDLEtBQUssU0FBUyxDQUFDLFFBQVEsQ0FBQztRQUN4QixLQUFLLFNBQVMsQ0FBQyxhQUFhLENBQUM7UUFDN0IsS0FBSyxTQUFTLENBQUMsaUJBQWlCLENBQUM7UUFDakMsS0FBSyxTQUFTLENBQUMsWUFBWSxDQUFDO1FBQzVCLEtBQUssU0FBUyxDQUFDLGdCQUFnQixDQUFDO1FBQ2hDLEtBQUssU0FBUyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pDLEtBQUssU0FBUyxDQUFDLGlCQUFpQixDQUFDO1FBQ2pDLEtBQUssU0FBUyxDQUFDLHFCQUFxQixDQUFDO1FBQ3JDLEtBQUssU0FBUyxDQUFDLHNCQUFzQixDQUFDO1FBQ3RDLEtBQUssU0FBUyxDQUFDLE1BQU0sQ0FBQztRQUN0QixLQUFLLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDM0IsS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssU0FBUyxDQUFDLFVBQVUsQ0FBQztRQUMxQixLQUFLLFNBQVMsQ0FBQyxjQUFjLENBQUM7UUFDOUIsS0FBSyxTQUFTLENBQUMsZUFBZSxDQUFDO1FBQy9CLEtBQUssU0FBUyxDQUFDLGVBQWUsQ0FBQztRQUMvQixLQUFLLFNBQVMsQ0FBQyxtQkFBbUIsQ0FBQztRQUNuQyxLQUFLLFNBQVMsQ0FBQyxvQkFBb0I7WUFDakMsVUFBVSxHQUFHLHVCQUF1QixDQUFDLFNBQVMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxhQUFhLENBQUMsQ0FBQztZQUMxRixNQUFNO1FBQ1IsS0FBSyxTQUFTLENBQUMsTUFBTTtZQUNuQixVQUFVLEdBQUcsT0FBTyxDQUFDLFlBQVksQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUMsQ0FBQztZQUM3RSxNQUFNO1FBQ1I7WUFDRSxVQUFVLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLGFBQWEsQ0FBQyxDQUFDO1lBQzNELE1BQU07S0FDVDtJQUVELE9BQU8sVUFBVSxDQUFDO0FBQ3BCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEZpZWxkVHlwZSwgU29ydERpcmVjdGlvbk51bWJlciwgU29ydGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBTb3J0ZXJzIH0gZnJvbSAnLi9pbmRleCc7XHJcbmltcG9ydCB7IGdldEFzc29jaWF0ZWREYXRlU29ydGVyIH0gZnJvbSAnLi9kYXRlVXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzb3J0QnlGaWVsZFR5cGUoZmllbGRUeXBlOiBGaWVsZFR5cGUsIHZhbHVlMTogYW55LCB2YWx1ZTI6IGFueSwgc29ydERpcmVjdGlvbjogbnVtYmVyIHwgU29ydERpcmVjdGlvbk51bWJlciwgc29ydENvbHVtbj86IENvbHVtbikge1xyXG4gIGxldCBzb3J0UmVzdWx0ID0gMDtcclxuXHJcbiAgc3dpdGNoIChmaWVsZFR5cGUpIHtcclxuICAgIGNhc2UgRmllbGRUeXBlLmZsb2F0OlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuaW50ZWdlcjpcclxuICAgIGNhc2UgRmllbGRUeXBlLm51bWJlcjpcclxuICAgICAgc29ydFJlc3VsdCA9IFNvcnRlcnMubnVtZXJpYyh2YWx1ZTEsIHZhbHVlMiwgc29ydERpcmVjdGlvbik7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZTpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVJc286XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVXRjOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWU6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUlzbzpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lSXNvQW1QbTpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lSXNvQU1fUE06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVNob3J0SXNvOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZUV1cm86XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlRXVyb1Nob3J0OlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVTaG9ydEV1cm86XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUV1cm86XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUV1cm9BbVBtOlxyXG4gICAgY2FzZSBGaWVsZFR5cGUuZGF0ZVRpbWVFdXJvQU1fUE06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZUV1cm9TaG9ydDpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lRXVyb1Nob3J0QW1QbTpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lRXVyb1Nob3J0QU1fUE06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVXM6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVXNTaG9ydDpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lU2hvcnRVczpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lVXM6XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzQW1QbTpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lVXNBTV9QTTpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lVXNTaG9ydDpcclxuICAgIGNhc2UgRmllbGRUeXBlLmRhdGVUaW1lVXNTaG9ydEFtUG06XHJcbiAgICBjYXNlIEZpZWxkVHlwZS5kYXRlVGltZVVzU2hvcnRBTV9QTTpcclxuICAgICAgc29ydFJlc3VsdCA9IGdldEFzc29jaWF0ZWREYXRlU29ydGVyKGZpZWxkVHlwZSkuY2FsbCh0aGlzLCB2YWx1ZTEsIHZhbHVlMiwgc29ydERpcmVjdGlvbik7XHJcbiAgICAgIGJyZWFrO1xyXG4gICAgY2FzZSBGaWVsZFR5cGUub2JqZWN0OlxyXG4gICAgICBzb3J0UmVzdWx0ID0gU29ydGVycy5vYmplY3RTdHJpbmcodmFsdWUxLCB2YWx1ZTIsIHNvcnREaXJlY3Rpb24sIHNvcnRDb2x1bW4pO1xyXG4gICAgICBicmVhaztcclxuICAgIGRlZmF1bHQ6XHJcbiAgICAgIHNvcnRSZXN1bHQgPSBTb3J0ZXJzLnN0cmluZyh2YWx1ZTEsIHZhbHVlMiwgc29ydERpcmVjdGlvbik7XHJcbiAgICAgIGJyZWFrO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNvcnRSZXN1bHQ7XHJcbn1cclxuIl19