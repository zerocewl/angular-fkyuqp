import { mapMomentDateFormatWithFieldType } from '../services/utilities';
import { FieldType } from '../models/index';
import * as moment_ from 'moment-mini';
const moment = moment_; // patch to fix rollup "moment has no default export" issue, document here https://github.com/rollup/rollup/issues/670
export function compareDates(value1, value2, sortDirection, format, strict) {
    let diff = 0;
    if (value1 === null || value1 === '' || !moment(value1, format, strict).isValid()) {
        diff = -1;
    }
    else if (value2 === null || value2 === '' || !moment(value2, format, strict).isValid()) {
        diff = 1;
    }
    else {
        const date1 = moment(value1, format, strict);
        const date2 = moment(value2, format, strict);
        diff = parseInt(date1.format('X'), 10) - parseInt(date2.format('X'), 10);
    }
    return sortDirection * (diff === 0 ? 0 : (diff > 0 ? 1 : -1));
}
/** From a FieldType, return the associated date Sorter */
export function getAssociatedDateSorter(fieldType) {
    const FORMAT = (fieldType === FieldType.date) ? moment.ISO_8601 : mapMomentDateFormatWithFieldType(fieldType);
    return (value1, value2, sortDirection) => {
        if (FORMAT === moment.ISO_8601) {
            return compareDates(value1, value2, sortDirection, FORMAT, false);
        }
        return compareDates(value1, value2, sortDirection, FORMAT, true);
    };
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0ZVV0aWxpdGllcy5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvc29ydGVycy9kYXRlVXRpbGl0aWVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxnQ0FBZ0MsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3pFLE9BQU8sRUFBRSxTQUFTLEVBQVUsTUFBTSxpQkFBaUIsQ0FBQztBQUNwRCxPQUFPLEtBQUssT0FBTyxNQUFNLGFBQWEsQ0FBQztBQUN2QyxNQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsQ0FBQyxzSEFBc0g7QUFFOUksTUFBTSxVQUFVLFlBQVksQ0FBQyxNQUFXLEVBQUUsTUFBVyxFQUFFLGFBQXFCLEVBQUUsTUFBNEMsRUFBRSxNQUFnQjtJQUMxSSxJQUFJLElBQUksR0FBRyxDQUFDLENBQUM7SUFFYixJQUFJLE1BQU0sS0FBSyxJQUFJLElBQUksTUFBTSxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1FBQ2pGLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztLQUNYO1NBQU0sSUFBSSxNQUFNLEtBQUssSUFBSSxJQUFJLE1BQU0sS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUUsRUFBRTtRQUN4RixJQUFJLEdBQUcsQ0FBQyxDQUFDO0tBQ1Y7U0FBTTtRQUNMLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdDLElBQUksR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztLQUMxRTtJQUVELE9BQU8sYUFBYSxHQUFHLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2hFLENBQUM7QUFFRCwwREFBMEQ7QUFDMUQsTUFBTSxVQUFVLHVCQUF1QixDQUFDLFNBQW9CO0lBQzFELE1BQU0sTUFBTSxHQUFHLENBQUMsU0FBUyxLQUFLLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsZ0NBQWdDLENBQUMsU0FBUyxDQUFDLENBQUM7SUFFOUcsT0FBTyxDQUFDLE1BQVcsRUFBRSxNQUFXLEVBQUUsYUFBcUIsRUFBRSxFQUFFO1FBQ3pELElBQUksTUFBTSxLQUFLLE1BQU0sQ0FBQyxRQUFRLEVBQUU7WUFDOUIsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ25FO1FBQ0QsT0FBTyxZQUFZLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ25FLENBQUMsQ0FBQztBQUNKLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtYXBNb21lbnREYXRlRm9ybWF0V2l0aEZpZWxkVHlwZSB9IGZyb20gJy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IEZpZWxkVHlwZSwgU29ydGVyIH0gZnJvbSAnLi4vbW9kZWxzL2luZGV4JztcclxuaW1wb3J0ICogYXMgbW9tZW50XyBmcm9tICdtb21lbnQtbWluaSc7XHJcbmNvbnN0IG1vbWVudCA9IG1vbWVudF87IC8vIHBhdGNoIHRvIGZpeCByb2xsdXAgXCJtb21lbnQgaGFzIG5vIGRlZmF1bHQgZXhwb3J0XCIgaXNzdWUsIGRvY3VtZW50IGhlcmUgaHR0cHM6Ly9naXRodWIuY29tL3JvbGx1cC9yb2xsdXAvaXNzdWVzLzY3MFxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNvbXBhcmVEYXRlcyh2YWx1ZTE6IGFueSwgdmFsdWUyOiBhbnksIHNvcnREaXJlY3Rpb246IG51bWJlciwgZm9ybWF0OiBzdHJpbmcgfCBtb21lbnRfLk1vbWVudEJ1aWx0aW5Gb3JtYXQsIHN0cmljdD86IGJvb2xlYW4pIHtcclxuICBsZXQgZGlmZiA9IDA7XHJcblxyXG4gIGlmICh2YWx1ZTEgPT09IG51bGwgfHwgdmFsdWUxID09PSAnJyB8fCAhbW9tZW50KHZhbHVlMSwgZm9ybWF0LCBzdHJpY3QpLmlzVmFsaWQoKSkge1xyXG4gICAgZGlmZiA9IC0xO1xyXG4gIH0gZWxzZSBpZiAodmFsdWUyID09PSBudWxsIHx8IHZhbHVlMiA9PT0gJycgfHwgIW1vbWVudCh2YWx1ZTIsIGZvcm1hdCwgc3RyaWN0KS5pc1ZhbGlkKCkpIHtcclxuICAgIGRpZmYgPSAxO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBkYXRlMSA9IG1vbWVudCh2YWx1ZTEsIGZvcm1hdCwgc3RyaWN0KTtcclxuICAgIGNvbnN0IGRhdGUyID0gbW9tZW50KHZhbHVlMiwgZm9ybWF0LCBzdHJpY3QpO1xyXG4gICAgZGlmZiA9IHBhcnNlSW50KGRhdGUxLmZvcm1hdCgnWCcpLCAxMCkgLSBwYXJzZUludChkYXRlMi5mb3JtYXQoJ1gnKSwgMTApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIHNvcnREaXJlY3Rpb24gKiAoZGlmZiA9PT0gMCA/IDAgOiAoZGlmZiA+IDAgPyAxIDogLTEpKTtcclxufVxyXG5cclxuLyoqIEZyb20gYSBGaWVsZFR5cGUsIHJldHVybiB0aGUgYXNzb2NpYXRlZCBkYXRlIFNvcnRlciAqL1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXNzb2NpYXRlZERhdGVTb3J0ZXIoZmllbGRUeXBlOiBGaWVsZFR5cGUpOiBTb3J0ZXIge1xyXG4gIGNvbnN0IEZPUk1BVCA9IChmaWVsZFR5cGUgPT09IEZpZWxkVHlwZS5kYXRlKSA/IG1vbWVudC5JU09fODYwMSA6IG1hcE1vbWVudERhdGVGb3JtYXRXaXRoRmllbGRUeXBlKGZpZWxkVHlwZSk7XHJcblxyXG4gIHJldHVybiAodmFsdWUxOiBhbnksIHZhbHVlMjogYW55LCBzb3J0RGlyZWN0aW9uOiBudW1iZXIpID0+IHtcclxuICAgIGlmIChGT1JNQVQgPT09IG1vbWVudC5JU09fODYwMSkge1xyXG4gICAgICByZXR1cm4gY29tcGFyZURhdGVzKHZhbHVlMSwgdmFsdWUyLCBzb3J0RGlyZWN0aW9uLCBGT1JNQVQsIGZhbHNlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBjb21wYXJlRGF0ZXModmFsdWUxLCB2YWx1ZTIsIHNvcnREaXJlY3Rpb24sIEZPUk1BVCwgdHJ1ZSk7XHJcbiAgfTtcclxufVxyXG4iXX0=