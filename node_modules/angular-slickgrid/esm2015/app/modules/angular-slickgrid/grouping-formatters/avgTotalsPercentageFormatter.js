import { decimalFormatted, thousandSeparatorFormatted } from '../services/utilities';
import { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';
export const avgTotalsPercentageFormatter = (totals, columnDef, grid) => {
    const field = columnDef.field || '';
    let val = totals.avg && totals.avg[field];
    const params = columnDef && columnDef.params;
    let prefix = params && params.groupFormatterPrefix || '';
    const suffix = params && params.groupFormatterSuffix || '';
    const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid);
    const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid);
    const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val != null && !isNaN(+val)) {
        if (val < 0) {
            val = Math.abs(val);
            if (!displayNegativeNumberWithParentheses) {
                prefix += '-';
            }
            else {
                if (isNaN(minDecimal) && isNaN(maxDecimal)) {
                    const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);
                    return `${prefix}(${outputVal}%)${suffix}`;
                }
                return `${prefix}(${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%)${suffix}`;
            }
        }
        if (isNaN(minDecimal) && isNaN(maxDecimal)) {
            const outputVal = thousandSeparatorFormatted(Math.round(val), thousandSeparator);
            return `${prefix}${outputVal}%${suffix}`;
        }
        return `${prefix}${decimalFormatted(val, minDecimal, maxDecimal, decimalSeparator, thousandSeparator)}%${suffix}`;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXZnVG90YWxzUGVyY2VudGFnZUZvcm1hdHRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItc2xpY2tncmlkLyIsInNvdXJjZXMiOlsiYXBwL21vZHVsZXMvYW5ndWxhci1zbGlja2dyaWQvZ3JvdXBpbmctZm9ybWF0dGVycy9hdmdUb3RhbHNQZXJjZW50YWdlRm9ybWF0dGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSwwQkFBMEIsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQ3JGLE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhGLE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUF5QixDQUFDLE1BQVcsRUFBRSxTQUFpQixFQUFFLElBQVUsRUFBRSxFQUFFO0lBQy9HLE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BDLElBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMxQyxNQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxJQUFJLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUN6RCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUMzRCxNQUFNLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3ZGLE1BQU0sVUFBVSxHQUFHLG9DQUFvQyxDQUFDLFlBQVksRUFBRSxTQUFTLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdkYsTUFBTSxnQkFBZ0IsR0FBRyxvQ0FBb0MsQ0FBQyxrQkFBa0IsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO0lBQ3hHLE1BQU0saUJBQWlCLEdBQUcsb0NBQW9DLENBQUMsbUJBQW1CLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxFQUFFLENBQUMsQ0FBQztJQUN6RyxNQUFNLG9DQUFvQyxHQUFHLG9DQUFvQyxDQUFDLHNDQUFzQyxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFFbEosSUFBSSxHQUFHLElBQUksSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUU7UUFDL0IsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1lBQ1gsR0FBRyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDcEIsSUFBSSxDQUFDLG9DQUFvQyxFQUFFO2dCQUN6QyxNQUFNLElBQUksR0FBRyxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0wsSUFBSSxLQUFLLENBQUMsVUFBVSxDQUFDLElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFFO29CQUMxQyxNQUFNLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7b0JBQ2pGLE9BQU8sR0FBRyxNQUFNLElBQUksU0FBUyxLQUFLLE1BQU0sRUFBRSxDQUFDO2lCQUM1QztnQkFDRCxPQUFPLEdBQUcsTUFBTSxJQUFJLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLEtBQUssTUFBTSxFQUFFLENBQUM7YUFDckg7U0FDRjtRQUVELElBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUMxQyxNQUFNLFNBQVMsR0FBRywwQkFBMEIsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLENBQUM7WUFDakYsT0FBTyxHQUFHLE1BQU0sR0FBRyxTQUFTLElBQUksTUFBTSxFQUFFLENBQUM7U0FDMUM7UUFDRCxPQUFPLEdBQUcsTUFBTSxHQUFHLGdCQUFnQixDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLGdCQUFnQixFQUFFLGlCQUFpQixDQUFDLElBQUksTUFBTSxFQUFFLENBQUM7S0FDbkg7SUFDRCxPQUFPLEVBQUUsQ0FBQztBQUNaLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbHVtbiwgR3JvdXBUb3RhbHNGb3JtYXR0ZXIgfSBmcm9tICcuLy4uL21vZGVscy9pbmRleCc7XHJcbmltcG9ydCB7IGRlY2ltYWxGb3JtYXR0ZWQsIHRob3VzYW5kU2VwYXJhdG9yRm9ybWF0dGVkIH0gZnJvbSAnLi4vc2VydmljZXMvdXRpbGl0aWVzJztcclxuaW1wb3J0IHsgZ2V0VmFsdWVGcm9tUGFyYW1zT3JGb3JtYXR0ZXJPcHRpb25zIH0gZnJvbSAnLi4vZm9ybWF0dGVycy9mb3JtYXR0ZXJVdGlsaXRpZXMnO1xyXG5cclxuZXhwb3J0IGNvbnN0IGF2Z1RvdGFsc1BlcmNlbnRhZ2VGb3JtYXR0ZXI6IEdyb3VwVG90YWxzRm9ybWF0dGVyID0gKHRvdGFsczogYW55LCBjb2x1bW5EZWY6IENvbHVtbiwgZ3JpZD86IGFueSkgPT4ge1xyXG4gIGNvbnN0IGZpZWxkID0gY29sdW1uRGVmLmZpZWxkIHx8ICcnO1xyXG4gIGxldCB2YWwgPSB0b3RhbHMuYXZnICYmIHRvdGFscy5hdmdbZmllbGRdO1xyXG4gIGNvbnN0IHBhcmFtcyA9IGNvbHVtbkRlZiAmJiBjb2x1bW5EZWYucGFyYW1zO1xyXG4gIGxldCBwcmVmaXggPSBwYXJhbXMgJiYgcGFyYW1zLmdyb3VwRm9ybWF0dGVyUHJlZml4IHx8ICcnO1xyXG4gIGNvbnN0IHN1ZmZpeCA9IHBhcmFtcyAmJiBwYXJhbXMuZ3JvdXBGb3JtYXR0ZXJTdWZmaXggfHwgJyc7XHJcbiAgY29uc3QgbWluRGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnbWluRGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCk7XHJcbiAgY29uc3QgbWF4RGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnbWF4RGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCk7XHJcbiAgY29uc3QgZGVjaW1hbFNlcGFyYXRvciA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnZGVjaW1hbFNlcGFyYXRvcicsIGNvbHVtbkRlZiwgZ3JpZCwgJy4nKTtcclxuICBjb25zdCB0aG91c2FuZFNlcGFyYXRvciA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygndGhvdXNhbmRTZXBhcmF0b3InLCBjb2x1bW5EZWYsIGdyaWQsICcnKTtcclxuICBjb25zdCBkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ2Rpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcycsIGNvbHVtbkRlZiwgZ3JpZCwgZmFsc2UpO1xyXG5cclxuICBpZiAodmFsICE9IG51bGwgJiYgIWlzTmFOKCt2YWwpKSB7XHJcbiAgICBpZiAodmFsIDwgMCkge1xyXG4gICAgICB2YWwgPSBNYXRoLmFicyh2YWwpO1xyXG4gICAgICBpZiAoIWRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcykge1xyXG4gICAgICAgIHByZWZpeCArPSAnLSc7XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgaWYgKGlzTmFOKG1pbkRlY2ltYWwpICYmIGlzTmFOKG1heERlY2ltYWwpKSB7XHJcbiAgICAgICAgICBjb25zdCBvdXRwdXRWYWwgPSB0aG91c2FuZFNlcGFyYXRvckZvcm1hdHRlZChNYXRoLnJvdW5kKHZhbCksIHRob3VzYW5kU2VwYXJhdG9yKTtcclxuICAgICAgICAgIHJldHVybiBgJHtwcmVmaXh9KCR7b3V0cHV0VmFsfSUpJHtzdWZmaXh9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0oJHtkZWNpbWFsRm9ybWF0dGVkKHZhbCwgbWluRGVjaW1hbCwgbWF4RGVjaW1hbCwgZGVjaW1hbFNlcGFyYXRvciwgdGhvdXNhbmRTZXBhcmF0b3IpfSUpJHtzdWZmaXh9YDtcclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmIChpc05hTihtaW5EZWNpbWFsKSAmJiBpc05hTihtYXhEZWNpbWFsKSkge1xyXG4gICAgICBjb25zdCBvdXRwdXRWYWwgPSB0aG91c2FuZFNlcGFyYXRvckZvcm1hdHRlZChNYXRoLnJvdW5kKHZhbCksIHRob3VzYW5kU2VwYXJhdG9yKTtcclxuICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke291dHB1dFZhbH0lJHtzdWZmaXh9YDtcclxuICAgIH1cclxuICAgIHJldHVybiBgJHtwcmVmaXh9JHtkZWNpbWFsRm9ybWF0dGVkKHZhbCwgbWluRGVjaW1hbCwgbWF4RGVjaW1hbCwgZGVjaW1hbFNlcGFyYXRvciwgdGhvdXNhbmRTZXBhcmF0b3IpfSUke3N1ZmZpeH1gO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn07XHJcbiJdfQ==