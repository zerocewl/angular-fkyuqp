import { formatNumber } from './../services/utilities';
import { getValueFromParamsOrFormatterOptions } from '../formatters/formatterUtilities';
export const sumTotalsDollarColoredBoldFormatter = (totals, columnDef, grid) => {
    const field = columnDef.field || '';
    const val = totals.sum && totals.sum[field];
    const params = columnDef && columnDef.params;
    const prefix = params && params.groupFormatterPrefix || '';
    const suffix = params && params.groupFormatterSuffix || '';
    const minDecimal = getValueFromParamsOrFormatterOptions('minDecimal', columnDef, grid, 2);
    const maxDecimal = getValueFromParamsOrFormatterOptions('maxDecimal', columnDef, grid, 4);
    const decimalSeparator = getValueFromParamsOrFormatterOptions('decimalSeparator', columnDef, grid, '.');
    const thousandSeparator = getValueFromParamsOrFormatterOptions('thousandSeparator', columnDef, grid, '');
    const displayNegativeNumberWithParentheses = getValueFromParamsOrFormatterOptions('displayNegativeNumberWithParentheses', columnDef, grid, false);
    if (val != null && !isNaN(+val)) {
        const colorStyle = (val >= 0) ? 'green' : 'red';
        const formattedNumber = formatNumber(val, minDecimal, maxDecimal, displayNegativeNumberWithParentheses, '$', '', decimalSeparator, thousandSeparator);
        return `<span style="color:${colorStyle}; font-weight: bold;">${prefix}${formattedNumber}${suffix}</span>`;
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VtVG90YWxzRG9sbGFyQ29sb3JlZEJvbGRGb3JtYXR0ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL2dyb3VwaW5nLWZvcm1hdHRlcnMvc3VtVG90YWxzRG9sbGFyQ29sb3JlZEJvbGRGb3JtYXR0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQ0EsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxvQ0FBb0MsRUFBRSxNQUFNLGtDQUFrQyxDQUFDO0FBRXhGLE1BQU0sQ0FBQyxNQUFNLG1DQUFtQyxHQUF5QixDQUFDLE1BQVcsRUFBRSxTQUFpQixFQUFFLElBQVUsRUFBRSxFQUFFO0lBQ3RILE1BQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLElBQUksRUFBRSxDQUFDO0lBQ3BDLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUM1QyxNQUFNLE1BQU0sR0FBRyxTQUFTLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQztJQUM3QyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUMzRCxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksTUFBTSxDQUFDLG9CQUFvQixJQUFJLEVBQUUsQ0FBQztJQUMzRCxNQUFNLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRixNQUFNLFVBQVUsR0FBRyxvQ0FBb0MsQ0FBQyxZQUFZLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUMxRixNQUFNLGdCQUFnQixHQUFHLG9DQUFvQyxDQUFDLGtCQUFrQixFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDeEcsTUFBTSxpQkFBaUIsR0FBRyxvQ0FBb0MsQ0FBQyxtQkFBbUIsRUFBRSxTQUFTLEVBQUUsSUFBSSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ3pHLE1BQU0sb0NBQW9DLEdBQUcsb0NBQW9DLENBQUMsc0NBQXNDLEVBQUUsU0FBUyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUVsSixJQUFJLEdBQUcsSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUMsRUFBRTtRQUMvQixNQUFNLFVBQVUsR0FBRyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDaEQsTUFBTSxlQUFlLEdBQUcsWUFBWSxDQUFDLEdBQUcsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLG9DQUFvQyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztRQUN0SixPQUFPLHNCQUFzQixVQUFVLHlCQUF5QixNQUFNLEdBQUcsZUFBZSxHQUFHLE1BQU0sU0FBUyxDQUFDO0tBQzVHO0lBQ0QsT0FBTyxFQUFFLENBQUM7QUFDWixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb2x1bW4sIEdyb3VwVG90YWxzRm9ybWF0dGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xyXG5pbXBvcnQgeyBmb3JtYXROdW1iZXIgfSBmcm9tICcuLy4uL3NlcnZpY2VzL3V0aWxpdGllcyc7XHJcbmltcG9ydCB7IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucyB9IGZyb20gJy4uL2Zvcm1hdHRlcnMvZm9ybWF0dGVyVXRpbGl0aWVzJztcclxuXHJcbmV4cG9ydCBjb25zdCBzdW1Ub3RhbHNEb2xsYXJDb2xvcmVkQm9sZEZvcm1hdHRlcjogR3JvdXBUb3RhbHNGb3JtYXR0ZXIgPSAodG90YWxzOiBhbnksIGNvbHVtbkRlZjogQ29sdW1uLCBncmlkPzogYW55KSA9PiB7XHJcbiAgY29uc3QgZmllbGQgPSBjb2x1bW5EZWYuZmllbGQgfHwgJyc7XHJcbiAgY29uc3QgdmFsID0gdG90YWxzLnN1bSAmJiB0b3RhbHMuc3VtW2ZpZWxkXTtcclxuICBjb25zdCBwYXJhbXMgPSBjb2x1bW5EZWYgJiYgY29sdW1uRGVmLnBhcmFtcztcclxuICBjb25zdCBwcmVmaXggPSBwYXJhbXMgJiYgcGFyYW1zLmdyb3VwRm9ybWF0dGVyUHJlZml4IHx8ICcnO1xyXG4gIGNvbnN0IHN1ZmZpeCA9IHBhcmFtcyAmJiBwYXJhbXMuZ3JvdXBGb3JtYXR0ZXJTdWZmaXggfHwgJyc7XHJcbiAgY29uc3QgbWluRGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnbWluRGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCwgMik7XHJcbiAgY29uc3QgbWF4RGVjaW1hbCA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnbWF4RGVjaW1hbCcsIGNvbHVtbkRlZiwgZ3JpZCwgNCk7XHJcbiAgY29uc3QgZGVjaW1hbFNlcGFyYXRvciA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygnZGVjaW1hbFNlcGFyYXRvcicsIGNvbHVtbkRlZiwgZ3JpZCwgJy4nKTtcclxuICBjb25zdCB0aG91c2FuZFNlcGFyYXRvciA9IGdldFZhbHVlRnJvbVBhcmFtc09yRm9ybWF0dGVyT3B0aW9ucygndGhvdXNhbmRTZXBhcmF0b3InLCBjb2x1bW5EZWYsIGdyaWQsICcnKTtcclxuICBjb25zdCBkaXNwbGF5TmVnYXRpdmVOdW1iZXJXaXRoUGFyZW50aGVzZXMgPSBnZXRWYWx1ZUZyb21QYXJhbXNPckZvcm1hdHRlck9wdGlvbnMoJ2Rpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcycsIGNvbHVtbkRlZiwgZ3JpZCwgZmFsc2UpO1xyXG5cclxuICBpZiAodmFsICE9IG51bGwgJiYgIWlzTmFOKCt2YWwpKSB7XHJcbiAgICBjb25zdCBjb2xvclN0eWxlID0gKHZhbCA+PSAwKSA/ICdncmVlbicgOiAncmVkJztcclxuICAgIGNvbnN0IGZvcm1hdHRlZE51bWJlciA9IGZvcm1hdE51bWJlcih2YWwsIG1pbkRlY2ltYWwsIG1heERlY2ltYWwsIGRpc3BsYXlOZWdhdGl2ZU51bWJlcldpdGhQYXJlbnRoZXNlcywgJyQnLCAnJywgZGVjaW1hbFNlcGFyYXRvciwgdGhvdXNhbmRTZXBhcmF0b3IpO1xyXG4gICAgcmV0dXJuIGA8c3BhbiBzdHlsZT1cImNvbG9yOiR7Y29sb3JTdHlsZX07IGZvbnQtd2VpZ2h0OiBib2xkO1wiPiR7cHJlZml4fSR7Zm9ybWF0dGVkTnVtYmVyfSR7c3VmZml4fTwvc3Bhbj5gO1xyXG4gIH1cclxuICByZXR1cm4gJyc7XHJcbn07XHJcbiJdfQ==