export class GridEventService {
    get eventHandler() {
        return this._eventHandler;
    }
    constructor() {
        this._eventHandler = new Slick.EventHandler();
    }
    /* OnCellChange Event */
    bindOnCellChange(grid, dataView) {
        // subscribe to this Slickgrid event of onCellChange
        this._eventHandler.subscribe(grid.onCellChange, (e, args) => {
            if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
                return;
            }
            const column = grid.getColumns()[args.cell];
            // if the column definition has a onCellChange property (a callback function), then run it
            if (typeof column.onCellChange === 'function') {
                // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onCellChange
                const returnedArgs = {
                    row: args.row,
                    cell: args.cell,
                    dataView,
                    grid,
                    columnDef: column,
                    dataContext: grid.getDataItem(args.row)
                };
                // finally call up the Slick.column.onCellChanges.... function
                column.onCellChange(e, returnedArgs);
            }
        });
    }
    /* OnClick Event */
    bindOnClick(grid, dataView) {
        this._eventHandler.subscribe(grid.onClick, (e, args) => {
            if (!e || !args || !grid || args.cell === undefined || !grid.getColumns || !grid.getDataItem) {
                return;
            }
            const column = grid && grid.getColumns && grid.getColumns()[args.cell];
            const gridOptions = grid && grid.getOptions && grid.getOptions() || {};
            // only when using autoCommitEdit, we will make the cell active (in focus) when clicked
            // setting the cell as active as a side effect and if autoCommitEdit is set to false then the Editors won't save correctly
            if (gridOptions.enableCellNavigation && (!gridOptions.editable || (gridOptions.editable && gridOptions.autoCommitEdit))) {
                grid.setActiveCell(args.row, args.cell);
            }
            // if the column definition has a onCellClick property (a callback function), then run it
            if (typeof column.onCellClick === 'function') {
                // add to the output gridOptions & dataView since we'll need them inside the AJAX column.onClick
                const returnedArgs = {
                    row: args.row,
                    cell: args.cell,
                    dataView,
                    grid,
                    columnDef: column,
                    dataContext: grid.getDataItem(args.row)
                };
                // finally call up the Slick.column.onCellClick.... function
                column.onCellClick(e, returnedArgs);
            }
        });
    }
    dispose() {
        this._eventHandler.unsubscribeAll();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZEV2ZW50LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLXNsaWNrZ3JpZC8iLCJzb3VyY2VzIjpbImFwcC9tb2R1bGVzL2FuZ3VsYXItc2xpY2tncmlkL3NlcnZpY2VzL2dyaWRFdmVudC5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUtBLE1BQU0sT0FBTyxnQkFBZ0I7SUFHM0IsSUFBSSxZQUFZO1FBQ2QsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDO0lBQzVCLENBQUM7SUFFRDtRQUNFLElBQUksQ0FBQyxhQUFhLEdBQUcsSUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELHdCQUF3QjtJQUN4QixnQkFBZ0IsQ0FBQyxJQUFTLEVBQUUsUUFBYTtRQUN2QyxvREFBb0Q7UUFDcEQsSUFBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxDQUFDLENBQTZCLEVBQUUsSUFBYyxFQUFFLEVBQUU7WUFDaEcsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFO2dCQUM1RixPQUFPO2FBQ1I7WUFDRCxNQUFNLE1BQU0sR0FBVyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBRXBELDBGQUEwRjtZQUMxRixJQUFJLE9BQU8sTUFBTSxDQUFDLFlBQVksS0FBSyxVQUFVLEVBQUU7Z0JBQzdDLHFHQUFxRztnQkFDckcsTUFBTSxZQUFZLEdBQWdCO29CQUNoQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLFFBQVE7b0JBQ1IsSUFBSTtvQkFDSixTQUFTLEVBQUUsTUFBTTtvQkFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztpQkFDeEMsQ0FBQztnQkFFRiw4REFBOEQ7Z0JBQzlELE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ3RDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsbUJBQW1CO0lBQ25CLFdBQVcsQ0FBQyxJQUFTLEVBQUUsUUFBYTtRQUNsQyxJQUFJLENBQUMsYUFBYSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBNkIsRUFBRSxJQUFjLEVBQUUsRUFBRTtZQUMzRixJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxJQUFJLEtBQUssU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUU7Z0JBQzVGLE9BQU87YUFDUjtZQUNELE1BQU0sTUFBTSxHQUFXLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxJQUFJLElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDL0UsTUFBTSxXQUFXLEdBQWUsSUFBSSxJQUFJLElBQUksQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztZQUVuRix1RkFBdUY7WUFDdkYsMEhBQTBIO1lBQzFILElBQUksV0FBVyxDQUFDLG9CQUFvQixJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxJQUFJLENBQUMsV0FBVyxDQUFDLFFBQVEsSUFBSSxXQUFXLENBQUMsY0FBYyxDQUFDLENBQUMsRUFBRTtnQkFDdkgsSUFBSSxDQUFDLGFBQWEsQ0FBQyxJQUFJLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN6QztZQUVELHlGQUF5RjtZQUN6RixJQUFJLE9BQU8sTUFBTSxDQUFDLFdBQVcsS0FBSyxVQUFVLEVBQUU7Z0JBQzVDLGdHQUFnRztnQkFDaEcsTUFBTSxZQUFZLEdBQWdCO29CQUNoQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEdBQUc7b0JBQ2IsSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNmLFFBQVE7b0JBQ1IsSUFBSTtvQkFDSixTQUFTLEVBQUUsTUFBTTtvQkFDakIsV0FBVyxFQUFFLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztpQkFDeEMsQ0FBQztnQkFFRiw0REFBNEQ7Z0JBQzVELE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsT0FBTztRQUNMLElBQUksQ0FBQyxhQUFhLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDdEMsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2VsbEFyZ3MsIENvbHVtbiwgR3JpZE9wdGlvbiwgT25FdmVudEFyZ3MsIFNsaWNrRXZlbnRIYW5kbGVyIH0gZnJvbSAnLi8uLi9tb2RlbHMvaW5kZXgnO1xuXG4vLyB1c2luZyBleHRlcm5hbCBub24tdHlwZWQganMgbGlicmFyaWVzXG5kZWNsYXJlIHZhciBTbGljazogYW55O1xuXG5leHBvcnQgY2xhc3MgR3JpZEV2ZW50U2VydmljZSB7XG4gIHByaXZhdGUgX2V2ZW50SGFuZGxlcjogU2xpY2tFdmVudEhhbmRsZXI7XG5cbiAgZ2V0IGV2ZW50SGFuZGxlcigpOiBTbGlja0V2ZW50SGFuZGxlciB7XG4gICAgcmV0dXJuIHRoaXMuX2V2ZW50SGFuZGxlcjtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX2V2ZW50SGFuZGxlciA9IG5ldyBTbGljay5FdmVudEhhbmRsZXIoKTtcbiAgfVxuXG4gIC8qIE9uQ2VsbENoYW5nZSBFdmVudCAqL1xuICBiaW5kT25DZWxsQ2hhbmdlKGdyaWQ6IGFueSwgZGF0YVZpZXc6IGFueSkge1xuICAgIC8vIHN1YnNjcmliZSB0byB0aGlzIFNsaWNrZ3JpZCBldmVudCBvZiBvbkNlbGxDaGFuZ2VcbiAgICB0aGlzLl9ldmVudEhhbmRsZXIuc3Vic2NyaWJlKGdyaWQub25DZWxsQ2hhbmdlLCAoZTogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQsIGFyZ3M6IENlbGxBcmdzKSA9PiB7XG4gICAgICBpZiAoIWUgfHwgIWFyZ3MgfHwgIWdyaWQgfHwgYXJncy5jZWxsID09PSB1bmRlZmluZWQgfHwgIWdyaWQuZ2V0Q29sdW1ucyB8fCAhZ3JpZC5nZXREYXRhSXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBjb2x1bW46IENvbHVtbiA9IGdyaWQuZ2V0Q29sdW1ucygpW2FyZ3MuY2VsbF07XG5cbiAgICAgIC8vIGlmIHRoZSBjb2x1bW4gZGVmaW5pdGlvbiBoYXMgYSBvbkNlbGxDaGFuZ2UgcHJvcGVydHkgKGEgY2FsbGJhY2sgZnVuY3Rpb24pLCB0aGVuIHJ1biBpdFxuICAgICAgaWYgKHR5cGVvZiBjb2x1bW4ub25DZWxsQ2hhbmdlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIC8vIGFkZCB0byB0aGUgb3V0cHV0IGdyaWRPcHRpb25zICYgZGF0YVZpZXcgc2luY2Ugd2UnbGwgbmVlZCB0aGVtIGluc2lkZSB0aGUgQUpBWCBjb2x1bW4ub25DZWxsQ2hhbmdlXG4gICAgICAgIGNvbnN0IHJldHVybmVkQXJnczogT25FdmVudEFyZ3MgPSB7XG4gICAgICAgICAgcm93OiBhcmdzLnJvdyxcbiAgICAgICAgICBjZWxsOiBhcmdzLmNlbGwsXG4gICAgICAgICAgZGF0YVZpZXcsXG4gICAgICAgICAgZ3JpZCxcbiAgICAgICAgICBjb2x1bW5EZWY6IGNvbHVtbixcbiAgICAgICAgICBkYXRhQ29udGV4dDogZ3JpZC5nZXREYXRhSXRlbShhcmdzLnJvdylcbiAgICAgICAgfTtcblxuICAgICAgICAvLyBmaW5hbGx5IGNhbGwgdXAgdGhlIFNsaWNrLmNvbHVtbi5vbkNlbGxDaGFuZ2VzLi4uLiBmdW5jdGlvblxuICAgICAgICBjb2x1bW4ub25DZWxsQ2hhbmdlKGUsIHJldHVybmVkQXJncyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKiBPbkNsaWNrIEV2ZW50ICovXG4gIGJpbmRPbkNsaWNrKGdyaWQ6IGFueSwgZGF0YVZpZXc6IGFueSkge1xuICAgIHRoaXMuX2V2ZW50SGFuZGxlci5zdWJzY3JpYmUoZ3JpZC5vbkNsaWNrLCAoZTogS2V5Ym9hcmRFdmVudCB8IE1vdXNlRXZlbnQsIGFyZ3M6IENlbGxBcmdzKSA9PiB7XG4gICAgICBpZiAoIWUgfHwgIWFyZ3MgfHwgIWdyaWQgfHwgYXJncy5jZWxsID09PSB1bmRlZmluZWQgfHwgIWdyaWQuZ2V0Q29sdW1ucyB8fCAhZ3JpZC5nZXREYXRhSXRlbSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBjb25zdCBjb2x1bW46IENvbHVtbiA9IGdyaWQgJiYgZ3JpZC5nZXRDb2x1bW5zICYmIGdyaWQuZ2V0Q29sdW1ucygpW2FyZ3MuY2VsbF07XG4gICAgICBjb25zdCBncmlkT3B0aW9uczogR3JpZE9wdGlvbiA9IGdyaWQgJiYgZ3JpZC5nZXRPcHRpb25zICYmIGdyaWQuZ2V0T3B0aW9ucygpIHx8IHt9O1xuXG4gICAgICAvLyBvbmx5IHdoZW4gdXNpbmcgYXV0b0NvbW1pdEVkaXQsIHdlIHdpbGwgbWFrZSB0aGUgY2VsbCBhY3RpdmUgKGluIGZvY3VzKSB3aGVuIGNsaWNrZWRcbiAgICAgIC8vIHNldHRpbmcgdGhlIGNlbGwgYXMgYWN0aXZlIGFzIGEgc2lkZSBlZmZlY3QgYW5kIGlmIGF1dG9Db21taXRFZGl0IGlzIHNldCB0byBmYWxzZSB0aGVuIHRoZSBFZGl0b3JzIHdvbid0IHNhdmUgY29ycmVjdGx5XG4gICAgICBpZiAoZ3JpZE9wdGlvbnMuZW5hYmxlQ2VsbE5hdmlnYXRpb24gJiYgKCFncmlkT3B0aW9ucy5lZGl0YWJsZSB8fCAoZ3JpZE9wdGlvbnMuZWRpdGFibGUgJiYgZ3JpZE9wdGlvbnMuYXV0b0NvbW1pdEVkaXQpKSkge1xuICAgICAgICBncmlkLnNldEFjdGl2ZUNlbGwoYXJncy5yb3csIGFyZ3MuY2VsbCk7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHRoZSBjb2x1bW4gZGVmaW5pdGlvbiBoYXMgYSBvbkNlbGxDbGljayBwcm9wZXJ0eSAoYSBjYWxsYmFjayBmdW5jdGlvbiksIHRoZW4gcnVuIGl0XG4gICAgICBpZiAodHlwZW9mIGNvbHVtbi5vbkNlbGxDbGljayA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAvLyBhZGQgdG8gdGhlIG91dHB1dCBncmlkT3B0aW9ucyAmIGRhdGFWaWV3IHNpbmNlIHdlJ2xsIG5lZWQgdGhlbSBpbnNpZGUgdGhlIEFKQVggY29sdW1uLm9uQ2xpY2tcbiAgICAgICAgY29uc3QgcmV0dXJuZWRBcmdzOiBPbkV2ZW50QXJncyA9IHtcbiAgICAgICAgICByb3c6IGFyZ3Mucm93LFxuICAgICAgICAgIGNlbGw6IGFyZ3MuY2VsbCxcbiAgICAgICAgICBkYXRhVmlldyxcbiAgICAgICAgICBncmlkLFxuICAgICAgICAgIGNvbHVtbkRlZjogY29sdW1uLFxuICAgICAgICAgIGRhdGFDb250ZXh0OiBncmlkLmdldERhdGFJdGVtKGFyZ3Mucm93KVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIGZpbmFsbHkgY2FsbCB1cCB0aGUgU2xpY2suY29sdW1uLm9uQ2VsbENsaWNrLi4uLiBmdW5jdGlvblxuICAgICAgICBjb2x1bW4ub25DZWxsQ2xpY2soZSwgcmV0dXJuZWRBcmdzKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGRpc3Bvc2UoKSB7XG4gICAgdGhpcy5fZXZlbnRIYW5kbGVyLnVuc3Vic2NyaWJlQWxsKCk7XG4gIH1cbn1cbiJdfQ==